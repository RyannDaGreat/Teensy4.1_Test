
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> dfdsfop
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'dfdsfop' is not defined
>>> 
>>> poksd
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'poksd' is not defined
>>> fpok
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'fpok' is not defined
>>> pokdsfpok
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'pokdsfpok' is not defined
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> dopsf
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'dopsf' is not defined
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> sdfpok
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'sdfpok' is not defined
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> sdfpok
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'sdfpok' is not defined
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== #PINS:
=== #	ADS1115 A0: Single Touch
=== #	ADS1115 A1: Double Touch A
=== #	ADS1115 A2: Double Touch B
=== #	GPIO 12: Single Touch Pullup/Pulldown (Alternates between HIGH and LOW)
=== #	GPIO 11: Single Touch NPN Transistor (HIGH to activate)
=== #	GPIO 10: Dual   Touch NPN Transistor (HIGH to activate)
=== #	GPIO  9: Dual   Touch PNP Transistor (LOW  to activate)
=== 
=== #SOFTWARE TODO: 
=== #	Get rid of spikes in dual touch mode.
=== #		- Calibrate the dual touches to match the single touch so we have compatiable numbers everywhere
=== #			- This can be done in constant space with histograms and bins that fill up as you slowly move a credit card's edge along the ribbon
=== #		- When the upper and lower touch move away or to the single touch position at roughly opposite velocities, don't change single touch/dual touch status until they appear to be from two fingers (if single touch isn't moving much but both top and bottom dual touches are it should be a red flag...watch the graph...)
=== 
=== from urp import *
=== import time
=== import board
=== import busio
=== import adafruit_ads1x15.ads1115 as ADS
=== from adafruit_ads1x15.ads1x15 import Mode
=== from adafruit_ads1x15.analog_in import AnalogIn
=== from digitalio import DigitalInOut, Direction, Pull
=== 
=== if 'i2c' not in dir():
=== 	i2c = busio.I2C(board.SCL, board.SDA, frequency=1000000)# Create the I2C bus with a fast frequency
=== 
=== ads = ADS.ADS1115(i2c)
=== 
=== ads.data_rate = 860 #Maximum frequency of ADS1115 in Hz
=== 
=== ads_gain_single=1
=== ads_gain_dual  =8 #Uses 100kÎ©
=== ads.gain=ads_gain_single #Change this depending on whether you're measuring dual or single
=== 
=== ads_a0 = AnalogIn(ads, ADS.P0)
=== ads_a1 = AnalogIn(ads, ADS.P1)
=== ads_a2 = AnalogIn(ads, ADS.P2)
=== ads_single=ads_a0
=== ads_dual_a=ads_a1
=== ads_dual_b=ads_a2
=== 
=== single_pull=DigitalInOut(board.D12)
=== single_npn =DigitalInOut(board.D11)
=== dual_npn   =DigitalInOut(board.D10)
=== dual_pnp   =DigitalInOut(board.D9 )
=== single_pull.direction=Direction.OUTPUT
=== single_npn .direction=Direction.OUTPUT
=== dual_npn   .direction=Direction.OUTPUT
=== dual_pnp   .direction=Direction.OUTPUT
=== 
=== def activate_single_transistors():
=== 	single_npn.value=False
=== 	dual_pnp  .value=False
=== 	dual_npn  .value=True
=== 
=== def activate_dual_transistors():
=== 	single_npn.value=True
=== 	dual_pnp  .value=True
=== 	dual_npn  .value=False
=== 
=== class CheapSingleTouchReading:
=== 	#TODO: Implement a variation of the SingleTouchReading class called quick-gate check via the Teensy's internal ADC to save a bit of time and get more accurate results on the dual touch readings (because then we can check both upper and lower both before and after the dual readings which means less spikes)
=== 	pass
=== 
=== class SingleTouchReading:
=== 	GATE_THRESHOLD=500 #This needs to be calibrated after observing the raw_gap when touching and not touching the ribbon. You can do this automatically with some fancy algorithm, or you can just look at the serial monitor while printing reading.raw_gap over and over again
=== 
=== 	def __init__(self):
=== 		self.read_raw_lower()
=== 		self.read_raw_upper()
=== 		self.process_readings()
=== 		
=== 	@staticmethod
=== 	def prepare_to_read():
=== 		activate_single_transistors()
=== 		ads.gain=ads_gain_single
=== 
=== 	def read_raw_lower(self):
=== 		SingleTouchReading.prepare_to_read()
=== 		single_pull.value=False
=== 		self.raw_lower=ads_single.value
=== 
=== 	def read_raw_upper(self):
=== 		SingleTouchReading.prepare_to_read()
=== 		single_pull.value=True
=== 		self.raw_upper=ads_single.value
=== 
=== 	def process_readings(self):
=== 		self.raw_gap=abs(self.raw_upper-self.raw_lower)
=== 		self.gate=self.raw_gap<SingleTouchReading.GATE_THRESHOLD
=== 		self.raw_value=(self.raw_upper+self.raw_lower)/2
=== 
=== class DualTouchReading:
=== 	@staticmethod
=== 	def prepare_to_read():
=== 		activate_dual_transistors()
=== 		ads.gain=ads_gain_dual
=== 
=== 	def __init__(self):
=== 		DualTouchReading.prepare_to_read()
=== 		self.raw_a=ads_dual_a.value
=== 		self.raw_b=ads_dual_b.value
=== 
=== #These LinearModule-like classes are all callable when inputting a new value, and all store a 'value' parameter to get the last calulated value 
=== #It's supposed to be pythonic; as opposed to jWave (which implicitly creates a tree). This is more like pytorch than tensorflow...let's see how it goes. 
=== class Tether:
=== 	def __init__(self,size=1,value=None):
=== 		self.size=size
=== 		self.value=value
=== 	def __call__(self,value):
=== 		if self.value is None:
=== 			self.value=value
=== 		else:
=== 			self.value=clamp(self.value,value-self.size,value+self.size)
=== 		return self.value
=== 
=== class SoftTether:
=== 	#Acts similar to Tether, but has nicer properties (is smoother, and large jumps cause near-perfect centering for example)
=== 	def __init__(self,size=1,value=None):
=== 		self.size=size
=== 		self.value=value
=== 	def __call__(self,value):
=== 		if self.value is None:
=== 			self.value=value
=== 		else:
=== 			alpha=1-2.718**(-((value-self.value)/self.size)**2)
=== 			self.value=alpha*value+(1-alpha)*self.value
=== 		return self.value
=== 
=== class Legato:
=== 	def __init__(self,alpha,value=None):
=== 		self.value=value
=== 		self.alpha=alpha
=== 	def __call__(self,value):
=== 		if self.value is None:
=== 			self.value=value
=== 		else:
=== 			self.value=self.alpha*value+self.value*(1-self.alpha)
=== 		return self.value
=== 
=== class Differential:
=== 	#TODO: Make a version of this class that takes time into account?
=== 	def __init__(self,prev=None,value=None):
=== 		self.prev=prev
=== 		self.value=value
=== 	def __call__(self,value):
=== 		if self.value is None:
=== 			self.prev=value
=== 		self.value=value-self.prev
=== 		self.prev=value
=== 		return self.value
=== 
=== 
=== class MovingAverage:
=== 	pass
=== 	#To be implemented some other time...
=== 	# def __init__(self)
=== 
=== DUAL_DEMO=True
=== if not DUAL_DEMO:
=== 	#A really nice single-value reading demo
=== 	DISCRETE=False#Set this to true to prove that we really do have 2**15 different spaces on the ribbon (place static object on ribbon to demonstrate)
=== 	#Note that vibrato movement can be detected on a scale EVEN SMALLER than 2**15 resolution
=== 	#Therefore, the total resolution is AT LEAST (750mm/2**15)=23 micrometers=.02mm (holy crap lol - that's 1/5th of the finest 3d printing height I can use...)
=== 	#DISCRETE might be nice when trying to determine if the touch moves (it's nearly 100% accurate from my tests; static objects don't move it at all when DISCRETE=True)
=== 	N=10
=== 	V=[]
=== 	def mean(l):
=== 		l=list(l)
=== 		return sum(l)/len(l)
=== 	def std(l):
=== 		u=mean(l)
=== 		return mean((x-u)**2 for x in l)**.5
=== 	tether=SoftTether(size=5)
=== 	tet2=Tether(1)
=== 	while True:
=== 		single=SingleTouchReading()
=== 		if single.gate:
=== 			V.append(single.raw_value)
=== 			while len(V)>N:
=== 				del V[0]
=== 			val=tether(mean(V))
=== 			if DISCRETE:
=== 				print(tet2(int(val)))
=== 			else:
=== 				print(val)
=== 		else:
=== 			V.clear()
=== 			tether.value=None
=== else:
=== 	#A really nice Dual-Touch demo that shows the shortcomings of the current processing method
=== 	while True:
=== 		single_before=SingleTouchReading()
=== 		dual=DualTouchReading()
=== 		single_after=SingleTouchReading()
=== 
=== 		if single_before.gate and single_after.gate: #TODO: Implement CheapSingleTouchReading so we can run nearly 3x as fast
=== 			print(single_before.raw_value,
=== 				  single_after.raw_value,
=== 				  (single_before.raw_value+single_after.raw_value)/2,
=== 				  dual.raw_a,
=== 				  2**15-dual.raw_b)
=== 
Traceback (most recent call last):
  File "<stdin>", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== #PINS:
=== #	ADS1115 A0: Single Touch
=== #	ADS1115 A1: Double Touch A
=== #	ADS1115 A2: Double Touch B
=== #	GPIO 12: Single Touch Pullup/Pulldown (Alternates between HIGH and LOW)
=== #	GPIO 11: Single Touch NPN Transistor (HIGH to activate)
=== #	GPIO 10: Dual   Touch NPN Transistor (HIGH to activate)
=== #	GPIO  9: Dual   Touch PNP Transistor (LOW  to activate)
=== 
=== #SOFTWARE TODO: 
=== #	Get rid of spikes in dual touch mode.
=== #		- Calibrate the dual touches to match the single touch so we have compatiable numbers everywhere
=== #			- This can be done in constant space with histograms and bins that fill up as you slowly move a credit card's edge along the ribbon
=== #		- When the upper and lower touch move away or to the single touch position at roughly opposite velocities, don't change single touch/dual touch status until they appear to be from two fingers (if single touch isn't moving much but both top and bottom dual touches are it should be a red flag...watch the graph...)
=== 
=== from urp import *
=== import time
=== import board
=== import busio
=== import adafruit_ads1x15.ads1115 as ADS
=== from adafruit_ads1x15.ads1x15 import Mode
=== from adafruit_ads1x15.analog_in import AnalogIn
=== from digitalio import DigitalInOut, Direction, Pull
=== 
=== if 'i2c' not in dir():
=== 	i2c = busio.I2C(board.SCL, board.SDA, frequency=1000000)# Create the I2C bus with a fast frequency
=== 
=== ads = ADS.ADS1115(i2c)
=== 
=== ads.data_rate = 860 #Maximum frequency of ADS1115 in Hz
=== 
=== ads_gain_single=1
=== ads_gain_dual  =8 #Uses 100kÎ©
=== ads.gain=ads_gain_single #Change this depending on whether you're measuring dual or single
=== 
=== ads_a0 = AnalogIn(ads, ADS.P0)
=== ads_a1 = AnalogIn(ads, ADS.P1)
=== ads_a2 = AnalogIn(ads, ADS.P2)
=== ads_single=ads_a0
=== ads_dual_a=ads_a1
=== ads_dual_b=ads_a2
=== 
=== single_pull=DigitalInOut(board.D12)
=== single_npn =DigitalInOut(board.D11)
=== dual_npn   =DigitalInOut(board.D10)
=== dual_pnp   =DigitalInOut(board.D9 )
=== single_pull.direction=Direction.OUTPUT
=== single_npn .direction=Direction.OUTPUT
=== dual_npn   .direction=Direction.OUTPUT
=== dual_pnp   .direction=Direction.OUTPUT
=== 
=== def activate_single_transistors():
=== 	single_npn.value=False
=== 	dual_pnp  .value=False
=== 	dual_npn  .value=True
=== 
=== def activate_dual_transistors():
=== 	single_npn.value=True
=== 	dual_pnp  .value=True
=== 	dual_npn  .value=False
=== 
=== class CheapSingleTouchReading:
=== 	#TODO: Implement a variation of the SingleTouchReading class called quick-gate check via the Teensy's internal ADC to save a bit of time and get more accurate results on the dual touch readings (because then we can check both upper and lower both before and after the dual readings which means less spikes)
=== 	pass
=== 
=== class SingleTouchReading:
=== 	GATE_THRESHOLD=500 #This needs to be calibrated after observing the raw_gap when touching and not touching the ribbon. You can do this automatically with some fancy algorithm, or you can just look at the serial monitor while printing reading.raw_gap over and over again
=== 
=== 	def __init__(self):
=== 		self.read_raw_lower()
=== 		self.read_raw_upper()
=== 		self.process_readings()
=== 		
=== 	@staticmethod
=== 	def prepare_to_read():
=== 		activate_single_transistors()
=== 		ads.gain=ads_gain_single
=== 
=== 	def read_raw_lower(self):
=== 		SingleTouchReading.prepare_to_read()
=== 		single_pull.value=False
=== 		self.raw_lower=ads_single.value
=== 
=== 	def read_raw_upper(self):
=== 		SingleTouchReading.prepare_to_read()
=== 		single_pull.value=True
=== 		self.raw_upper=ads_single.value
=== 
=== 	def process_readings(self):
=== 		self.raw_gap=abs(self.raw_upper-self.raw_lower)
=== 		self.gate=self.raw_gap<SingleTouchReading.GATE_THRESHOLD
=== 		self.raw_value=(self.raw_upper+self.raw_lower)/2
=== 
=== class DualTouchReading:
=== 	@staticmethod
=== 	def prepare_to_read():
=== 		activate_dual_transistors()
=== 		ads.gain=ads_gain_dual
=== 
=== 	def __init__(self):
=== 		DualTouchReading.prepare_to_read()
=== 		self.raw_a=ads_dual_a.value
=== 		self.raw_b=ads_dual_b.value
=== 
=== #These LinearModule-like classes are all callable when inputting a new value, and all store a 'value' parameter to get the last calulated value 
=== #It's supposed to be pythonic; as opposed to jWave (which implicitly creates a tree). This is more like pytorch than tensorflow...let's see how it goes. 
=== class Tether:
=== 	def __init__(self,size=1,value=None):
=== 		self.size=size
=== 		self.value=value
=== 	def __call__(self,value):
=== 		if self.value is None:
=== 			self.value=value
=== 		else:
=== 			self.value=clamp(self.value,value-self.size,value+self.size)
=== 		return self.value
=== 
=== class SoftTether:
=== 	#Acts similar to Tether, but has nicer properties (is smoother, and large jumps cause near-perfect centering for example)
=== 	def __init__(self,size=1,value=None):
=== 		self.size=size
=== 		self.value=value
=== 	def __call__(self,value):
=== 		if self.value is None:
=== 			self.value=value
=== 		else:
=== 			alpha=1-2.718**(-((value-self.value)/self.size)**2)
=== 			self.value=alpha*value+(1-alpha)*self.value
=== 		return self.value
=== 
=== class Legato:
=== 	def __init__(self,alpha,value=None):
=== 		self.value=value
=== 		self.alpha=alpha
=== 	def __call__(self,value):
=== 		if self.value is None:
=== 			self.value=value
=== 		else:
=== 			self.value=self.alpha*value+self.value*(1-self.alpha)
=== 		return self.value
=== 
=== class Differential:
=== 	#TODO: Make a version of this class that takes time into account?
=== 	def __init__(self,prev=None,value=None):
=== 		self.prev=prev
=== 		self.value=value
=== 	def __call__(self,value):
=== 		if self.value is None:
=== 			self.prev=value
=== 		self.value=value-self.prev
=== 		self.prev=value
=== 		return self.value
=== 
=== 
=== class MovingAverage:
=== 	pass
=== 	#To be implemented some other time...
=== 	# def __init__(self)
=== 
=== DUAL_DEMO=True
=== if not DUAL_DEMO:
=== 	#A really nice single-value reading demo
=== 	DISCRETE=False#Set this to true to prove that we really do have 2**15 different spaces on the ribbon (place static object on ribbon to demonstrate)
=== 	#Note that vibrato movement can be detected on a scale EVEN SMALLER than 2**15 resolution
=== 	#Therefore, the total resolution is AT LEAST (750mm/2**15)=23 micrometers=.02mm (holy crap lol - that's 1/5th of the finest 3d printing height I can use...)
=== 	#DISCRETE might be nice when trying to determine if the touch moves (it's nearly 100% accurate from my tests; static objects don't move it at all when DISCRETE=True)
=== 	N=10
=== 	V=[]
=== 	def mean(l):
=== 		l=list(l)
=== 		return sum(l)/len(l)
=== 	def std(l):
=== 		u=mean(l)
=== 		return mean((x-u)**2 for x in l)**.5
=== 	tether=SoftTether(size=5)
=== 	tet2=Tether(1)
=== 	while True:
=== 		single=SingleTouchReading()
=== 		if single.gate:
=== 			V.append(single.raw_value)
=== 			while len(V)>N:
=== 				del V[0]
=== 			val=tether(mean(V))
=== 			if DISCRETE:
=== 				print(tet2(int(val)))
=== 			else:
=== 				print(val)
=== 		else:
=== 			V.clear()
=== 			tether.value=None
=== else:
=== 	#A really nice Dual-Touch demo that shows the shortcomings of the current processing method
=== 	while True:
=== 		single_before=SingleTouchReading()
=== 		dual=DualTouchReading()
=== 		single_after=SingleTouchReading()
=== 
=== 		if single_before.gate and single_after.gate: #TODO: Implement CheapSingleTouchReading so we can run nearly 3x as fast
=== 			print(single_before.raw_value,
=== 				  single_after.raw_value,
=== 				  (single_before.raw_value+single_after.raw_value)/2,
=== 				  dual.raw_a,
=== 				  2**15-dual.raw_b)
=== 
Traceback (most recent call last):
  File "<stdin>", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== #PINS:
=== #	ADS1115 A0: Single Touch
=== #	ADS1115 A1: Double Touch A
=== #	ADS1115 A2: Double Touch B
=== #	GPIO 12: Single Touch Pullup/Pulldown (Alternates between HIGH and LOW)
=== #	GPIO 11: Single Touch NPN Transistor (HIGH to activate)
=== #	GPIO 10: Dual   Touch NPN Transistor (HIGH to activate)
=== #	GPIO  9: Dual   Touch PNP Transistor (LOW  to activate)
=== 
=== #SOFTWARE TODO: 
=== #	Get rid of spikes in dual touch mode.
=== #		- Calibrate the dual touches to match the single touch so we have compatiable numbers everywhere
=== #			- This can be done in constant space with histograms and bins that fill up as you slowly move a credit card's edge along the ribbon
=== #		- When the upper and lower touch move away or to the single touch position at roughly opposite velocities, don't change single touch/dual touch status until they appear to be from two fingers (if single touch isn't moving much but both top and bottom dual touches are it should be a red flag...watch the graph...)
=== 
=== from urp import *
=== import time
=== import board
=== import busio
=== import adafruit_ads1x15.ads1115 as ADS
=== from adafruit_ads1x15.ads1x15 import Mode
=== from adafruit_ads1x15.analog_in import AnalogIn
=== from digitalio import DigitalInOut, Direction, Pull
=== 
=== if 'i2c' not in dir():
=== 	i2c = busio.I2C(board.SCL, board.SDA, frequency=1000000)# Create the I2C bus with a fast frequency
=== 
=== ads = ADS.ADS1115(i2c)
=== 
=== ads.data_rate = 860 #Maximum frequency of ADS1115 in Hz
=== 
=== ads_gain_single=1
=== ads_gain_dual  =8 #Uses 100kÎ©
=== ads.gain=ads_gain_single #Change this depending on whether you're measuring dual or single
=== 
=== ads_a0 = AnalogIn(ads, ADS.P0)
=== ads_a1 = AnalogIn(ads, ADS.P1)
=== ads_a2 = AnalogIn(ads, ADS.P2)
=== ads_single=ads_a0
=== ads_dual_a=ads_a1
=== ads_dual_b=ads_a2
=== 
=== single_pull=DigitalInOut(board.D12)
=== single_npn =DigitalInOut(board.D11)
=== dual_npn   =DigitalInOut(board.D10)
=== dual_pnp   =DigitalInOut(board.D9 )
=== single_pull.direction=Direction.OUTPUT
=== single_npn .direction=Direction.OUTPUT
=== dual_npn   .direction=Direction.OUTPUT
=== dual_pnp   .direction=Direction.OUTPUT
=== 
=== def activate_single_transistors():
=== 	single_npn.value=False
=== 	dual_pnp  .value=False
=== 	dual_npn  .value=True
=== 
=== def activate_dual_transistors():
=== 	single_npn.value=True
=== 	dual_pnp  .value=True
=== 	dual_npn  .value=False
=== 
=== class CheapSingleTouchReading:
=== 	#TODO: Implement a variation of the SingleTouchReading class called quick-gate check via the Teensy's internal ADC to save a bit of time and get more accurate results on the dual touch readings (because then we can check both upper and lower both before and after the dual readings which means less spikes)
=== 	pass
=== 
=== class SingleTouchReading:
=== 	GATE_THRESHOLD=500 #This needs to be calibrated after observing the raw_gap when touching and not touching the ribbon. You can do this automatically with some fancy algorithm, or you can just look at the serial monitor while printing reading.raw_gap over and over again
=== 
=== 	def __init__(self):
=== 		self.read_raw_lower()
=== 		self.read_raw_upper()
=== 		self.process_readings()
=== 		
=== 	@staticmethod
=== 	def prepare_to_read():
=== 		activate_single_transistors()
=== 		ads.gain=ads_gain_single
=== 
=== 	def read_raw_lower(self):
=== 		SingleTouchReading.prepare_to_read()
=== 		single_pull.value=False
=== 		self.raw_lower=ads_single.value
=== 
=== 	def read_raw_upper(self):
=== 		SingleTouchReading.prepare_to_read()
=== 		single_pull.value=True
=== 		self.raw_upper=ads_single.value
=== 
=== 	def process_readings(self):
=== 		self.raw_gap=abs(self.raw_upper-self.raw_lower)
=== 		self.gate=self.raw_gap<SingleTouchReading.GATE_THRESHOLD
=== 		self.raw_value=(self.raw_upper+self.raw_lower)/2
=== 
=== class DualTouchReading:
=== 	@staticmethod
=== 	def prepare_to_read():
=== 		activate_dual_transistors()
=== 		ads.gain=ads_gain_dual
=== 
=== 	def __init__(self):
=== 		DualTouchReading.prepare_to_read()
=== 		self.raw_a=ads_dual_a.value
=== 		self.raw_b=ads_dual_b.value
=== 
=== #These LinearModule-like classes are all callable when inputting a new value, and all store a 'value' parameter to get the last calulated value 
=== #It's supposed to be pythonic; as opposed to jWave (which implicitly creates a tree). This is more like pytorch than tensorflow...let's see how it goes. 
=== class Tether:
=== 	def __init__(self,size=1,value=None):
=== 		self.size=size
=== 		self.value=value
=== 	def __call__(self,value):
=== 		if self.value is None:
=== 			self.value=value
=== 		else:
=== 			self.value=clamp(self.value,value-self.size,value+self.size)
=== 		return self.value
=== 
=== class SoftTether:
=== 	#Acts similar to Tether, but has nicer properties (is smoother, and large jumps cause near-perfect centering for example)
=== 	def __init__(self,size=1,value=None):
=== 		self.size=size
=== 		self.value=value
=== 	def __call__(self,value):
=== 		if self.value is None:
=== 			self.value=value
=== 		else:
=== 			alpha=1-2.718**(-((value-self.value)/self.size)**2)
=== 			self.value=alpha*value+(1-alpha)*self.value
=== 		return self.value
=== 
=== class Legato:
=== 	def __init__(self,alpha,value=None):
=== 		self.value=value
=== 		self.alpha=alpha
=== 	def __call__(self,value):
=== 		if self.value is None:
=== 			self.value=value
=== 		else:
=== 			self.value=self.alpha*value+self.value*(1-self.alpha)
=== 		return self.value
=== 
=== class Differential:
=== 	#TODO: Make a version of this class that takes time into account?
=== 	def __init__(self,prev=None,value=None):
=== 		self.prev=prev
=== 		self.value=value
=== 	def __call__(self,value):
=== 		if self.value is None:
=== 			self.prev=value
=== 		self.value=value-self.prev
=== 		self.prev=value
=== 		return self.value
=== 
=== 
=== class MovingAverage:
=== 	pass
=== 	#To be implemented some other time...
=== 	# def __init__(self)
=== 
=== DUAL_DEMO=True
=== if not DUAL_DEMO:
=== 	#A really nice single-value reading demo
=== 	DISCRETE=False#Set this to true to prove that we really do have 2**15 different spaces on the ribbon (place static object on ribbon to demonstrate)
=== 	#Note that vibrato movement can be detected on a scale EVEN SMALLER than 2**15 resolution
=== 	#Therefore, the total resolution is AT LEAST (750mm/2**15)=23 micrometers=.02mm (holy crap lol - that's 1/5th of the finest 3d printing height I can use...)
=== 	#DISCRETE might be nice when trying to determine if the touch moves (it's nearly 100% accurate from my tests; static objects don't move it at all when DISCRETE=True)
=== 	N=10
=== 	V=[]
=== 	def mean(l):
=== 		l=list(l)
=== 		return sum(l)/len(l)
=== 	def std(l):
=== 		u=mean(l)
=== 		return mean((x-u)**2 for x in l)**.5
=== 	tether=SoftTether(size=5)
=== 	tet2=Tether(1)
=== 	while True:
=== 		single=SingleTouchReading()
=== 		if single.gate:
=== 			V.append(single.raw_value)
=== 			while len(V)>N:
=== 				del V[0]
=== 			val=tether(mean(V))
=== 			if DISCRETE:
=== 				print(tet2(int(val)))
=== 			else:
=== 				print(val)
=== 		else:
=== 			V.clear()
=== 			tether.value=None
=== else:
=== 	#A really nice Dual-Touch demo that shows the shortcomings of the current processing method
=== 	while True:
=== 		single_before=SingleTouchReading()
=== 		dual=DualTouchReading()
=== 		single_after=SingleTouchReading()
=== 
=== 		if single_before.gate and single_after.gate: #TODO: Implement CheapSingleTouchReading so we can run nearly 3x as fast
=== 			print(single_before.raw_value,
=== 				  single_after.raw_value,
=== 				  (single_before.raw_value+single_after.raw_value)/2,
=== 				  dual.raw_a,
=== 				  2**15-dual.raw_b)
=== 
Traceback (most recent call last):
  File "<stdin>", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48
>>> 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.
Adafruit CircuitPython 6.0.0-rc.2 on 2020-11-12; Teensy 4.1 with IMXRT1062DVJ6A
>>> 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.
Adafruit CircuitPython 6.0.0-rc.2 on 2020-11-12; Teensy 4.1 with IMXRT1062DVJ6A
>>> 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 48

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 4a

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 4a

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 4a

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 4a

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 4a

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 4a

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 49

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 49

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 49

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 49

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 4b

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 4b

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 4b

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 4b

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 28, in <module>
  File "/lib/adafruit_ads1x15/ads1x15.py", line 82, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 68, in __init__
  File "/lib/adafruit_bus_device/i2c_device.py", line 182, in __probe_for_device
  File "/lib/adafruit_bus_device/i2c_device.py", line 180, in __probe_for_device
ValueError: No I2C device at address: 4b

Press any key to enter the REPL. Use CTRL-D to reload.832
672
688
720
720
720
720
688
704
736
704
736
656
768
736
736
720
672
704
720
720
672
800
736
704
720
704
720
720
640
720
752
640
752
736
720
752
784
656
752
720
704
656
688
736
688
736
720
704
752
752
704
736
736
736
656
752
640
720
800
720
688
736
688
704
688
704
688
688
736
720
736
720
720
736
752
688
720
720
688
816
720
672
688
688
656
704
736
736
688
736
752
688
704
720
672
720
720
736
752
800
768
720
752
720
688
672
752
752
688
640
736
672
736
640
832
720
736
736
752
720
736
720
704
720
640
768
704
736
752
672
640
720
720
640
672
752
704
736
816
704
672
736
752
656
784
704
720
704
720
752
768
720
720
704
752
784
704
704
736
736
672
720
768
752
736
672
768
736
768
624
720
656
672
736
752
736
736
800
656
704
704
768
704
640
720
736
704
656
688
752
672
720
720
720
704
704
752
752
752
768
656
656
736
656
640
720
736
656
784
672
784
720
640
672
800
752
656
720
720
752
704
752
720
752
752
736
720
624
672
656
784
656
736
768
752
688
816
752
752
656
768
736
704
736
736
720
736
736
672
720
736
656
656
672
656
672
672
768
752
672
656
688
736
672
672
736
816
704
736
672
752
752
656
784
656
736
720
720
800
704
736
704
752
720
752
736
752
768
720
720
800
736
736
656
656
704
720
672
736
768
672
640
736
800
656
656
800
752
720
736
672
752
704
624
768
672
736
800
704
672
752
720
768
704
704
672
736
784
656
752
768
768
752
672
752
656
816
720
640
784
640
720
704
608
720
768
672
704
736
736
656
768
736
720
672
752
800
704
704
768
736
816
832
688
768
752
720
752
688
800
672
672
736
624
688
720
704
736
704
656
720
672
640
736
640
816
704
656
704
688
640
768
752
704
640
720
736
768
704
688
656
752
720
720
656
768
672
736
672
688
688
768
768
752
704
752
640
736
736
720
672
736
752
672
736
768
768
784
736
720
688
800
688
720
768
736
704
768
688
704
768
768
672
768
688
720
704
736
672
768
688
640
688
672
720
720
656
704
688
752
720
656
736
768
656
640
720
656
752
752
720
752
704
672
768
720
688
672
736
736
704
640
720
672
720
720
752
720
752
800
672
704
720
736
704
752
752
656
672
752
720
688
720
704
736
768
736
720
800
704
720
768
768
672
672
768
736
656
640
720
688
720
752
768
784
704
672
752
720
720
720
736
672
720
624
768
672
736
720
752
752
704
672
736
704
736
720
688
752
800
656
720
656
704
736
656
688
768
720
736
816
720
688
656
688
720
656
704
704
784
752
656
720
720
736
672
832
768
704
640
752
656
736
720
752
672
656
704
672
720
688
720
736
672
704
704
736
768
768
736
736
736
752
704
688
720
688
752
720
656
800
656
656
752
640
704
736
704
608
656
768
720
672
736
624
768
720
752
720
672
688
752
768
656
752
656
672
736
736
704
672
736
816
736
720
752
656
752
704
704
656
752
736
720
736
736
752
752
672
640
640
720
736
688
704
720
720
656
736
752
672
720
736
688
656
640
720
720
704
736
672
656
656
720
704
640
704
720
736
640
752
752
688
736
816
672
672
736
672
784
752
736
832
752
720
736
672
768
720
736
704
672
752
672
704
688
720
736
736
720
720
752
752
736
752
704
656
704
704
656
672
720
800
688
752
752
768
768
704
736
752
800
672
672
656
752
656
736
656
672
720
768
704
672
736
784
688
656
720
816
640
656
752
832
720
736
784
672
688
800
640
704
656
672
784
672
688
752
640
672
672
688
656
720
720
752
752
672
704
640
784
736
736
672
720
768
736
752
736
736
720
736
736
736
640
704
720
688
640
688
656
672
784
688
656
736
800
656
624
688
736
736
640
672
672
736
736
752
704
672
672
704
752
768
688
672
672
752
704
736
752
736
656
736
784
720
688
720
672
736
736
672
768
720
720
736
656
720
800
720
752
704
736
672
672
672
656
736
720
720
656
720
720
784
688
704
688
800
704
720
752
800
736
624
656
704
704
720
704
784
688
768
672
640
752
784
720
768
672
704
720
768
720
800
752
800
672
736
688
752
720
656
736
768
720
640
736
704
736
736
736
688
752
704
656
640
608
752
656
768
656
752
752
720
752
768
688
736
720
672
672
720
720
752
720
752
768
768
656
656
768
752
768
704
704
720
688
736
720
672
720
672
768
640
736
688
784
736
688
768
688
784
704
672
736
704
704
752
768
672
656
720
672
688
672
752
752
752
736
768
784
736
768
752
736
800
704
752
720
720
720
752
656
688
688
704
704
720
704
624
640
768
672
656
688
784
752
752
768
768
672
704
704
640
768
608
720
736
752
720
672
720
704
784
720
752
736
624
704
640
768
704
656
752
752
752
784
736
704
704
672
672
752
768
720
672
784
752
704
672
656
752
656
688
768
752
784
656
736
768
720
720
752
704
736
784
704
704
720
768
752
656
736
672
736
672
656
768
736
688
736
656
736
736
768
672
720
752
816
704
736
704
688
704
736
800
736
768
704
736
688
656
736
736
688
688
672
720
736
752
688
720
736
656
720
688
752
720
784
720
752
672
800
784
784
752
720
720
752
688
688
768
736
656
720
752
784
688
768
720
752
672
720
720
736
768
672
768
736
752
720
656
672
672
768
816
720
816
752
640
768
752
720
736
736
736
704
816
736
672
752
752
688
704
720
736
784
832
752
704
768
656
768
640
688
768
736
656
784
752
752
640
768
720
800
736
656
656
752
704
720
736
720
704
640
720
704
720
672
736
688
640
720
688
704
736
672
768
656
720
688
672
800
736
720
800
768
640
752
688
752
752
688
704
656
736
640
720
720
736
640
672
768
768
704
640
688
736
688
688
640
656
752
736
768
816
752
704
768
768
672
720
656
704
720
672
656
736
656
752
736
768
656
640
736
640
720
672
624
752
784
720
672
736
672
720
688
736
768
688
752
768
688
704
672
704
688
672
768
736
768
752
832
656
688
704
656
816
752
784
800
736
640
736
768
752
720
688
720
704
736
720
800
784
672
640
800
720
688
736
736
720
752
736
736
720
608
720
656
672
736
720
720
656
752
688
720
704
752
736
800
640
688
704
800
656
784
656
624
720
768
752
736
736
752
704
672
720
720
720
816
672
672
656
816
656
672
688
736
672
768
784
656
720
784
640
800
752
768
688
736
704
736
720
768
720
736
720
720
752
752
688
736
752
688
624
720
688
752
704
640
720
752
704
736
736
624
800
720
720
736
720
768
672
768
752
784
688
736
656
656
704
688
752
736
752
704
672
720
688
720
768
688
816
720
688
720
656
752
736
672
752
736
704
784
720
656
704
784
688
656
736
736
640
704
736
704
736
704
720
640
656
672
752
656
736
640
800
672
672
720
832
736
752
736
656
752
656
768
784
704
720
752
752
768
720
752
624
656
720
768
720
784
752
704
768
672
704
752
704
736
688
736
752
656
656
736
736
768
656
832
720
736
672
688
720
688
800
704
704
720
736
704
736
784
720
736
720
800
768
704
720
672
720
768
720
720
688
752
736
720
832
704
736
720
640
800
720
784
720
720
720
656
736
640
656
704
672
720
720
736
752
736
752
768
768
688
688
736
752
800
736
672
736
752
768
672
752
720
752
736
736
736
720
752
656
704
752
736
736
752
720
736
704
640
768
624
656
768
752
656
736
672
720
736
688
752
656
656
608
672
688
736
720
720
784
640
736
752
704
656
720
624
656
768
672
736
720
672
768
640
768
720
768
752
848
736
816
720
816
672
768
720
768
736
752
752
656
752
752
608
672
688
688
720
752
688
704
704
672
720
736
672
768
736
688
736
720
736
736
752
816
720
736
720
832
656
736
704
640
752
752
688
752
752
736
800
688
736
640
752
752
720
656
672
800
704
736
800
736
672
672
720
784
736
672
688
736
752
720
784
688
752
720
736
640
720
688
752
704
672
656
800
720
768
656
752
720
624
736
656
656
704
688
736
624
720
688
816
752
736
736
720
704
752
704
752
736
640
720
768
656
736
656
736
656
768
672
736
688
768
720
704
656
704
752
704
704
688
752
720
624
784
656
736
688
720
736
768
720
688
720
704
752
640
704
688
752
672
704
640
720
704
704
736
656
720
688
640
736
656
704
624
720
704
816
656
768
720
656
656
704
688
704
752
752
720
768
752
720
720
640
768
768
704
704
752
672
672
720
736
720
720
752
720
704
640
688
784
752
688
720
672
672
752
752
704
736
736
800
736
736
736
656
752
688
688
704
704
704
672
656
816
736
720
704
736
752
752
672
688
752
752
672
752
704
656
752
640
752
688
688
752
672
800
752
688
720
640
720
672
736
704
688
720
736
704
720
720
704
736
672
752
784
720
720
736
800
656
720
736
784
656
768
656
768
736
704
768
656
720
736
688
752
688
752
656
768
688
624
752
800
704
720
720
640
720
768
816
720
720
736
704
736
704
768
720
656
720
672
720
704
752
688
736
736
704
672
704
800
672
752
640
768
688
704
752
736
640
720
784
672
752
720
720
688
768
704
704
656
672
752
672
736
768
752
768
800
720
736
704
736
736
640
768
688
688
672
688
752
640
624
736
704
736
672
704
752
704
656
640
720
672
656
752
672
656
656
752
752
640
736
752
768
656
720
784
720
640
656
736
752
672
672
736
784
720
656
752
720
768
784
656
720
768
720
656
704
704
752
736
752
672
656
752
752
752
736
784
752
688
736
672
800
704
672
736
768
704
720
720
720
656
736
704
688
688
672
736
800
688
704
736
768
704
720
800
768
720
672
768
656
688
704
736
656
672
704
768
720
688
640
656
672
704
656
688
768
688
752
688
736
704
624
768
752
752
752
704
784
736
656
688
656
672
736
672
720
688
752
736
736
688
656
816
768
656
656
832
672
704
752
752
640
768
640
704
656
672
720
768
640
736
768
704
720
752
704
752
720
656
736
752
736
736
688
672
672
768
736
816
640
752
784
720
784
656
672
784
752
752
768
768
720
720
736
784
752
672
736
736
736
768
720
720
768
672
656
720
736
688
656
672
800
640
752
720
672
704
688
720
752
704
736
752
704
656
720
720
656
704
704
752
656
736
720
704
688
688
688
768
656
720
704
672
720
688
736
656
704
720
784
656
736
720
672
736
720
640
736
704
768
672
736
672
720
752
624
720
688
688
672
752
768
704
720
656
704
640
672
736
704
704
720
768
720
752
688
752
784
720
736
800
720
656
720
736
672
704
736
720
736
768
784
688
752
688
672
720
752
736
672
784
736
656
720
624
752
752
704
640
768
752
720
752
720
768
640
672
736
752
736
656
752
768
688
752
768
672
768
816
704
720
752
720
672
736
688
736
672
656
736
656
672
768
736
720
736
736
736
736
704
736
752
736
656
720
672
656
736
720
720
688
720
752
704
784
720
704
688
672
736
800
704
672
704
688
704
736
640
768
672
704
688
752
656
720
736
784
736
624
736
720
688
736
640
704
752
736
736
752
768
720
704
656
672
672
704
736
736
672
832
640
704
640
704
640
672
672
720
768
736
768
640
752
752
656
704
704
624
736
736
672
656
720
720
688
672
688
736
704
736
656
720
736
704
736
720
736
688
672
800
736
784
736
752
672
672
656
768
752
672
704
784
656
736
704
656
704
736
736
736
720
672
736
624
768
688
656
784
672
736
752
656
688
768
752
672
672
752
672
656
720
784
736
720
672
688
640
800
656
800
720
672
704
752
672
736
720
752
752
704
736
688
736
704
736
656
736
688
656
736
688
640
704
688
720
704
704
704
720
768
800
704
736
656
736
768
656
784
704
640
704
672
736
688
720
736
656
752
688
704
640
736
704
768
704
736
656
704
720
704
736
752
736
688
736
720
736
768
704
768
640
688
720
720
768
704
800
688
688
752
704
704
752
720
672
656
688
752
800
656
704
768
736
656
736
672
768
752
656
672
736
736
656
688
720
720
688
784
704
704
688
736
736
768
752
752
768
720
736
672
752
752
704
736
736
720
752
752
672
640
736
752
752
720
720
720
672
672
672
656
688
720
768
736
704
720
656
688
656
656
704
688
736
752
720
752
656
704
720
752
688
688
784
688
752
656
704
736
720
624
784
736
672
672
704
736
720
768
672
672
736
688
768
736
736
720
656
720
736
704
752
672
752
656
800
704
704
704
720
656
640
720
656
640
656
720
720
752
768
672
704
672
736
704
704
736
720
736
704
752
720
768
704
656
720
752
672
720
816
752
784
656
704
720
736
736
704
672
752
688
704
752
784
720
640
656
752
752
704
736
672
704
736
736
640
704
656
736
752
656
704
656
768
640
672
752
736
672
656
688
656
672
720
672
720
704
672
720
832
768
736
640
736
720
688
720
752
768
720
704
672
704
704
672
752
704
736
720
752
704
752
752
736
736
752
736
752
768
784
720
752
704
672
688
672
752
656
688
672
688
672
656
752
736
736
656
768
736
736
720
720
688
752
720
736
720
752
720
672
688
688
704
768
736
720
720
752
736
624
672
736
736
704
656
704
752
688
752
752
784
656
736
672
752
720
672
704
784
752
752
736
736
720
768
768
656
768
672
752
736
720
720
752
752
720
736
704
768
768
720
704
672
800
656
768
800
736
736
720
736
688
736
688
704
704
784
704
640
688
720
640
640
752
704
768
752
672
656
688
720
736
704
688
688
656
720
736
704
720
752
784
768
720
672
768
688
784
720
784
768
640
736
736
752
656
720
752
752
736
752
784
752
736
752
688
704
624
672
768
640
800
768
720
736
688
720
784
720
768
656
768
736
672
672
672
752
720
656
720
672
736
720
768
768
640
736
688
720
736
736
704
656
704
752
720
672
688
752
736
736
720
704
736
784
784
720
752
672
608
720
736
672
752
704
736
720
656
720
672
768
768
736
720
736
720
688
656
720
688
688
704
736
720
704
736
752
720
688
656
704
640
720
736
720
768
720
800
656
800
624
784
640
720
672
768
688
768
640
656
752
816
720
704
656
800
752
752
720
656
800
736
672
816
768
736
720
640
688
672
720
688
752
688
624
800
736
656
752
736
800
640
672
816
736
688
656
672
640
752
720
704
736
720
640
784
672
736
752
752
752
656
656
784
800
656
784
736
688
800
736
672
704
752
656
752
784
736
640
736
720
704
640
672
704
736
768
656
752
704
656
784
720
752
656
720
736
752
768
768
768
736
752
736
752
736
656
736
688
688
656
672
768
720
640
800
672
688
720
752
704
752
704
656
784
704
608
720
672
656
640
688
752
720
752
672
688
640
752
736
736
784
624
736
720
704
720
656
688
736
768
704
768
704
752
608
816
768
752
752
768
656
624
672
752
672
752
656
688
688
752
672
736
720
768
768
656
688
752
736
768
656
768
672
688
688
720
784
704
720
656
752
720
736
624
720
752
640
656
752
752
688
752
672
768
672
768
736
656
624
752
720
768
688
640
768
672
768
768
736
768
784
752
768
752
752
656
768
768
816
768
704
704
672
768
752
704
656
752
736
608
752
656
768
736
704
688
656
688
720
704
768
720
656
736
656
688
656
768
736
720
720
752
720
640
768
656
752
768
736
672
720
720
704
640
736
704
656
720
688
672
768
688
736
672
720
752
752
752
736
704
656
720
720
768
656
704
720
672
752
768
720
704
816
720
656
800
656
624
688
736
704
736
768
624
752
720
640
704
704
800
672
704
736
688
736
752
656
656
736
736
672
688
720
736
672
720
720
752
704
672
720
736
688
720
688
736
672
640
736
720
720
736
704
736
704
656
736
720
672
704
672
688
672
736
624
784
784
640
784
672
720
736
768
688
752
768
672
768
688
768
672
784
656
784
736
784
704
736
624
688
624
752
704
720
688
640
704
736
704
704
720
736
640
640
640
736
752
656
656
752
800
688
752
688
704
720
704
688
672
736
688
704
672
752
720
784
688
752
800
768
784
688
672
736
672
784
704
752
720
704
784
640
736
784
720
688
736
704
736
736
688
768
816
768
720
768
656
720
672
736
784
720
752
704
672
736
704
784
720
736
752
736
656
720
720
624
688
656
736
784
768
752
752
752
736
720
656
720
768
736
720
784
752
640
736
784
672
672
752
720
704
784
704
736
688
688
704
752
704
752
800
720
720
688
656
800
688
736
768
704
752
688
736
736
736
720
800
688
704
672
736
720
672
720
752
720
720
736
720
704
672
640
704
720
768
720
672
672
720
704
656
656
688
656
736
736
720
624
720
784
656
688
720
656
832
656
656
768
720
688
736
720
784
720
816
768
736
656
656
736
768
720
672
640
768
704
672
688
688
720
704
720
688
736
720
704
720
784
656
704
704
752
704
704
720
752
736
736
752
656
704
672
720
752
768
672
720
704
656
656
720
768
640
736
704
704
752
704
720
784
656
752
688
752
768
752
688
720
768
672
752
736
784
672
672
768
736
688
704
688
736
720
752
704
816
720
704
736
816
704
736
720
720
672
688
688
704
736
688
656
800
720
688
656
672
672
720
672
736
688
720
656
672
784
752
Traceback (most recent call last):
  File "code.py", line 216, in <module>
KeyboardInterrupt: 

Press any key to enter the REPL. Use CTRL-D to reload.
Adafruit CircuitPython 6.0.0-rc.2 on 2020-11-12; Teensy 4.1 with IMXRT1062DVJ6A
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== class SlotsTest:
=== 	__slots__=['a','b']
=== 	def __init__(self):
=== 		self.a=1234
>>> s[KSlotsTest()
<SlotsTest object at 20209ad0>
>>> s=)
Traceback (most recent call last):
  File "<stdin>", line 1
SyntaxError: invalid syntax
>>> s=_
>>> s
<SlotsTest object at 202efdc0>
>>> s.a[Ke=3
>>> a.a[K[K[Ks.a=
Traceback (most recent call last):
  File "<stdin>", line 2
SyntaxError: invalid syntax
>>> 
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== class SlotsTest:
=== 	__slots__='a','b'
=== 	def __init__(self):
=== 		self.a=1234
=== 
>>> S[Ks=Skits[K[K[K[K[K[K[K
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== class SlotsTest:
=== 	__slots__='a','b'
=== 	def __init__(self):
=== 		self.a=1234
=== s=SlotsTest()
=== s.a=23
=== s.weoi=23
>>> 
>>> 
>>> import fc
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'fc'
>>> import gc
>>> gc.mem_free()
941792
>>> d={1:3,[K[K2[K[K[K}
>>> d={}gc.mem_free()
941584
>>> d[[K[Kgc.mem_free()
941504
>>> gc.mem_free()
941424
>>> gc.mem_free()
941344
>>> gc.mem_free()
941264
>>> gc.mem_free()
941184
>>> gc.mem_free()
941104
>>> gc.mem_free()
941024
>>> gc.mem_free()
940944
>>> gc.mem_free()
940864
>>> gc.mem_free()
940784
>>> gc.mem_free()
940704
>>> gc.mem_free()
940624
>>> gc.mem_free()
940544
>>> gc.mem_free()
940464
>>> gc.mem_free()
940384
>>> gc.mem_free()
940304
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
942784
942784
942784
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
PART 1: Should be same
942320
942320
942320
PART 2: Should decrease linearly
942320
942288
942272
942240
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 2: Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== 
PART 1: Should be same
942032
942032
942032
PART 2: Should decrease linearly
942032
942016
942000
941984
PART 2: Should stay the same
941984
941984
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 2: Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
PART 1: Should be same
941952
941952
941952
PART 2: Should decrease linearly
941952
941936
941920
941904
PART 2: Should stay the same
941904
941904
941904
941904
>>> 2:[K[Kf:=2
Traceback (most recent call last):
  File "<stdin>", line 1
SyntaxError: invalid syntax
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== prev_mem=gc.mem_free()
=== mem     =gc.mem_free()
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return mem-prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
PART 1: Doing nothing; Should be same
941216
941216
941216
PART 2: Assigning different ints to same vairable; Should stay the same
941216
941216
941216
941216
PART 3: Testing mem difference function; Should stay the same
-32
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
941184
941168
941152
941136
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem     =0
=== prev_mem=0
=== mem=prev_mem=gc.mem_free()
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return mem-prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
PART 1: Doing nothing; Should be same
941120
941120
941120
PART 2: Assigning different ints to same vairable; Should stay the same
941120
941120
941120
941120
PART 3: Testing mem difference function; Should stay the same
-16
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
941104
941088
941072
941056
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return mem-prev_mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
PART 1: Doing nothing; Should be same
941088
941088
941088
PART 2: Assigning different ints to same vairable; Should stay the same
941088
941088
941088
941088
941072
PART 3: Testing mem difference function; Should stay the same
0
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
941072
941056
941040
941024
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return mem-prev_mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(get_memdiff())
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
940736
940736
940736
PART 2: Assigning different ints to same vairable; Should stay the same
940736
940736
940736
940736
940720
PART 3: Testing mem difference function; Should stay the same at 0
0
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
940720
940704
940688
940672
PART 4: Creating empty dicts; Should decrease linearly
-48
-16
-16
-16
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== get_memdiff()#Initialize mem and prev_mem
=== print(get_memdiff())
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
940688
940688
940688
PART 2: Assigning different ints to same vairable; Should stay the same
940688
940688
940688
940688
-940672
PART 3: Testing mem difference function; Should stay the same at 0
0
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
940672
940656
940640
940624
PART 4: Creating empty dicts; Should decrease linearly
48
0
16
16
16
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== get_memdiff();#Initialize mem and prev_mem
=== print(get_memdiff())
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
940688
940688
940688
PART 2: Assigning different ints to same vairable; Should stay the same
940688
940688
940688
940688
-940672
PART 3: Testing mem difference function; Should stay the same at 0
0
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
940672
940656
940640
940624
PART 4: Creating empty dicts; Should decrease linearly
48
0
16
16
16
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Should decrease linearly")
=== # get_memdiff();#Initialize mem and prev_mem
=== # print(get_memdiff())
=== a={}
=== # print(get_memdiff())
=== b={}
=== # print(get_memdiff())
=== c={}
=== # print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
940752
940752
940752
PART 2: Assigning different ints to same vairable; Should stay the same
940752
940752
940752
940752
-940736
PART 3: Testing mem difference function; Should stay the same at 0
0
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
940736
940720
940704
940688
PART 5: Creating empty dicts; Should decrease linearly
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Should decrease linearly")
=== # get_memdiff();#Initialize mem and prev_mem
=== print(get_memdiff())
=== a={}
=== # print(get_memdiff())
=== b={}
=== # print(get_memdiff())
=== c={}
=== # print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
940736
940736
940736
PART 2: Assigning different ints to same vairable; Should stay the same
940736
940736
940736
940736
-940720
PART 3: Testing mem difference function; Should stay the same at 0
0
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
940720
940704
940688
940672
PART 5: Creating empty dicts; Should decrease linearly
48
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Should decrease linearly")
=== # get_memdiff();#Initialize mem and prev_mem
=== print(get_memdiff())
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
940688
940688
940688
PART 2: Assigning different ints to same vairable; Should stay the same
940688
940688
940688
940688
-940672
PART 3: Testing mem difference function; Should stay the same at 0
0
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
940672
940656
940640
940624
PART 5: Creating empty dicts; Should decrease linearly
48
16
16
16
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Should decrease linearly")
=== # get_memdiff();#Initialize mem and prev_mem
=== print(get_memdiff())
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
940688
940688
940688
PART 2: Assigning different ints to same vairable; Should stay the same
940688
940688
940688
940688
-940672
PART 3: Testing mem difference function; Should stay the same at 0
0
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
940672
940656
940640
940624
PART 5: Creating empty dicts; Should decrease linearly
48
16
16
16
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Should decrease linearly")
=== get_memdiff();#Initialize mem and prev_mem
=== print(get_memdiff())
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
940672
940672
940672
PART 2: Assigning different ints to same vairable; Should stay the same
940672
940672
940672
940672
-940656
PART 3: Testing mem difference function; Should stay the same at 0
0
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
940656
940640
940624
940608
PART 5: Creating empty dicts; Should decrease linearly
48
0
16
16
16
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Should decrease linearly")
=== _get_memdiff();#Initialize mem and prev_mem
=== print(get_memdiff())
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
940672
940672
940672
PART 2: Assigning different ints to same vairable; Should stay the same
940672
940672
940672
940672
-940656
PART 3: Testing mem difference function; Should stay the same at 0
0
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
940656
940640
940624
940608
PART 5: Creating empty dicts; Should decrease linearly
Traceback (most recent call last):
  File "<stdin>", line 44, in <module>
NameError: name '_get_memdiff' is not defined
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Should decrease linearly")
=== _=get_memdiff();#Initialize mem and prev_mem
=== print(get_memdiff())
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
940672
940672
940672
PART 2: Assigning different ints to same vairable; Should stay the same
940672
940672
940672
940672
-940656
PART 3: Testing mem difference function; Should stay the same at 0
0
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
940656
940640
940624
940608
PART 5: Creating empty dicts; Should decrease linearly
48
16
16
16
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== v
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'v' is not defined
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Should decrease linearly")
=== _=get_memdiff();#Initialize mem and prev_mem
=== _=get_memdiff();#Initialize mem and prev_mem
=== print(get_memdiff())
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
940592
940592
940592
PART 2: Assigning different ints to same vairable; Should stay the same
940592
940592
940592
940592
-940576
PART 3: Testing mem difference function; Should stay the same at 0
0
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
940576
940560
940544
940528
PART 5: Creating empty dicts; Should decrease linearly
0
16
16
16
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Should decrease linearly")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
940608
940608
940608
PART 2: Assigning different ints to same vairable; Should stay the same
940608
940608
940608
940608
-940592
PART 3: Testing mem difference function; Should stay the same at 0
0
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
940592
940576
940560
940544
PART 5: Creating empty dicts; Should decrease linearly
16
16
16
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16)")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
=== print("PART 5: Creating empty dicts; Should decrease linearly")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
940288
940288
940288
PART 2: Assigning different ints to same vairable; Should stay the same
940288
940288
940288
940288
-940272
PART 3: Testing mem difference function; Should stay the same at 0
0
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
940272
940256
940240
940224
PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16)
16
16
16
PART 5: Creating empty dicts; Should decrease linearly
16
16
16
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
=== print("PART 5: Creating empty dicts; Should decrease linearly")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
940240
940240
940240
PART 2: Assigning different ints to same vairable; Should stay the same
940240
940240
940240
940240
-940224
PART 3: Testing mem difference function; Should stay the same at 0
0
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
940224
940208
940192
940176
PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)
16
16
16
PART 5: Creating empty dicts; Should decrease linearly
16
16
16
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== vimport gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
=== print("PART 5: Creating empty dicts; displaying mem diffs")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
=== print("PART 6: Creating new ints; displaying mem diffs")
=== _=get_memdiff();#Initialize mem and prev_mem
=== int_A=1
=== print(get_memdiff())
=== int_B=2
=== print(get_memdiff())
=== int_C=3
=== print(get_memdiff())
=== 
Traceback (most recent call last):
  File "<stdin>", line 1
SyntaxError: invalid syntax
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
=== print("PART 5: Creating empty dicts; displaying mem diffs")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
=== print("PART 6: Creating new ints; displaying mem diffs")
=== _=get_memdiff();#Initialize mem and prev_mem
=== int_A=1
=== print(get_memdiff())
=== int_B=2
=== print(get_memdiff())
=== int_C=3
=== print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
939760
939760
939760
PART 2: Assigning different ints to same vairable; Should stay the same
939760
939760
939760
939760
-939744
PART 3: Testing mem difference function; Should stay the same at 0
0
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
939744
939728
939712
939696
PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)
16
16
16
PART 5: Creating empty dicts; displaying mem diffs
16
16
16
PART 6: Creating new ints; displaying mem diffs
0
0
0
>>> 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
400
688
704
720
720
720
720
704
752
752
768
736
720
704
768
688
720
768
736
704
736
704
752
704
720
720
736
704
704
752
704
752
736
752
736
784
704
736
752
800
704
752
784
736
736
736
768
752
736
736
720
720
720
752
784
720
720
704
720
720
688
752
736
832
752
720
704
720
736
704
752
736
784
720
736
752
720
720
704
736
736
736
752
768
800
688
704
720
704
720
736
704
752
752
704
768
720
720
704
736
752
704
736
752
752
704
704
736
736
720
720
800
752
736
736
736
704
736
720
736
752
736
752
720
752
688
720
704
720
736
704
736
720
784
736
736
736
816
720
720
656
784
736
800
752
768
720
688
736
720
784
736
768
736
720
720
736
752
720
736
752
720
704
688
736
720
784
736
752
736
720
720
704
736
704
672
704
720
752
720
720
784
736
752
720
768
720
768
752
704
784
720
720
720
800
736
736
720
704
704
688
720
784
720
784
688
784
736
720
720
736
736
736
736
720
704
720
720
768
688
736
736
736
720
736
784
720
736
688
720
720
704
704
704
736
736
736
688
720
720
688
736
752
720
688
704
736
688
704
736
800
720
736
736
720
720
752
736
736
720
720
720
720
720
720
704
736
720
752
720
768
736
720
720
752
752
736
704
720
736
704
784
720
688
704
720
720
720
736
752
720
720
736
688
736
704
704
704
736
736
720
720
768
704
688
672
720
720
752
736
752
704
736
736
704
704
752
720
720
704
704
736
752
704
736
784
752
720
720
752
752
720
704
736
688
736
784
720
784
704
736
720
816
704
720
736
768
704
704
704
688
736
720
768
720
736
752
736
736
688
752
688
704
784
720
720
704
704
672
720
736
704
688
720
688
736
704
704
704
704
704
752
736
720
720
800
720
704
720
688
720
736
704
688
720
704
704
752
800
720
736
752
720
752
736
704
736
752
736
704
720
720
736
736
752
720
720
768
672
752
736
720
720
800
704
720
752
688
704
704
736
752
736
752
736
800
720
752
720
720
704
736
720
704
720
704
720
704
736
720
704
720
720
704
752
704
736
704
704
736
720
752
704
720
752
720
672
704
720
736
752
720
720
736
720
720
784
704
720
704
720
704
736
704
736
720
736
736
752
704
720
720
720
720
768
720
720
704
736
688
704
736
720
736
736
736
720
720
704
752
704
752
720
800
704
736
768
704
720
720
736
752
736
768
688
752
720
720
704
688
736
736
784
752
768
752
752
752
736
816
704
752
736
736
720
752
736
800
704
752
752
736
752
720
768
752
720
672
704
752
736
736
704
720
736
688
736
720
720
688
752
704
688
720
704
720
720
720
784
736
752
720
720
752
800
704
752
800
768
720
720
736
704
800
704
736
720
752
736
720
688
704
688
736
704
704
704
736
736
736
720
768
720
720
704
720
752
720
720
752
720
736
720
752
736
720
704
720
752
704
720
704
720
736
720
704
704
720
720
720
752
704
704
704
784
704
720
704
752
704
688
704
720
720
720
736
736
752
704
752
704
704
736
688
720
720
704
720
720
720
736
720
752
736
720
736
736
688
720
720
704
704
704
736
720
720
736
736
784
720
704
736
752
784
784
688
784
752
768
704
720
704
736
704
736
720
720
704
736
720
736
720
720
736
704
720
736
768
704
736
720
704
720
736
704
720
736
720
720
768
704
752
720
800
752
704
720
720
704
720
736
704
704
752
736
752
800
768
720
704
736
752
736
688
800
704
736
720
736
752
720
688
736
720
736
736
688
736
736
704
768
720
736
720
720
736
720
704
736
720
704
736
736
736
720
736
720
704
784
736
720
720
704
768
688
704
736
736
720
720
736
704
704
720
704
720
736
752
768
736
704
768
800
704
720
768
720
704
720
720
752
736
672
688
720
720
720
720
736
736
736
752
752
720
720
704
704
752
720
736
688
720
720
720
704
720
704
736
736
704
800
688
752
736
720
752
704
768
800
688
768
704
736
688
784
720
736
704
720
736
752
720
704
736
752
768
704
752
736
720
720
736
704
736
704
736
736
736
704
736
720
784
672
704
752
720
704
704
784
688
720
720
736
704
720
720
720
752
704
720
736
704
720
752
704
784
704
704
720
688
704
752
800
720
720
720
720
704
752
704
784
752
736
720
720
784
720
688
736
752
752
704
720
768
736
736
768
720
704
720
784
736
720
768
736
704
752
720
736
720
736
720
720
768
720
688
720
736
736
720
720
800
720
720
736
752
736
800
720
704
704
736
704
720
736
704
704
720
768
752
720
688
752
736
736
720
736
704
752
704
720
768
720
688
720
736
784
720
768
720
720
736
752
720
768
736
704
720
704
720
736
736
752
720
736
752
736
752
720
736
784
736
688
752
720
704
736
720
704
736
704
736
704
720
704
720
672
704
704
688
736
688
704
720
720
704
704
752
752
736
720
688
688
768
704
704
720
704
736
688
720
752
720
704
752
704
704
736
720
704
688
720
720
736
720
736
752
736
720
704
720
688
704
704
768
704
704
720
784
752
784
688
704
816
752
704
768
736
816
704
736
720
768
688
704
752
752
704
704
752
704
688
704
704
704
704
736
736
720
688
720
704
736
704
704
704
704
720
816
736
752
704
736
720
736
752
720
800
720
736
704
720
768
784
720
768
784
704
736
720
736
752
736
752
768
720
704
688
736
704
736
720
720
720
752
752
720
720
752
752
736
720
704
768
720
720
704
704
704
736
720
736
704
752
720
752
720
704
704
736
672
768
720
704
736
704
704
736
704
720
720
720
704
704
720
704
720
752
816
720
752
752
752
752
704
768
720
736
720
720
800
704
752
720
736
704
720
704
704
720
720
736
704
704
720
736
720
736
704
704
720
704
720
736
720
784
704
704
752
784
704
704
688
704
736
736
784
704
720
720
720
736
704
720
688
736
752
736
736
768
704
704
688
704
720
720
784
736
704
752
736
704
720
688
704
736
752
736
704
736
720
720
688
704
736
704
720
704
752
736
720
752
720
720
704
784
736
720
688
784
720
736
736
736
784
704
704
752
720
704
736
704
720
720
688
720
768
688
720
704
720
720
704
688
720
720
736
720
720
720
688
704
704
720
720
672
688
720
720
736
704
704
784
720
704
736
736
800
720
736
704
784
704
736
752
768
720
720
736
688
752
736
704
752
720
768
704
752
720
736
768
784
720
704
736
736
736
704
704
704
720
720
736
704
720
736
704
816
720
704
720
720
752
720
720
800
720
736
720
720
720
720
704
704
720
720
736
720
768
688
736
768
704
752
736
688
720
800
736
720
752
736
720
736
736
720
736
736
752
720
704
736
704
736
720
720
736
768
736
768
720
736
784
704
720
704
784
720
768
704
720
720
720
688
704
704
752
704
688
720
736
736
704
688
736
736
736
752
704
736
704
720
704
736
704
720
736
752
704
736
704
720
720
704
736
736
720
704
720
720
720
720
736
752
752
736
704
720
752
736
768
752
752
720
720
720
752
704
816
704
736
704
784
720
720
704
688
768
752
752
736
784
736
720
736
688
720
720
704
688
752
720
720
720
704
672
672
720
752
720
736
768
752
736
736
736
736
704
720
704
736
720
752
720
736
736
736
720
720
752
768
768
704
704
720
720
720
736
752
752
688
752
736
704
736
720
768
752
704
704
736
736
704
704
720
752
704
736
720
688
688
688
720
704
704
704
736
752
688
752
720
704
688
784
736
736
784
704
704
784
720
704
720
688
720
736
704
784
720
720
704
752
752
704
736
720
704
704
704
752
768
736
704
720
736
704
720
736
704
752
720
736
736
720
768
736
736
752
720
720
752
720
704
720
768
720
704
736
704
720
768
752
736
704
720
704
688
720
704
720
704
752
736
688
736
768
752
768
736
784
736
768
752
704
736
704
704
768
704
704
704
736
704
736
720
736
752
704
720
752
736
736
736
704
752
768
720
704
736
720
768
704
704
720
672
704
736
704
704
752
816
688
720
768
736
752
736
704
752
736
784
688
704
672
752
736
704
720
752
720
704
720
752
704
752
720
704
720
736
720
736
720
720
688
704
688
768
704
784
688
704
752
720
688
704
720
720
704
688
720
704
736
720
720
736
720
752
720
720
768
816
720
736
752
720
720
800
736
704
784
736
800
688
688
720
768
720
720
720
784
720
704
720
768
768
672
688
704
688
704
736
736
704
704
736
704
720
704
736
720
736
720
752
752
704
704
736
704
736
768
704
720
720
688
720
768
736
736
752
720
800
736
768
736
720
704
736
768
736
784
720
704
736
720
736
720
752
752
736
816
688
736
752
800
736
752
752
736
688
720
752
752
736
704
784
720
720
720
736
736
736
720
736
688
720
736
752
720
688
768
704
720
816
704
704
736
688
704
720
704
736
704
720
736
720
752
672
736
800
720
720
768
688
736
752
704
720
704
768
720
720
736
736
736
704
720
768
720
720
736
704
768
752
704
720
720
752
688
720
704
736
688
704
768
768
704
720
736
768
704
704
736
704
736
704
736
736
720
720
720
720
752
736
752
704
768
704
752
704
704
720
704
720
736
704
736
720
720
720
704
800
768
704
704
736
704
704
704
704
720
720
704
704
736
688
688
704
720
704
704
752
720
752
784
768
752
704
720
720
720
704
784
672
688
736
704
672
800
688
688
720
720
720
720
720
688
688
752
736
752
704
752
704
688
704
720
752
720
736
752
704
736
752
704
704
720
704
704
720
720
704
800
720
768
704
752
736
800
704
768
736
720
720
720
736
688
720
736
704
752
704
768
720
736
720
704
720
704
752
688
720
720
704
720
704
704
704
704
736
768
704
704
704
704
688
720
752
752
704
768
720
768
720
688
768
768
704
784
688
736
752
704
736
768
720
720
720
736
736
720
720
752
768
720
736
800
720
736
720
736
800
704
752
672
704
704
704
704
736
752
752
800
720
720
704
720
752
736
704
688
720
720
688
704
752
736
704
688
720
736
720
704
736
720
704
736
784
720
720
720
752
752
720
736
768
768
736
752
800
688
752
720
720
720
704
736
752
736
768
720
720
736
752
736
736
688
688
816
720
784
720
704
704
720
720
688
752
736
720
704
704
720
720
688
720
736
752
768
720
768
720
704
704
704
720
704
704
768
704
752
688
752
688
784
704
688
720
736
704
720
720
688
704
688
800
688
704
688
736
720
704
720
752
704
736
720
784
704
704
720
720
720
752
720
688
720
736
736
704
752
704
752
736
736
704
720
688
704
752
720
720
704
752
704
688
720
704
720
736
720
704
672
688
720
720
720
688
688
720
704
752
704
656
752
672
752
736
752
704
768
720
752
672
736
688
736
720
784
688
704
736
800
736
720
752
736
736
672
720
736
768
720
704
736
720
720
704
768
688
720
736
768
736
816
736
768
752
736
720
736
752
720
768
672
704
704
720
736
704
752
704
704
736
720
672
720
784
704
720
736
736
736
704
720
736
704
752
704
784
720
752
736
736
704
720
688
784
688
752
704
704
720
704
800
720
736
720
736
688
736
768
784
704
704
752
736
704
736
768
688
720
736
704
720
704
736
752
704
736
720
720
672
736
704
720
720
704
720
704
720
768
704
688
688
720
704
704
688
704
688
704
720
720
720
720
720
704
768
704
752
784
720
736
720
736
752
752
752
704
736
720
720
784
736
720
736
704
704
752
720
704
720
736
720
704
704
704
736
768
736
736
816
704
720
704
720
752
720
720
720
720
720
688
752
704
688
704
688
704
736
704
704
704
704
704
688
688
704
720
688
704
704
752
720
704
736
720
752
752
704
720
736
720
704
752
704
752
768
688
720
784
688
704
704
720
736
704
720
736
752
720
704
752
736
704
784
704
720
720
704
720
720
720
704
704
720
752
800
720
688
736
736
704
736
736
736
752
704
688
784
720
688
736
752
736
704
704
800
704
720
672
752
704
704
688
720
704
752
704
736
688
768
688
704
752
752
720
720
768
688
768
720
736
704
784
704
752
736
720
720
720
688
688
752
768
720
720
768
736
704
704
688
704
688
752
704
736
672
720
720
736
720
752
736
752
704
720
704
704
704
672
720
688
752
800
752
704
656
720
768
672
704
752
672
688
752
656
704
736
720
768
736
736
736
768
736
768
672
784
720
736
800
720
688
720
704
704
704
672
720
816
720
672
720
736
688
704
720
704
704
720
704
688
704
688
720
768
704
736
672
736
720
736
704
720
752
704
752
752
704
752
768
768
688
784
704
736
688
704
720
720
736
768
720
736
704
704
752
752
720
736
720
752
704
704
768
736
720
720
672
752
720
736
736
672
688
720
720
704
704
768
752
720
720
768
736
720
736
704
720
720
800
688
704
672
672
720
768
704
768
800
720
720
672
688
720
768
720
720
736
768
720
768
752
736
656
720
720
672
720
752
736
720
704
704
736
720
768
688
720
720
768
768
752
736
688
720
752
688
704
736
784
688
768
688
720
704
720
768
720
672
768
736
704
688
688
720
688
736
768
688
784
672
736
752
688
688
720
672
704
752
688
688
768
704
784
704
720
704
688
656
704
672
768
720
768
768
736
720
720
704
720
704
768
720
816
704
752
720
736
688
752
736
768
720
736
736
720
768
736
736
704
736
752
672
736
752
736
736
720
704
704
688
688
704
752
688
704
656
656
704
688
720
704
752
720
704
672
688
720
768
656
752
640
704
736
688
672
768
720
736
672
736
768
752
656
736
768
752
704
720
768
656
688
736
752
656
784
720
800
720
736
736
736
720
768
688
736
752
752
656
784
688
688
752
720
736
736
640
752
768
704
704
672
720
688
688
736
688
736
720
672
752
784
736
704
720
688
768
816
736
704
752
704
640
688
736
800
720
672
704
720
736
704
720
688
768
752
768
672
736
688
688
752
736
736
704
656
688
704
736
704
752
752
688
736
752
704
752
768
736
752
688
704
672
752
720
688
704
688
704
784
656
720
784
688
720
704
704
800
672
752
720
720
672
720
704
752
672
720
800
720
720
720
768
752
736
720
736
800
752
768
768
704
752
752
672
736
848
672
672
752
752
720
720
720
752
720
704
752
752
704
720
704
720
688
688
736
720
736
736
704
768
704
720
736
752
720
688
752
768
704
720
704
720
672
704
704
784
672
720
720
768
704
704
768
768
752
720
656
768
704
688
704
704
720
736
720
768
720
736
688
736
704
720
720
736
704
688
704
800
688
736
656
752
656
752
768
704
672
720
720
704
672
752
720
736
688
704
720
752
736
688
752
656
720
720
736
720
704
736
704
784
672
784
672
736
688
704
704
720
736
736
704
704
736
704
720
752
704
752
720
688
672
768
752
736
752
752
784
736
800
688
752
736
720
800
704
736
720
720
768
704
720
704
752
752
704
720
736
720
704
752
656
704
720
720
720
720
704
736
784
704
720
672
720
720
720
720
672
736
720
704
768
784
704
736
688
704
704
720
720
688
704
704
736
736
784
704
752
736
688
736
736
688
704
704
704
736
704
720
736
720
784
704
784
736
752
752
752
736
736
720
704
752
720
752
752
752
752
800
720
720
704
736
672
736
704
720
720
704
720
704
704
720
736
704
752
736
688
672
752
704
704
720
752
800
720
688
736
720
720
704
720
768
704
720
736
752
736
768
768
656
752
720
720
720
720
704
768
816
736
752
704
784
688
704
720
736
768
720
688
720
656
672
736
736
752
704
656
704
704
704
704
672
704
752
720
672
720
752
720
720
768
688
704
720
720
688
752
720
736
720
736
752
704
736
784
752
768
720
720
768
672
720
720
784
736
736
704
688
720
672
720
752
768
704
736
752
736
736
784
752
688
672
768
704
752
752
736
752
704
752
784
704
720
720
704
736
688
752
688
704
752
704
720
752
768
736
768
688
768
752
720
736
720
704
720
736
704
736
704
784
704
704
768
688
672
736
720
720
784
720
752
704
752
752
720
720
720
720
736
672
704
752
736
752
720
784
704
720
656
720
720
704
720
736
736
720
704
768
672
768
720
704
720
752
752
768
720
688
720
736
704
688
704
720
736
752
704
688
768
752
752
704
704
768
720
768
704
736
720
768
752
752
704
672
736
752
720
736
672
736
752
704
720
752
704
720
720
688
672
704
704
688
720
624
704
720
720
752
720
672
736
688
688
672
704
768
688
736
704
720
736
736
784
704
768
672
752
672
736
768
768
736
736
752
672
704
736
752
720
656
688
720
720
720
736
736
720
752
720
704
736
768
720
720
752
656
704
752
784
816
768
688
752
768
784
688
688
688
720
768
656
640
800
704
736
704
736
752
720
736
752
704
736
720
704
784
768
656
672
720
752
768
688
752
688
736
736
752
720
752
672
784
784
656
704
736
752
704
784
672
736
736
736
752
752
720
672
768
720
704
720
704
672
688
672
720
704
656
768
720
736
704
672
720
800
736
784
704
720
704
672
768
704
784
736
736
736
752
736
816
752
752
720
704
688
736
720
768
768
768
800
752
704
688
736
704
752
704
784
768
688
768
736
688
720
720
736
656
720
704
720
688
704
688
720
736
704
672
752
752
736
720
736
720
704
720
736
752
720
704
704
704
720
720
672
720
704
736
720
752
688
768
672
784
736
784
752
752
736
720
736
736
720
784
768
704
736
752
688
688
720
752
656
768
720
688
688
736
768
736
704
752
720
736
688
768
736
736
704
720
720
752
704
704
704
704
736
752
720
704
704
752
704
720
752
688
784
736
688
720
736
688
720
704
704
704
688
720
688
688
704
704
752
720
720
752
752
752
720
784
736
736
736
736
720
752
736
672
704
720
704
656
752
736
720
800
720
720
736
784
704
656
720
768
704
752
752
704
752
736
800
672
688
800
640
768
656
784
720
800
672
720
736
736
704
784
720
736
720
704
704
704
672
736
736
704
688
688
736
752
656
672
752
752
784
688
672
768
704
704
736
768
736
736
752
656
736
720
656
736
688
704
736
752
688
752
752
736
768
720
784
736
736
720
720
704
720
720
704
720
736
736
688
704
688
720
720
736
736
736
704
752
704
736
736
688
720
752
784
736
688
736
720
720
688
720
704
736
736
736
736
688
720
720
752
704
768
752
688
688
784
720
736
736
704
736
720
752
704
704
736
688
768
720
736
720
736
736
704
736
688
688
736
704
720
704
704
736
688
688
720
688
704
720
688
672
736
672
704
688
672
736
768
720
720
720
672
752
688
720
704
672
736
736
720
704
704
704
688
720
800
704
720
704
704
688
720
720
752
768
720
768
768
736
736
752
720
720
704
640
656
736
736
720
752
736
672
720
704
704
720
752
688
704
720
688
704
672
656
656
720
736
640
752
736
768
688
656
752
688
704
656
704
736
656
784
752
656
768
736
736
736
720
672
672
720
720
784
656
688
736
768
656
720
704
704
768
656
736
768
720
720
688
736
688
768
720
720
752
736
752
688
688
656
720
688
736
736
656
736
688
704
704
720
688
736
688
704
720
736
736
720
656
768
736
768
736
704
752
752
736
720
768
800
688
768
720
720
720
704
768
752
784
656
688
720
752
736
720
720
752
720
704
736
768
736
704
768
736
656
800
736
736
752
704
720
736
768
752
672
768
688
720
752
736
704
688
720
704
752
720
688
688
704
736
704
752
704
720
688
736
736
704
784
688
720
688
720
704
688
704
736
736
688
704
752
720
720
704
752
720
736
720
720
736
704
704
736
720
720
736
768
720
720
800
720
752
704
720
752
736
752
752
736
768
736
768
720
752
752
720
752
688
736
688
816
720
768
768
736
672
784
672
736
720
768
736
736
672
704
736
672
704
688
656
704
768
704
800
736
720
768
704
720
688
768
720
736
720
720
672
720
736
672
688
752
720
736
752
736
752
800
704
752
640
736
720
736
704
768
704
752
720
688
672
752
768
784
640
768
672
720
736
784
736
688
736
688
688
752
688
720
720
768
704
816
736
704
816
704
704
688
672
784
688
656
752
736
736
704
704
704
688
752
720
768
704
720
704
736
720
720
688
784
752
720
736
736
704
752
752
752
752
704
720
816
736
720
768
720
768
752
736
736
720
672
784
752
640
736
704
752
784
656
784
688
736
672
752
704
688
720
688
672
688
688
768
720
768
720
736
656
736
672
720
688
768
720
752
752
704
688
720
688
736
704
752
672
688
752
752
800
688
720
704
752
704
672
704
752
672
672
720
656
768
720
704
688
656
720
784
672
736
800
736
752
768
704
736
752
704
736
736
672
688
736
752
736
736
720
736
752
672
688
736
704
704
704
720
656
800
736
752
752
784
688
720
688
784
720
656
800
736
784
784
704
784
704
784
720
688
768
784
704
656
736
704
688
720
736
752
752
720
688
672
704
768
736
736
704
720
704
736
736
736
784
640
704
720
736
736
720
800
688
752
768
800
688
672
624
656
704
736
688
768
672
800
704
800
752
784
672
800
736
736
736
736
816
752
736
784
768
768
736
768
688
704
672
704
720
656
784
720
704
704
784
736
768
768
784
784
832
672
768
640
704
736
672
704
736
768
736
768
688
768
672
768
736
736
768
736
736
656
688
656
656
752
720
720
640
656
688
720
736
736
656
736
752
768
752
672
752
752
704
704
752
672
720
736
768
784
736
752
720
704
784
752
720
784
656
656
704
736
768
784
704
800
720
736
736
784
720
768
656
784
672
688
688
736
736
736
720
720
720
736
736
736
736
672
752
656
736
704
640
736
640
752
720
672
688
704
656
672
768
720
704
704
768
736
688
736
688
768
656
768
672
656
768
688
816
752
768
688
688
752
656
672
736
704
752
736
656
736
784
640
688
768
688
752
752
704
640
768
720
800
736
768
752
720
736
720
704
656
672
736
736
640
752
736
736
704
736
752
704
656
736
704
752
736
752
656
736
656
640
784
768
640
688
736
672
688
720
720
672
752
784
656
768
752
672
720
688
736
752
768
688
720
704
720
768
656
864
672
768
656
784
752
688
656
704
704
720
672
656
720
736
752
736
752
656
768
688
752
752
784
704
656
720
704
704
672
688
736
704
752
736
736
688
768
640
752
768
752
720
752
688
736
688
768
752
672
688
736
720
720
752
736
752
736
752
784
784
752
640
736
704
688
784
688
816
720
688
688
736
768
704
720
784
736
768
736
720
704
720
736
736
672
768
688
720
736
720
768
736
720
704
736
704
704
736
736
720
672
704
752
720
688
672
704
704
752
752
704
720
672
784
720
688
768
720
736
768
672
736
768
704
704
784
752
752
704
752
752
704
752
720
688
736
736
656
752
720
688
672
720
736
688
768
704
736
720
672
752
752
752
736
688
736
736
704
720
736
656
656
736
656
688
736
720
720
688
736
736
720
672
784
704
736
736
752
800
736
736
736
720
720
752
784
752
752
736
720
784
656
688
704
704
704
720
720
704
704
704
704
736
720
656
688
704
752
672
768
720
720
720
720
736
752
720
784
752
720
736
736
816
784
704
736
752
720
736
736
752
736
704
720
736
704
752
688
752
736
720
752
720
720
752
736
704
704
720
672
720
672
640
656
736
736
656
752
672
688
672
688
784
752
768
704
720
736
736
736
688
752
752
784
720
752
688
672
736
784
720
736
720
752
656
752
720
736
736
688
800
752
720
768
704
752
688
768
784
752
768
752
768
640
768
640
752
720
656
736
704
736
752
768
784
816
736
688
736
768
736
640
736
704
784
752
768
784
720
736
784
720
752
752
768
704
672
720
704
672
672
656
752
688
720
720
672
752
720
720
800
736
688
672
672
656
800
736
736
816
720
736
640
736
736
656
736
688
720
784
688
704
720
752
704
656
688
768
736
768
784
688
768
704
752
688
656
752
704
736
688
672
768
784
752
736
736
704
752
768
704
736
704
752
752
688
752
688
704
736
656
720
736
736
688
720
640
720
640
768
752
736
720
768
752
720
688
752
768
704
736
672
752
672
720
672
688
736
736
672
736
720
736
720
704
704
752
736
720
656
752
736
752
672
672
752
656
720
672
752
800
672
704
768
768
640
720
672
768
672
784
784
736
752
640
704
752
704
720
784
736
736
752
768
720
736
736
752
768
736
720
688
704
720
688
704
720
736
736
736
752
752
704
688
736
656
720
704
688
704
704
736
736
688
688
704
816
624
720
736
752
656
720
720
736
736
752
736
704
704
672
752
656
672
720
720
800
704
688
720
752
704
784
688
720
720
768
768
736
736
768
768
640
752
832
768
736
752
704
736
736
736
704
720
720
720
720
704
736
672
720
720
752
752
688
752
752
736
720
752
704
720
736
704
752
752
752
752
656
720
672
720
752
736
704
640
736
752
736
720
704
688
672
688
784
768
720
816
704
784
720
704
752
752
736
704
784
688
688
688
736
624
736
736
752
704
752
720
672
752
752
736
704
736
752
720
736
672
656
816
672
736
720
656
704
736
752
736
720
736
656
736
736
656
736
736
816
656
768
720
720
704
752
688
656
688
672
752
656
736
720
752
720
752
720
720
832
736
704
688
816
768
832
640
784
672
688
656
752
688
720
624
752
736
736
768
768
656
736
640
768
768
672
736
752
768
672
672
704
736
704
752
768
752
656
752
656
704
720
720
736
752
640
640
800
672
752
688
736
688
736
752
688
752
688
672
752
704
688
752
688
720
736
704
768
720
704
720
752
736
720
704
752
720
720
736
752
752
720
752
720
800
784
752
688
672
752
768
720
720
656
768
720
720
736
736
752
800
720
688
672
752
688
688
704
752
720
752
752
672
688
736
704
720
688
736
720
704
800
704
688
800
720
752
672
752
704
752
736
672
736
688
752
704
752
688
752
720
752
720
736
720
736
736
752
736
784
752
720
704
656
736
688
704
720
704
688
688
752
720
736
688
720
720
736
752
752
752
752
736
720
816
720
672
768
688
720
656
736
672
768
720
656
736
720
672
720
720
704
752
784
768
752
656
720
704
720
752
736
752
688
768
752
736
720
720
768
720
720
768
688
720
704
752
688
720
736
736
688
672
768
704
688
672
768
736
672
656
704
736
736
704
800
736
752
752
688
720
736
736
752
736
688
752
736
640
736
688
736
736
704
720
672
720
704
720
736
768
704
784
752
688
736
704
720
704
704
752
768
736
736
736
704
736
736
704
720
736
720
736
768
704
800
752
720
720
688
656
736
784
752
672
720
704
720
688
752
640
720
688
768
736
784
720
752
672
640
704
656
736
720
720
688
688
736
688
736
752
704
688
704
768
720
704
688
752
720
688
800
688
736
704
736
752
752
688
752
768
656
736
704
720
768
720
784
672
656
704
736
800
688
720
736
800
672
768
720
704
752
784
736
784
688
688
736
688
704
704
720
784
672
720
752
768
704
720
720
720
688
720
688
656
720
672
736
752
768
720
720
688
720
688
720
768
704
752
704
752
704
656
784
736
736
752
736
752
720
736
656
768
704
688
752
752
752
704
704
720
736
720
800
656
720
736
752
752
752
736
800
704
736
656
720
736
688
688
720
720
768
720
704
784
736
720
752
720
704
688
736
720
752
672
736
688
688
704
768
640
752
720
720
752
704
688
752
720
688
752
736
800
672
688
688
736
800
704
720
800
704
720
768
784
656
736
752
768
704
768
736
736
736
752
752
624
704
752
704
704
784
688
736
704
704
768
752
672
736
704
672
720
640
752
688
704
752
704
704
704
736
704
640
736
736
704
736
688
720
800
704
800
720
640
720
656
752
720
752
816
656
768
720
736
752
704
656
784
688
752
736
784
768
688
704
752
736
736
736
688
720
752
672
816
640
720
752
736
672
704
688
816
752
736
736
720
736
768
656
784
752
752
704
768
720
736
736
736
752
784
672
688
736
800
736
672
736
672
736
752
736
672
784
704
656
736
704
688
720
736
704
704
800
720
688
800
784
704
720
736
768
752
688
784
736
800
640
688
752
736
736
672
656
704
704
752
752
784
640
720
688
704
784
720
720
656
768
688
672
736
784
752
752
736
688
672
688
768
704
736
704
752
768
704
752
688
736
736
752
800
720
688
720
704
752
720
720
672
656
768
688
704
768
752
752
768
688
672
704
752
736
736
688
752
688
752
720
736
704
720
720
656
720
736
720
704
720
752
704
752
672
736
720
736
720
656
720
704
672
672
736
784
688
720
688
672
768
704
704
656
672
752
672
768
736
688
784
736
656
752
704
720
720
704
688
752
720
736
688
672
720
720
720
688
720
688
832
720
736
736
768
720
704
720
768
752
720
736
688
752
672
752
768
688
720
736
688
720
688
720
736
672
736
688
752
656
688
736
736
736
752
736
640
752
656
672
656
784
704
784
640
656
656
784
736
736
720
704
752
752
736
816
720
736
672
752
736
784
752
688
784
704
752
720
768
640
768
704
688
768
672
736
672
752
752
752
704
640
720
704
736
784
816
704
672
704
736
768
704
768
704
768
768
752
672
752
768
768
720
672
736
640
736
656
752
704
720
736
720
752
736
768
688
736
688
624
720
688
624
720
672
768
784
752
704
672
768
784
768
688
752
768
768
720
768
752
752
752
672
704
752
736
736
752
640
720
768
688
720
704
688
752
736
688
720
736
656
768
752
704
736
736
784
736
816
720
832
688
752
752
688
784
752
736
736
736
704
688
752
752
640
736
800
736
800
656
752
768
816
720
704
784
736
704
768
736
720
704
736
752
720
688
752
672
720
736
736
736
784
768
768
736
736
768
800
640
752
704
736
656
752
752
672
656
768
720
720
736
688
688
752
688
768
688
720
720
736
640
736
688
736
736
736
768
768
704
672
672
752
688
736
720
704
624
720
784
672
736
688
640
688
752
736
640
768
688
816
704
800
736
672
704
768
752
704
736
688
832
672
752
768
656
656
704
768
688
688
752
736
672
736
736
704
656
704
688
720
704
752
736
624
736
704
736
656
752
704
672
704
752
688
800
736
688
736
720
752
752
720
672
704
656
752
736
736
736
752
656
688
752
720
752
752
688
752
640
768
688
688
752
720
736
784
704
752
736
752
752
768
688
688
704
640
752
768
736
672
768
752
704
720
736
672
704
640
704
736
672
752
736
752
752
672
720
720
768
656
672
736
720
720
688
784
672
752
704
720
720
656
736
720
640
752
736
752
688
720
704
752
816
768
736
768
688
656
768
736
720
656
720
656
704
752
800
688
768
736
768
784
672
752
688
704
768
704
704
768
672
736
768
752
768
672
752
688
688
704
752
672
704
688
752
704
704
720
736
656
736
688
720
768
768
688
736
720
704
608
784
688
688
768
720
704
736
672
752
752
736
704
688
704
752
736
704
752
800
768
736
736
672
704
816
768
688
752
624
720
752
784
720
656
704
704
704
720
720
784
704
768
704
720
736
688
816
736
688
672
736
768
752
688
720
672
704
736
704
704
704
752
656
720
784
704
720
688
736
704
720
720
688
672
688
704
688
720
640
752
768
768
768
768
688
704
736
672
752
656
752
672
688
672
784
704
768
720
704
656
688
720
640
816
704
736
704
752
720
768
720
736
720
720
624
704
704
704
704
736
672
720
720
720
736
736
720
704
720
752
672
672
752
736
688
736
640
704
688
800
688
816
704
752
736
752
704
688
752
704
784
752
672
704
688
736
816
688
768
720
704
736
736
624
704
752
672
672
704
736
720
752
704
704
720
704
768
784
736
736
720
800
736
768
656
752
736
752
704
784
768
688
736
736
688
688
720
672
656
768
704
752
752
688
736
752
720
688
688
752
768
688
720
768
656
688
768
736
688
736
720
784
688
768
752
688
672
640
656
736
768
752
752
736
672
752
672
768
704
720
752
688
752
752
688
688
752
784
672
672
832
656
720
656
640
688
736
768
768
656
752
704
752
720
736
656
864
720
768
816
640
656
752
672
656
688
672
736
656
704
784
720
768
752
688
768
720
768
688
752
800
768
688
768
672
768
672
752
816
768
704
656
672
736
768
720
672
768
672
688
752
736
736
752
752
752
768
736
672
736
752
752
720
768
704
752
720
768
720
640
752
672
752
736
736
784
688
704
688
752
800
704
672
768
688
816
736
752
688
704
704
752
832
656
752
672
720
704
736
752
768
784
752
784
736
736
656
672
784
736
672
768
752
832
752
704
752
720
752
752
720
656
720
688
768
768
736
736
784
672
736
752
672
656
704
736
672
816
704
720
768
704
768
672
672
656
704
768
736
768
656
720
688
688
752
720
816
656
672
832
720
720
736
736
752
736
672
752
688
688
816
784
784
800
656
688
752
752
672
720
736
656
720
768
768
752
672
688
752
672
688
720
720
784
672
656
816
640
800
736
736
640
784
624
672
736
656
832
672
800
736
768
784
720
672
752
720
736
640
688
640
752
720
720
736
688
800
688
736
800
768
672
688
752
816
752
784
704
736
672
704
688
768
704
768
656
768
704
752
640
800
736
704
688
752
752
736
720
736
752
704
688
720
720
752
752
672
752
736
704
752
800
704
784
816
720
720
736
752
704
816
704
736
752
688
768
784
656
672
704
768
672
656
688
704
704
704
800
768
800
704
768
704
688
736
656
672
816
736
736
784
720
736
704
784
672
752
752
736
752
672
656
672
688
768
672
656
720
672
752
752
736
704
768
704
736
752
736
656
640
688
752
720
688
704
720
752
704
656
736
704
736
688
736
704
736
736
752
720
672
736
656
768
688
624
672
752
672
800
688
752
768
752
832
784
752
768
752
720
688
784
768
736
768
704
688
704
736
720
768
736
672
768
704
688
672
720
736
688
784
720
768
736
672
688
672
768
672
672
672
736
720
656
720
752
656
736
752
720
784
752
736
736
736
752
736
640
720
736
720
752
768
720
736
768
672
768
736
736
736
720
672
656
768
768
720
688
752
736
736
752
752
704
784
720
736
768
784
800
640
704
720
736
768
752
752
704
736
720
656
736
672
752
736
672
752
768
736
784
736
704
704
688
672
736
656
736
656
720
752
736
656
720
768
768
688
736
688
784
768
656
736
704
752
720
752
704
672
784
672
656
736
736
784
752
688
768
688
688
816
720
720
736
672
688
736
720
720
736
736
800
736
784
688
720
688
736
720
800
672
736
672
720
720
800
688
768
656
784
720
736
752
752
784
656
672
656
736
672
784
720
656
640
752
720
736
720
688
800
720
672
752
672
768
736
656
704
688
784
720
688
720
688
768
704
688
720
768
672
672
752
688
768
688
704
736
768
704
720
752
736
768
720
720
640
752
640
752
784
720
752
640
672
720
688
656
736
672
704
768
656
736
720
736
768
736
720
672
752
800
752
720
704
736
640
672
752
704
704
736
688
688
736
768
672
688
688
688
736
704
672
752
752
752
768
784
752
800
752
736
752
736
688
704
752
752
736
672
656
768
720
672
720
720
720
672
816
736
656
752
720
736
704
848
640
736
752
736
736
784
800
720
752
752
720
704
704
768
736
656
688
736
784
704
736
736
720
672
624
720
688
768
704
752
768
672
656
736
688
688
768
752
672
736
768
752
752
656
752
736
736
752
768
704
752
720
736
800
752
752
672
656
752
720
720
672
736
688
720
688
736
672
704
752
752
784
736
784
752
736
672
816
720
784
768
752
736
640
688
736
768
752
736
640
688
720
704
704
688
720
688
736
736
736
736
800
752
688
832
736
816
752
736
736
736
768
656
752
672
656
704
752
784
688
704
768
720
704
768
672
768
720
720
736
768
720
720
672
704
704
640
736
656
688
720
672
768
816
720
720
720
672
736
736
768
752
736
736
720
720
752
720
688
704
736
736
736
704
736
768
752
672
720
656
784
752
752
672
688
752
688
752
688
768
704
736
736
720
752
720
704
736
656
752
704
784
720
672
816
720
768
720
720
768
656
672
768
640
720
672
704
736
688
736
720
672
656
688
752
736
752
752
704
736
784
720
656
688
720
752
688
736
800
768
752
752
752
752
624
752
640
800
736
704
704
784
624
720
672
768
752
800
736
720
640
688
736
752
688
800
656
816
736
752
816
752
736
752
752
704
736
640
672
768
704
752
768
704
656
816
736
768
752
736
704
704
752
672
752
752
720
704
656
768
736
736
688
784
784
672
736
720
816
752
752
704
752
736
816
752
656
752
704
672
768
736
640
784
736
736
768
656
656
768
768
672
672
672
704
768
800
656
688
736
752
768
752
704
656
736
736
672
656
768
784
704
736
800
736
800
720
736
640
688
768
768
720
672
736
816
720
688
768
752
800
784
656
704
640
752
720
752
704
752
752
688
736
752
736
768
832
736
656
736
784
672
704
816
736
688
736
816
656
752
656
768
736
688
736
672
720
752
736
768
688
720
752
672
832
736
736
752
720
752
704
656
736
704
688
752
704
768
768
752
768
720
768
688
752
720
656
768
608
720
720
688
672
704
672
688
752
736
656
736
752
688
784
672
752
800
784
672
752
704
704
688
656
752
736
688
640
736
640
704
704
736
688
736
752
816
640
720
720
736
672
736
784
704
656
736
672
752
752
752
736
688
656
720
752
752
704
720
736
720
784
768
784
768
704
656
688
704
736
672
720
672
720
640
784
736
720
704
736
736
736
656
784
816
688
752
736
704
704
736
656
736
688
816
736
704
816
752
768
704
768
800
752
752
736
736
736
752
752
752
736
704
656
736
752
720
640
688
736
736
720
640
672
752
688
768
720
752
736
784
752
768
720
768
784
736
736
720
720
784
656
752
720
752
720
800
672
752
752
752
784
752
704
688
816
752
752
784
672
640
656
672
672
656
704
784
720
736
704
640
752
752
720
672
736
736
800
688
704
736
768
736
736
656
736
736
704
704
736
800
752
656
656
688
672
672
784
704
736
720
688
736
720
736
736
784
736
736
672
752
752
768
672
672
656
800
688
720
720
752
832
672
736
672
752
752
656
720
752
768
752
752
640
720
752
752
768
736
736
768
688
640
720
656
688
800
720
800
704
800
704
688
672
752
688
656
752
768
752
784
720
752
720
736
656
752
688
768
672
720
784
672
688
720
736
720
672
736
800
720
736
784
784
768
784
720
752
656
768
752
736
848
688
736
736
736
672
768
736
656
752
672
672
768
736
672
656
752
672
672
848
752
768
640
672
672
672
736
688
752
736
736
784
704
736
752
720
768
736
624
784
736
736
704
752
688
784
768
672
704
768
768
720
656
784
720
736
720
656
784
752
656
736
688
736
736
704
800
688
832
752
672
688
736
672
752
752
736
784
784
752
752
704
768
640
752
800
784
736
752
816
672
752
784
688
736
784
656
736
752
704
800
656
640
816
656
656
688
752
656
704
672
688
736
816
752
688
784
736
784
752
672
720
784
704
768
688
720
736
720
720
656
656
672
672
688
736
688
672
784
672
656
752
752
720
656
672
768
688
688
720
800
736
656
672
656
704
688
752
720
672
720
832
640
752
656
656
672
768
768
672
656
640
768
752
720
672
688
736
656
688
688
752
736
736
688
672
704
736
688
752
736
624
656
736
784
736
640
800
688
784
800
720
816
656
752
672
656
800
656
720
672
656
768
720
704
768
704
752
768
704
752
720
800
768
736
736
784
688
736
720
736
640
720
688
736
736
784
736
800
736
752
720
704
656
704
656
656
752
736
640
672
656
784
624
656
704
832
720
736
720
640
640
656
752
704
752
752
640
816
752
688
736
688
688
752
784
704
752
704
688
736
688
688
720
688
752
752
688
672
768
752
752
768
752
672
768
624
672
768
656
752
736
800
624
768
640
768
752
656
640
704
672
704
720
640
736
736
736
736
752
704
736
688
768
800
720
752
688
816
656
688
784
800
704
736
752
768
720
656
656
752
688
736
752
752
736
672
672
816
640
688
720
768
720
720
672
784
784
688
768
704
768
720
752
720
640
704
736
736
800
752
752
656
800
784
752
656
672
800
784
720
672
672
752
752
752
704
752
688
736
736
880
720
720
672
736
768
704
752
736
720
672
672
736
752
720
688
672
752
752
672
768
752
672
672
768
752
816
752
752
720
672
752
672
736
736
672
752
704
672
752
752
672
656
784
768
720
720
816
720
688
736
768
672
656
720
816
640
720
672
672
672
720
768
768
768
768
688
704
720
784
688
752
736
768
688
720
800
752
720
736
656
752
672
688
656
752
720
768
736
752
768
720
688
720
736
848
688
672
736
736
784
688
656
736
784
752
752
752
768
800
672
832
752
752
736
720
752
768
656
736
784
736
704
736
656
784
640
736
672
736
752
656
656
736
752
720
800
688
704
752
688
752
736
640
784
768
768
672
752
800
704
736
752
736
752
752
816
736
688
672
768
704
736
672
752
704
720
736
736
784
720
768
704
624
640
768
768
768
752
768
704
736
720
688
672
768
768
672
688
768
672
752
736
656
752
720
656
768
784
736
816
752
720
784
752
656
752
720
736
784
720
720
736
688
800
736
736
736
704
768
752
656
752
736
816
688
768
800
704
688
672
688
816
752
768
752
768
736
752
768
768
768
704
816
640
736
672
656
752
768
784
688
768
752
672
736
768
656
768
800
672
736
752
752
736
736
752
752
768
704
736
736
720
752
768
672
656
736
720
672
832
752
656
704
752
768
752
736
784
656
656
752
656
752
752
656
736
752
752
720
720
736
704
656
736
656
800
704
752
736
736
672
752
752
672
752
656
736
720
640
752
752
784
736
704
768
704
720
720
688
720
704
800
752
736
720
800
720
736
704
720
720
704
704
768
752
736
736
672
656
720
672
736
768
704
816
736
704
752
688
752
768
752
784
752
816
656
752
832
736
688
720
736
720
688
720
736
720
816
736
704
752
752
752
704
672
736
672
752
720
704
672
768
736
704
736
704
656
784
736
672
736
752
752
672
736
736
720
672
800
688
736
768
688
752
720
672
688
656
640
720
704
784
656
688
784
768
656
768
736
752
720
656
752
688
672
784
768
752
752
688
736
784
672
736
704
784
704
720
720
768
720
688
736
704
752
704
768
768
752
720
752
720
672
656
672
736
720
720
816
704
672
720
736
784
656
720
736
768
736
720
656
688
768
736
720
704
672
640
752
720
704
816
736
704
672
656
672
688
656
720
688
752
768
800
784
720
672
720
784
656
752
784
720
752
752
704
736
720
736
720
688
720
736
736
736
672
752
704
784
608
768
736
688
752
736
720
736
736
736
640
768
752
784
736
720
736
736
720
640
720
736
720
752
656
800
720
720
688
656
752
704
688
784
656
736
752
672
800
672
736
736
672
768
736
784
736
768
752
672
736
640
672
752
800
672
736
672
800
736
768
784
672
720
736
800
752
784
704
720
720
688
640
752
768
720
704
656
736
752
672
752
672
720
688
704
640
672
704
720
752
720
736
720
752
640
752
704
688
768
688
784
720
720
656
704
688
752
768
768
768
656
752
816
720
736
816
752
784
800
752
800
720
656
768
784
736
640
752
736
752
640
752
752
656
736
704
768
752
736
736
704
720
672
656
752
768
720
736
640
672
768
704
784
720
784
720
784
656
768
704
704
688
688
752
784
736
752
768
736
800
704
784
736
720
752
688
704
752
720
752
768
768
672
736
752
736
752
672
736
672
768
640
768
656
736
752
688
832
736
736
688
736
720
752
768
688
704
640
736
688
656
672
656
768
672
672
736
656
704
720
752
688
672
704
752
720
752
624
736
720
688
752
784
784
736
784
784
688
736
768
768
736
704
752
752
704
736
784
720
800
768
704
704
784
736
784
704
752
800
784
624
736
816
768
672
704
672
720
800
640
736
768
688
720
688
672
640
736
752
768
752
736
688
768
672
752
688
752
704
704
704
672
784
672
752
752
768
752
752
720
768
736
736
800
736
784
704
736
736
720
768
688
752
768
816
688
768
672
752
736
784
688
736
736
736
720
704
720
704
784
720
672
704
688
752
656
752
752
720
672
752
704
752
640
784
656
752
656
672
800
736
640
768
720
784
736
672
752
800
704
768
736
736
736
720
720
704
640
672
704
736
688
752
800
736
736
784
752
720
736
768
800
704
768
720
768
720
768
736
720
736
640
688
688
656
752
704
752
736
736
752
784
768
704
640
784
768
768
688
688
768
752
736
720
720
752
736
736
768
720
672
784
768
720
640
736
736
752
672
656
688
736
768
688
672
736
688
784
768
704
672
624
736
672
768
784
704
704
736
640
752
784
752
736
720
736
656
656
752
688
688
736
768
688
752
784
752
784
688
752
704
704
720
752
768
704
688
720
752
752
672
800
768
736
640
752
656
816
704
800
736
720
752
688
800
736
736
784
736
768
784
736
720
768
784
640
672
800
768
768
768
736
768
720
736
736
736
704
656
768
720
784
752
656
672
752
752
784
640
752
720
736
752
672
752
656
736
736
672
848
720
688
768
736
736
688
688
768
672
720
752
704
768
640
784
720
784
656
752
720
640
784
688
704
768
656
768
656
752
688
768
704
672
736
752
720
640
752
640
672
736
720
752
736
736
688
800
736
752
816
752
656
688
752
688
768
752
752
752
656
736
768
752
672
720
640
800
752
688
656
768
736
752
784
720
784
768
672
752
688
768
768
736
784
752
752
656
672
672
784
640
672
752
656
736
736
656
768
656
672
752
736
672
672
688
640
736
640
784
736
720
656
720
720
800
672
736
816
752
784
768
800
752
768
752
752
688
816
688
720
752
784
720
752
752
768
736
768
816
736
784
768
768
832
736
736
752
784
640
768
752
656
752
752
768
672
752
720
768
752
736
720
784
800
752
672
672
816
784
640
656
752
640
768
656
688
720
656
656
752
752
752
752
720
752
736
752
688
800
656
736
784
800
736
784
688
800
736
768
672
832
640
656
736
784
624
816
752
720
688
752
768
768
752
720
656
800
736
640
672
768
704
736
672
720
752
736
640
768
768
736
720
768
672
656
688
800
672
672
672
688
688
736
720
688
768
768
752
800
688
768
768
736
784
784
720
688
672
656
736
768
768
752
736
688
720
768
672
736
832
736
736
688
640
752
768
768
752
720
768
752
736
672
656
736
784
688
640
704
720
640
688
752
720
672
624
736
768
672
784
768
736
656
768
704
704
656
720
768
832
720
704
736
720
720
768
736
752
736
768
656
768
816
720
736
752
752
736
736
688
672
720
704
784
752
688
656
752
704
752
656
736
640
656
720
736
672
720
672
768
688
736
752
752
752
672
736
720
672
720
656
720
816
736
736
736
736
720
768
768
672
672
768
640
672
752
768
656
768
672
752
736
656
672
736
688
672
816
640
672
752
800
784
688
624
800
768
640
736
656
736
640
736
688
720
784
640
800
736
736
656
656
752
752
752
688
832
656
624
656
768
736
768
656
736
656
672
720
736
640
720
656
704
720
656
784
800
720
736
752
736
704
752
752
656
736
752
832
752
784
752
832
720
816
720
752
816
736
672
816
768
720
768
752
768
720
736
800
736
784
672
656
768
704
720
752
720
656
720
688
672
832
752
720
672
672
704
736
736
704
672
784
720
720
736
768
688
752
752
768
640
752
672
656
752
720
752
688
784
752
672
768
720
768
720
752
720
752
736
752
672
768
752
736
656
720
768
640
688
736
672
736
736
720
752
784
752
736
800
784
656
656
704
752
640
768
768
768
688
656
736
688
736
784
752
736
752
640
800
672
752
656
672
736
752
672
672
800
736
656
640
720
656
672
656
656
752
752
768
624
720
768
704
736
624
656
688
736
672
736
656
752
752
688
784
752
672
752
656
816
656
784
656
768
720
816
736
704
640
752
704
688
656
672
656
784
720
672
704
752
752
720
752
832
656
704
832
720
752
752
672
672
656
672
832
752
752
752
768
656
656
720
752
704
672
768
768
672
768
736
704
688
752
784
736
800
736
768
736
704
784
752
736
768
704
816
688
752
704
800
736
768
672
768
736
736
704
752
672
720
736
816
688
736
736
784
784
752
816
656
784
736
688
720
752
752
816
736
768
736
656
784
672
768
752
736
640
752
656
720
704
656
736
720
672
672
768
720
672
832
720
656
672
736
736
736
672
656
784
656
640
736
672
672
752
672
656
720
672
656
768
784
768
752
720
752
784
832
752
768
752
752
752
752
672
704
656
752
688
720
768
784
784
720
720
752
672
720
656
768
656
752
736
736
800
736
736
656
688
736
656
800
720
688
656
768
672
784
640
640
768
784
640
688
656
736
736
688
752
800
752
704
768
768
848
656
768
752
768
752
640
736
672
704
752
768
752
672
640
768
672
736
784
816
752
640
736
768
752
784
688
688
752
720
688
672
752
752
752
768
608
736
784
784
656
768
672
816
656
768
752
736
768
784
640
720
704
752
752
672
656
784
752
768
704
720
752
768
656
672
736
672
688
736
688
752
736
752
752
720
816
736
800
768
736
656
640
656
736
688
768
640
832
736
768
768
752
624
752
752
752
736
752
752
736
672
784
736
736
720
768
720
784
656
688
752
720
752
704
752
672
752
688
656
736
640
720
704
672
720
752
672
736
672
688
704
704
768
768
656
720
688
736
720
656
752
704
784
736
672
688
688
688
736
656
736
736
704
736
704
720
672
752
720
720
688
736
704
752
688
752
672
752
768
672
640
704
672
800
720
768
688
768
640
768
640
784
736
752
720
752
720
752
784
736
768
752
736
768
656
672
752
688
736
672
672
720
816
736
736
768
704
704
768
720
704
816
656
752
752
768
672
768
688
784
752
672
720
688
688
768
768
768
656
672
736
736
784
768
736
704
704
720
736
640
736
656
656
736
688
736
752
752
736
752
784
736
768
672
752
672
800
656
720
720
752
736
784
816
736
736
768
768
640
752
704
752
816
688
768
752
720
688
768
672
768
672
752
752
736
736
720
704
704
752
672
704
800
736
704
720
736
640
736
752
816
736
736
752
784
768
704
768
704
720
752
704
784
704
736
784
736
752
672
768
768
752
736
656
688
752
736
720
784
640
720
752
640
688
768
768
704
800
736
800
688
768
720
672
736
768
784
624
816
736
768
640
720
816
768
704
672
688
672
656
752
656
736
688
672
752
704
736
768
640
736
720
784
784
768
752
752
800
736
720
736
800
624
736
736
752
672
656
752
720
688
752
688
704
672
848
720
672
720
752
736
624
816
688
640
752
752
704
720
736
656
752
688
672
752
752
752
800
736
752
752
672
704
736
688
656
704
688
752
672
768
768
736
768
672
656
688
720
704
784
640
816
736
656
688
768
656
832
656
656
768
720
672
736
752
752
736
784
672
736
720
784
656
832
672
752
768
768
672
736
704
688
672
736
672
752
720
752
752
672
736
688
720
736
736
672
656
784
736
688
752
752
624
688
800
784
672
752
800
752
640
800
656
832
752
752
736
656
752
672
752
752
640
656
672
736
672
640
736
656
736
656
736
672
752
736
624
672
720
720
720
736
752
752
752
832
672
688
752
736
736
672
784
752
656
656
768
784
688
640
816
736
688
768
720
736
672
736
688
784
688
736
832
768
736
768
816
672
768
736
688
784
640
656
704
736
688
752
768
752
704
752
656
656
784
704
736
736
720
672
656
816
752
656
688
752
640
704
672
624
768
640
720
640
720
672
736
656
688
784
624
752
768
736
656
752
736
720
768
688
736
752
784
672
688
672
672
752
736
784
736
768
672
720
784
832
736
672
864
736
704
640
768
720
752
736
672
672
688
768
752
704
704
720
752
768
752
752
784
640
688
720
768
720
672
720
800
688
688
784
704
704
784
656
640
736
656
736
768
704
752
752
672
656
736
736
720
672
752
720
720
656
688
752
752
752
752
720
704
800
736
688
736
720
736
736
736
704
688
656
752
640
736
688
720
736
736
720
640
768
736
640
736
736
656
720
736
736
704
784
736
752
736
640
800
672
640
752
688
752
720
720
720
736
752
752
688
672
736
656
800
656
672
768
768
688
768
736
752
816
816
752
784
672
640
688
784
704
688
720
736
720
656
752
768
672
672
800
704
752
656
688
624
688
736
736
624
720
736
768
784
752
768
656
688
768
656
704
848
656
720
736
752
656
736
688
752
688
752
704
768
736
656
720
768
736
656
736
752
768
736
704
768
816
672
688
672
752
784
672
672
704
768
736
720
656
784
704
688
800
672
720
704
784
720
768
752
752
720
736
704
752
752
656
736
704
752
736
688
768
784
656
736
704
816
640
656
688
704
720
752
720
784
736
656
784
688
704
768
672
736
672
688
672
784
752
800
752
720
720
768
688
752
752
752
720
768
672
672
672
736
784
816
656
752
672
736
640
768
656
720
768
816
768
736
800
736
752
768
768
768
752
768
816
656
768
736
768
688
752
640
720
736
672
768
800
752
688
720
736
816
736
768
752
704
752
656
768
768
768
752
752
736
640
736
720
784
736
752
720
672
784
704
768
816
736
752
752
656
688
736
736
752
656
688
704
736
672
688
704
656
832
672
800
672
640
736
656
640
688
720
768
640
784
688
704
672
672
640
688
688
784
720
784
800
736
800
736
688
720
656
752
752
720
752
784
720
704
800
752
768
800
656
672
768
688
752
736
768
720
736
736
752
768
768
752
736
672
688
752
720
672
768
720
736
752
656
832
736
752
800
736
736
752
640
672
736
736
688
800
736
720
736
768
784
736
720
656
736
704
720
816
752
752
768
640
768
752
752
640
784
736
640
672
752
752
768
736
704
800
720
672
704
736
768
784
672
720
752
656
768
768
768
736
720
672
752
752
736
768
736
816
768
800
752
640
800
640
672
704
736
656
688
704
768
768
640
784
752
704
736
752
736
640
800
752
720
640
720
752
704
736
752
768
704
624
768
736
800
736
688
656
752
704
672
800
736
768
784
736
688
736
672
672
768
832
736
736
752
800
704
752
800
800
768
720
736
752
752
768
768
752
768
768
736
752
704
736
672
688
784
656
768
752
736
800
784
736
752
736
656
752
672
752
656
720
688
736
736
736
656
672
800
656
784
624
752
672
752
768
704
752
672
640
688
752
736
672
800
720
736
656
656
720
704
720
768
656
736
816
656
672
768
768
816
640
736
768
672
736
736
736
736
736
720
720
624
752
800
784
736
640
736
752
752
720
656
720
624
752
688
752
688
640
768
704
816
704
736
736
752
704
672
656
768
784
736
656
768
672
736
800
720
672
768
832
672
688
656
800
752
720
736
672
752
736
768
736
688
672
736
672
704
720
736
736
752
800
736
784
640
816
672
656
720
752
768
672
800
736
672
688
768
688
752
720
800
800
752
752
672
736
656
736
720
688
768
720
752
752
752
720
800
720
720
800
720
720
624
736
688
672
736
672
640
720
752
752
784
752
800
784
704
688
656
672
752
768
672
752
736
736
640
656
752
752
736
736
672
736
800
656
688
752
848
752
720
672
656
672
816
640
656
720
752
736
720
752
672
720
768
656
704
656
736
720
688
752
768
736
752
640
688
704
704
736
736
736
720
752
768
720
832
640
800
800
624
832
752
736
720
752
800
736
720
736
720
640
720
784
656
688
672
768
736
752
672
704
768
768
720
704
704
640
768
768
736
720
704
800
736
816
736
656
656
672
736
720
752
736
672
752
656
640
720
624
656
752
688
768
640
704
816
688
656
672
656
736
736
672
688
752
752
736
800
800
640
768
736
816
752
752
688
752
736
800
736
736
736
752
736
768
752
752
640
752
784
752
768
656
752
768
672
688
784
656
752
688
752
672
736
720
736
736
720
784
672
672
688
832
656
720
768
768
656
752
752
688
752
800
656
672
768
656
752
736
736
736
640
736
688
736
736
656
656
784
736
768
656
688
784
768
704
752
672
784
720
816
704
752
736
672
704
752
752
768
736
752
672
736
688
688
768
656
768
736
784
768
704
768
768
736
656
720
768
656
688
720
720
736
688
656
736
736
768
688
720
624
768
672
752
768
704
672
704
656
736
768
752
656
640
736
704
784
656
784
768
720
704
720
720
688
752
736
832
720
736
688
736
656
768
672
672
736
672
752
752
720
704
768
736
656
752
832
672
784
752
816
720
704
768
768
736
640
784
672
736
784
784
704
768
784
720
640
784
688
800
672
720
752
768
768
656
672
784
736
720
640
672
720
752
736
752
752
672
720
752
768
784
752
656
688
704
672
736
768
784
736
848
624
752
784
784
736
720
688
736
640
688
848
736
752
768
704
672
688
752
736
704
672
688
656
672
768
752
784
672
752
784
832
656
672
736
704
688
720
704
784
704
800
656
768
768
688
768
736
752
672
704
752
752
720
672
752
656
704
768
752
768
768
672
736
656
672
720
800
800
704
768
784
752
688
704
640
704
704
736
640
736
736
784
656
688
768
736
736
672
688
688
656
752
720
816
688
688
800
656
688
672
656
656
752
736
736
784
752
656
752
720
784
768
768
752
720
688
704
768
720
720
768
720
784
800
656
640
752
768
736
704
736
672
720
688
704
624
688
736
688
736
752
736
720
688
640
736
736
672
752
688
672
688
768
768
752
768
688
752
736
688
800
720
688
720
768
768
752
768
736
768
704
800
656
768
800
752
752
816
784
704
752
768
656
800
640
768
736
704
752
720
768
720
736
656
672
736
736
720
720
752
784
784
688
736
752
768
720
768
736
752
720
672
736
768
656
752
752
688
784
768
736
736
720
816
640
768
672
832
768
688
752
704
656
768
752
816
720
624
752
672
672
704
640
752
720
768
720
752
832
736
800
672
720
720
752
720
752
720
688
656
768
752
640
816
688
800
768
800
720
736
752
768
640
800
768
816
656
720
768
672
688
672
736
672
656
752
656
784
720
720
704
656
704
720
720
800
608
800
752
736
752
704
752
656
768
768
704
656
640
800
672
768
704
656
736
784
688
720
784
656
720
736
752
736
752
720
736
752
752
752
736
752
672
688
736
688
816
816
784
640
704
752
768
640
736
688
768
640
672
736
736
736
688
800
784
720
736
672
736
688
768
752
656
736
800
784
704
688
672
640
736
640
704
816
656
672
736
736
656
736
640
656
704
800
720
736
832
768
752
736
720
736
656
752
768
736
704
672
816
720
704
720
672
672
688
784
752
752
768
688
816
752
736
688
816
832
752
704
720
720
736
752
736
720
768
672
832
720
752
640
736
768
672
656
688
640
720
720
752
720
720
784
736
688
800
672
720
704
768
672
624
752
672
768
672
736
784
624
672
752
736
752
720
720
672
720
736
752
736
640
736
656
736
736
704
672
720
752
720
656
704
752
736
752
704
736
768
736
688
752
736
720
768
720
624
752
640
784
784
688
752
688
736
672
704
752
752
720
736
752
688
720
768
768
752
768
752
752
768
800
656
688
752
768
672
720
736
656
752
640
752
784
752
736
640
688
704
768
672
688
752
688
752
752
752
688
656
784
704
752
768
640
688
720
672
800
768
784
720
752
688
768
784
768
784
720
768
656
720
704
672
704
640
624
688
704
768
752
784
768
816
624
736
704
704
688
736
672
784
768
656
752
720
720
656
720
656
656
800
688
752
656
736
784
784
752
752
672
736
656
800
736
720
736
688
752
688
704
672
736
736
672
688
784
800
608
768
720
752
720
736
736
656
768
704
688
736
736
640
736
672
624
720
752
720
640
640
768
736
672
656
784
736
704
720
736
736
656
656
784
720
752
688
656
736
752
752
768
736
768
768
720
736
688
800
704
704
704
656
688
688
736
752
672
736
720
752
672
736
672
768
720
736
656
848
752
800
784
656
720
832
736
688
704
736
752
672
656
752
800
656
752
736
720
752
672
752
784
768
736
752
816
672
736
768
752
816
752
816
768
704
640
752
720
736
736
832
736
752
768
768
752
672
736
672
800
736
736
848
656
656
768
672
736
688
752
768
768
784
720
672
736
768
688
800
656
784
736
768
688
704
720
656
656
720
640
736
848
672
720
784
720
656
640
816
720
720
752
720
720
720
704
752
688
736
736
800
656
736
640
736
672
736
688
768
736
672
784
672
752
752
656
672
720
688
800
704
800
752
768
736
736
704
720
800
688
704
720
656
752
752
752
752
688
688
768
672
816
752
720
656
672
656
640
752
832
736
672
624
752
656
752
720
672
800
720
720
672
672
672
736
800
672
768
752
704
736
736
768
800
688
704
672
736
704
736
784
624
768
736
752
752
800
656
704
672
736
800
768
768
752
752
768
784
800
752
800
704
640
752
656
672
656
672
800
752
752
752
800
736
784
800
656
752
784
704
736
752
720
704
736
720
720
656
624
624
640
752
688
656
752
736
752
720
736
736
736
720
672
688
688
736
656
640
720
736
688
672
656
784
832
752
672
784
704
800
752
784
816
672
656
656
752
736
736
784
656
736
624
768
800
736
784
704
688
640
656
768
736
736
768
752
672
736
720
672
720
704
784
640
784
736
720
688
752
656
784
752
768
656
768
688
736
736
784
640
752
688
704
672
688
736
768
736
640
640
640
752
640
656
800
672
656
752
736
800
672
640
704
752
720
688
640
768
736
656
720
688
736
720
768
688
736
752
768
736
656
752
720
720
720
816
752
768
672
800
672
784
720
752
672
736
768
752
752
656
720
656
752
688
672
752
736
720
752
656
752
752
784
672
752
672
736
720
768
800
752
816
672
816
688
736
656
688
736
656
752
752
736
752
672
720
752
752
704
752
800
720
672
720
672
784
640
768
800
816
656
720
800
656
608
640
752
736
672
768
720
704
688
672
752
768
720
688
672
736
688
672
656
784
736
688
720
752
736
720
768
768
784
704
688
784
720
656
736
624
688
752
704
624
768
784
672
736
672
800
688
768
752
768
752
640
832
736
800
768
656
736
656
720
656
720
656
768
736
656
752
736
736
720
640
784
656
768
752
752
736
688
640
768
688
768
816
688
656
672
704
736
672
768
672
784
704
752
752
736
656
816
768
736
720
784
720
784
768
736
768
800
736
736
736
768
688
800
688
720
672
768
768
736
688
816
688
752
752
672
768
736
752
736
784
752
752
720
832
656
736
752
720
672
752
736
720
736
768
832
736
704
704
768
720
656
816
720
784
656
768
768
688
736
752
816
672
672
736
640
672
752
752
672
800
736
656
752
752
816
736
784
672
656
688
736
656
704
736
736
768
768
656
736
688
816
640
768
816
672
752
736
640
768
768
640
752
736
720
768
768
720
640
656
656
736
688
720
736
752
720
736
752
688
656
752
752
800
656
704
704
768
720
704
672
784
672
672
752
704
672
736
704
688
720
640
720
640
656
720
736
752
736
768
704
816
736
688
704
768
752
816
688
832
656
800
752
736
720
688
736
720
800
752
800
752
752
720
656
672
752
768
640
624
800
736
688
800
800
736
704
672
752
752
688
672
752
816
640
768
800
816
736
688
688
688
656
752
704
720
800
640
784
672
688
672
672
752
752
800
672
832
752
656
736
752
752
768
656
672
656
752
640
688
752
752
672
752
736
736
704
736
720
832
688
768
768
784
672
720
656
656
656
768
720
720
656
688
768
784
640
720
688
672
752
688
640
672
720
752
784
672
688
768
688
720
704
640
784
656
752
720
752
672
784
736
688
784
816
752
688
752
816
672
832
656
752
768
688
768
720
768
768
720
784
752
784
688
688
752
768
736
672
800
640
768
752
752
736
688
704
752
784
768
784
720
672
624
672
736
752
816
736
656
752
608
656
736
688
784
752
720
640
624
752
640
768
736
704
768
784
688
720
736
704
768
720
672
688
768
720
672
832
672
752
736
816
704
752
752
768
672
752
800
672
656
736
752
720
688
784
752
736
800
736
784
720
624
816
752
752
640
736
720
720
752
752
736
736
720
688
736
672
752
768
768
656
768
704
640
672
800
640
672
704
720
736
624
672
784
752
752
832
768
672
720
736
704
752
752
688
672
688
672
672
768
656
736
736
688
768
656
720
768
752
768
624
672
640
720
688
704
720
720
736
752
656
704
752
784
704
768
720
720
656
736
768
736
832
736
736
720
800
640
768
736
752
640
768
736
752
736
704
720
640
800
672
752
640
736
768
624
816
752
752
752
752
800
736
784
816
768
656
784
784
688
784
768
656
768
720
688
736
688
800
720
752
800
864
736
768
752
800
784
752
672
848
720
720
640
784
640
640
768
768
752
752
640
688
736
752
688
640
720
752
720
736
736
784
736
736
736
640
736
816
688
656
768
656
752
752
736
688
736
736
752
688
672
704
720
832
688
768
672
704
720
784
752
656
768
624
800
800
736
624
752
768
752
736
736
768
800
704
768
624
672
672
656
640
736
720
752
752
720
736
624
688
784
720
720
720
752
688
736
640
720
752
704
736
736
800
800
672
752
736
704
752
752
752
672
704
736
640
704
656
736
768
736
752
752
800
688
800
736
752
784
784
640
752
768
672
736
640
672
672
656
736
704
816
752
672
736
800
720
784
640
656
736
752
720
800
784
736
736
704
656
672
752
784
752
736
720
656
704
640
656
736
752
736
688
752
640
672
672
768
736
816
736
704
688
688
688
704
688
768
736
752
656
752
752
752
704
672
736
768
672
736
736
816
640
736
736
704
656
768
656
736
768
768
752
800
736
816
736
800
752
688
672
720
640
752
768
800
768
752
768
736
736
720
800
624
736
656
768
800
800
768
768
672
672
768
720
640
752
672
736
752
688
672
656
752
688
656
672
800
752
688
672
848
752
768
832
736
704
768
752
752
656
832
672
784
752
784
752
704
736
688
656
656
640
656
640
672
752
816
768
736
720
704
720
752
752
688
720
736
768
704
736
784
736
752
736
720
640
688
720
672
784
752
656
672
800
624
752
752
768
736
624
768
800
672
736
672
704
800
752
672
640
736
704
816
688
784
736
752
640
736
672
768
704
672
688
752
688
800
672
768
800
640
656
800
736
688
752
736
672
704
672
656
768
768
720
672
736
720
672
656
672
704
640
672
816
736
784
768
672
784
752
688
704
640
672
736
752
752
752
704
736
640
624
768
736
784
784
752
752
768
656
752
752
736
656
768
768
768
736
656
688
672
688
752
736
768
704
768
736
752
752
752
704
736
800
656
784
688
736
672
656
752
656
656
736
768
736
688
752
736
672
736
672
752
640
784
768
704
736
704
736
736
720
656
768
656
672
736
816
720
672
672
816
752
816
704
800
768
784
768
784
784
672
704
784
784
736
704
800
784
656
768
688
768
768
784
768
784
816
784
656
752
816
736
768
768
720
640
720
752
672
752
656
800
720
672
704
816
624
720
688
800
768
768
672
752
688
784
736
736
816
752
656
752
656
640
688
672
688
768
672
752
816
704
736
688
784
768
832
672
672
784
736
720
688
816
688
672
752
688
704
688
768
800
720
736
736
768
752
752
800
752
768
752
624
768
736
816
672
768
752
752
656
720
720
640
736
688
624
672
752
816
736
640
656
816
608
752
720
656
848
656
736
736
720
656
672
656
672
736
736
672
736
768
752
704
672
672
736
800
752
624
656
768
752
752
752
752
656
752
704
624
752
704
672
768
784
720
672
768
752
736
768
736
768
672
800
656
752
704
672
768
720
656
640
800
656
640
768
688
672
720
736
736
672
672
704
640
688
768
672
752
768
816
672
656
816
752
736
816
752
784
816
672
752
752
672
752
752
768
768
656
672
720
800
640
800
784
720
672
768
768
672
752
672
768
752
784
656
672
752
688
704
736
688
752
672
800
736
688
752
736
720
688
736
736
736
656
720
720
784
752
672
624
672
752
624
688
768
752
672
656
768
736
752
816
736
720
672
640
752
784
752
736
736
752
752
784
736
736
768
736
736
752
768
800
688
720
672
768
784
704
784
672
832
704
784
688
768
784
688
768
672
752
688
656
672
768
784
736
768
720
688
752
768
704
720
640
640
640
672
800
720
736
688
736
704
672
640
656
752
704
736
704
640
704
736
672
736
704
672
720
752
768
736
752
768
784
752
736
816
720
752
640
832
768
816
656
672
816
816
640
752
768
832
656
768
752
688
784
624
768
656
752
672
752
736
672
656
736
720
752
752
752
640
800
688
704
704
768
736
704
656
688
752
640
768
832
720
672
752
672
816
688
752
736
672
768
656
720
752
784
720
720
688
752
656
768
704
688
672
816
704
784
688
656
800
736
672
656
736
704
752
768
784
672
768
832
752
752
752
656
752
672
704
768
816
736
720
672
736
656
768
784
800
720
736
720
832
768
704
736
736
768
736
800
768
704
640
736
608
768
720
656
736
672
784
672
832
736
752
736
688
768
768
752
720
688
720
784
768
736
768
656
752
736
720
768
816
752
656
720
656
800
640
768
672
784
752
736
768
704
800
656
768
816
688
752
752
768
640
672
640
768
720
640
640
624
672
752
640
720
816
688
704
752
688
736
672
656
688
704
736
704
672
640
688
656
784
736
736
784
752
720
752
784
736
752
752
768
688
624
672
816
672
736
704
688
704
688
784
768
800
656
736
752
784
672
640
752
720
720
736
768
720
672
624
704
752
816
720
768
656
768
640
720
752
672
832
672
720
768
736
736
688
768
816
608
720
736
688
672
672
784
768
800
784
688
768
768
688
752
736
672
784
640
656
784
720
672
752
752
656
784
688
688
832
624
688
768
688
736
752
800
784
736
752
784
704
720
784
656
720
752
688
656
736
640
784
736
656
800
736
672
752
656
768
672
752
672
672
704
736
768
768
816
720
640
656
768
672
640
784
736
704
640
752
736
704
736
704
672
736
768
688
752
800
736
720
736
768
832
640
688
672
672
752
720
816
624
736
720
752
672
752
672
736
768
768
784
768
736
656
784
752
640
736
720
736
704
720
704
752
656
736
688
640
688
736
736
736
736
736
656
640
640
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
416
640
656
800
752
656
800
720
704
672
752
736
800
720
736
704
720
736
816
688
752
736
736
768
672
720
672
720
656
752
736
640
752
752
736
672
720
640
768
752
752
672
688
704
736
704
704
720
736
688
752
672
736
784
768
672
720
656
832
688
656
768
752
752
672
736
704
768
736
736
752
704
768
768
768
688
784
736
736
752
752
672
768
640
752
720
752
768
752
752
720
768
672
688
752
688
752
720
768
752
656
720
704
736
720
688
720
736
736
784
768
688
688
672
816
768
752
736
704
768
768
688
736
672
752
736
672
704
784
672
640
752
688
752
656
752
656
736
784
736
752
688
736
768
704
752
688
736
672
736
704
784
784
816
768
752
736
784
720
752
752
768
736
688
720
752
688
656
736
672
768
752
720
736
736
752
752
784
656
704
768
704
768
768
656
784
736
752
672
688
736
752
704
752
672
736
800
720
704
752
784
784
752
720
720
672
656
720
736
736
720
704
768
736
736
768
784
784
720
640
752
784
784
672
768
784
704
736
768
784
736
736
752
784
736
704
640
768
752
768
688
768
672
720
784
784
688
720
688
752
672
720
752
752
736
784
656
672
656
800
640
784
720
688
656
736
768
656
672
656
720
752
672
752
736
672
704
720
752
656
640
752
720
768
768
736
704
720
752
784
784
752
704
832
656
752
784
688
768
736
752
656
784
736
720
736
768
752
736
688
768
768
656
672
832
768
736
752
704
672
784
672
656
656
768
720
784
752
704
800
640
720
752
752
736
720
720
736
720
720
736
752
800
832
736
816
768
672
720
704
672
704
720
640
816
720
768
720
752
752
752
736
768
768
704
752
752
768
752
768
736
768
736
736
624
736
704
720
720
720
752
672
736
784
672
816
768
784
704
704
720
752
768
720
800
704
672
640
768
752
784
656
720
736
784
752
704
704
768
752
704
720
688
720
688
624
656
640
672
768
736
736
736
784
752
640
720
752
704
768
720
688
736
816
752
752
768
752
736
688
656
784
736
720
672
656
736
784
736
688
752
784
768
672
672
752
752
736
720
752
736
784
720
720
720
688
640
752
672
704
656
736
752
720
704
736
768
736
768
832
768
784
736
784
688
832
752
752
736
752
768
720
656
672
752
784
752
656
736
640
768
720
832
736
720
784
720
672
768
832
656
688
752
720
736
720
736
688
752
688
672
800
736
704
656
768
736
672
752
736
688
752
640
656
720
720
736
736
768
736
704
736
720
768
640
688
736
768
736
720
720
784
672
672
736
784
656
752
624
816
752
736
688
688
816
784
832
752
720
784
752
752
640
736
656
672
688
768
736
784
720
768
736
752
768
736
768
736
656
688
784
736
688
736
720
640
704
752
656
672
768
800
736
768
656
736
688
736
784
688
800
768
704
784
688
768
736
688
688
736
752
720
816
672
656
736
752
752
736
736
752
672
768
704
688
672
688
704
688
672
752
800
704
752
800
752
752
720
704
736
720
688
720
720
768
800
640
752
752
672
656
800
736
752
720
736
768
656
800
736
640
688
656
688
784
672
752
688
688
736
720
736
736
640
800
688
720
624
720
784
720
736
656
752
624
752
752
704
720
784
672
752
736
752
640
688
672
688
672
688
704
752
672
800
752
688
752
672
768
752
784
688
736
752
672
688
656
752
720
752
736
736
656
736
704
736
736
752
688
752
720
656
736
672
768
640
736
656
656
704
656
832
704
736
720
768
800
720
720
704
704
656
752
672
768
752
688
752
736
784
688
720
752
688
672
672
736
720
720
688
800
656
720
672
752
672
752
672
800
672
736
800
720
800
656
752
752
832
752
656
640
800
784
752
672
736
736
752
656
736
672
736
656
720
720
736
752
736
736
640
704
816
768
784
832
672
640
736
816
752
688
672
656
720
736
720
784
816
720
736
688
800
688
640
688
736
672
752
640
736
752
736
656
768
736
736
736
752
736
784
704
704
672
720
736
752
624
720
672
752
720
784
704
752
688
704
768
736
752
656
736
688
704
736
704
720
720
704
832
752
768
672
800
672
704
672
720
752
736
784
784
736
736
688
768
752
672
736
736
688
688
768
656
784
640
736
752
640
720
768
672
752
752
720
816
704
640
800
784
704
736
640
736
640
768
752
752
720
736
752
704
656
736
736
752
736
640
672
816
736
736
672
656
768
752
688
784
752
736
704
640
704
768
672
720
704
656
672
736
704
768
720
736
784
736
672
816
688
784
656
736
816
752
736
688
752
752
736
704
720
816
752
768
704
816
736
848
736
720
656
736
768
656
720
784
784
672
736
800
672
736
656
752
624
784
736
784
768
816
656
672
736
736
768
752
752
704
656
800
624
656
736
720
768
688
656
752
736
752
624
720
768
720
656
704
736
800
752
736
800
736
656
720
816
720
656
800
752
704
752
656
800
736
640
832
688
736
784
752
656
784
752
720
640
752
736
752
640
704
720
736
768
736
720
672
640
736
736
752
688
784
752
656
736
688
816
736
736
768
720
688
768
752
736
656
720
672
768
784
784
736
672
768
688
736
784
736
640
832
736
688
784
736
768
752
704
800
640
736
640
672
736
656
752
736
672
656
704
816
720
752
672
720
752
704
640
816
672
736
688
720
656
768
640
704
720
720
672
768
720
736
784
656
640
704
752
752
672
688
688
720
736
784
656
640
752
736
752
736
832
720
672
704
736
784
672
800
752
752
736
752
752
688
736
656
768
688
720
736
768
672
656
688
752
720
768
768
688
768
736
656
752
688
720
720
736
752
672
784
752
672
768
752
720
768
656
688
800
736
736
736
704
672
736
656
672
784
640
720
736
752
640
752
752
672
688
768
704
752
752
672
672
704
736
672
736
784
752
672
688
736
736
720
672
688
768
832
736
640
752
736
736
656
720
640
704
768
736
656
704
768
736
720
720
720
672
752
688
752
672
656
704
656
816
768
672
672
736
736
672
752
720
752
736
736
752
624
640
768
736
672
768
752
752
672
688
736
672
688
752
752
688
816
784
736
688
672
688
672
720
768
752
720
736
656
656
688
672
672
752
688
720
672
800
736
768
736
624
672
752
768
784
720
736
704
672
688
768
688
640
720
656
704
688
736
736
768
752
768
784
752
736
688
784
672
704
736
768
736
688
704
656
720
752
768
704
752
768
752
768
736
752
784
752
752
688
816
720
688
768
720
656
672
640
640
768
640
720
672
752
768
752
768
752
736
672
736
688
736
704
672
800
720
688
672
640
704
816
736
640
736
816
736
752
736
768
768
768
688
736
752
688
672
720
688
768
752
688
784
768
736
816
720
704
656
784
688
672
784
768
736
672
784
752
704
656
800
656
800
736
768
736
640
704
768
720
736
736
736
752
720
704
736
752
720
704
752
672
736
656
640
720
784
736
832
640
800
752
720
736
736
800
704
736
736
720
720
720
672
704
736
768
688
656
768
768
688
720
656
736
752
752
752
768
752
704
736
768
768
752
672
752
800
672
736
688
784
768
688
672
656
784
752
688
736
768
832
768
768
656
688
656
672
672
768
704
752
672
688
752
672
688
736
736
736
752
736
704
656
736
768
688
672
736
656
736
688
720
816
736
752
640
704
656
736
736
800
768
736
672
752
784
672
720
704
752
720
672
736
720
768
736
784
736
656
752
688
752
800
800
768
672
768
672
752
752
720
736
656
816
736
720
656
720
736
752
736
752
720
720
752
736
752
768
768
720
752
784
624
752
768
752
640
736
688
752
688
640
672
720
672
688
624
672
800
656
656
784
672
640
736
768
832
768
704
736
784
752
720
736
816
752
752
736
656
672
800
752
672
768
704
816
720
768
784
656
752
768
672
784
704
768
736
704
784
752
800
720
688
800
672
656
736
784
736
768
816
752
752
688
688
736
752
688
784
736
832
736
736
704
720
704
736
768
720
656
736
800
672
752
768
752
800
736
784
752
688
784
800
720
704
752
672
768
720
736
800
672
768
768
832
736
720
720
832
640
688
720
656
752
832
720
672
704
736
640
656
720
720
736
784
704
720
656
736
736
704
688
688
720
736
736
768
672
672
672
624
736
736
800
752
736
752
656
704
768
752
688
688
768
768
672
768
752
752
768
816
752
768
768
752
688
784
672
784
688
704
672
640
672
656
752
704
704
736
704
720
752
752
800
640
752
688
704
752
768
736
736
752
800
672
752
736
688
688
704
720
704
704
704
624
768
704
752
736
768
752
736
688
752
768
656
768
720
736
720
736
800
688
800
736
672
752
784
672
704
800
688
672
768
672
736
640
672
688
688
656
736
768
800
672
752
720
720
736
816
736
752
672
720
640
736
720
752
736
656
672
672
656
672
736
848
736
656
704
736
720
720
720
656
640
784
640
672
720
752
784
736
656
784
720
752
720
672
752
736
704
688
688
688
720
736
768
768
720
736
688
832
736
752
752
768
720
720
720
688
736
656
768
800
736
640
736
768
752
784
720
672
784
672
704
736
704
640
640
672
736
624
704
704
816
752
752
768
640
656
656
800
752
752
768
832
768
720
656
736
752
640
784
672
736
688
720
688
768
720
688
800
752
720
768
800
768
832
736
752
688
800
736
736
768
672
816
688
704
720
752
752
736
688
800
688
720
768
784
720
752
784
672
672
784
752
688
784
720
656
704
720
752
816
672
656
736
720
688
672
720
720
800
752
784
720
720
752
704
704
656
736
672
656
656
752
752
656
816
688
752
752
720
784
672
704
736
768
752
752
800
672
752
736
672
672
736
736
720
752
752
688
768
720
672
736
736
704
656
752
768
736
768
736
736
656
656
672
720
800
656
672
688
688
736
736
672
720
720
688
656
656
736
672
624
640
752
784
656
720
784
800
736
784
656
736
736
672
752
640
800
752
768
672
688
736
688
656
784
768
752
784
672
784
640
736
752
752
736
784
784
672
688
832
768
672
720
752
800
688
736
768
736
704
752
752
768
688
720
736
656
656
624
720
720
736
672
704
720
688
672
784
672
752
736
704
704
640
752
784
768
768
720
800
704
704
768
816
672
752
672
688
704
672
688
736
704
736
640
736
656
784
704
800
656
736
720
736
784
752
736
672
720
640
704
736
672
720
640
768
768
640
800
640
704
624
736
752
688
736
720
736
640
656
736
704
736
640
720
736
752
704
736
688
752
656
736
768
784
736
720
752
768
752
688
816
752
768
768
736
800
704
736
784
784
688
752
752
720
768
816
656
768
736
736
736
720
640
800
752
784
736
688
768
752
704
752
768
736
656
656
688
736
752
672
752
672
752
624
672
688
704
656
816
640
736
768
736
736
720
752
672
752
736
656
752
768
784
688
752
736
752
768
768
688
672
704
736
736
768
768
752
688
752
752
688
736
704
736
720
672
656
656
656
816
720
752
768
656
768
784
656
736
736
656
688
768
656
736
704
736
736
752
656
736
752
768
656
736
656
768
768
752
656
672
768
768
752
720
752
656
752
800
688
672
736
688
704
736
720
688
736
736
656
816
768
720
720
736
768
720
768
752
656
736
720
720
752
672
672
736
736
672
752
720
720
784
768
688
784
752
656
832
768
656
704
736
704
704
656
704
752
752
656
736
656
736
768
704
768
656
752
784
736
800
784
784
672
736
752
720
720
688
720
736
832
672
832
736
800
752
688
736
720
720
768
816
640
736
784
736
688
752
736
736
752
768
736
752
752
736
736
768
784
704
672
768
736
720
736
704
736
752
768
656
736
752
672
752
752
736
672
736
720
768
720
720
736
768
752
672
736
752
800
768
768
752
784
688
736
640
752
656
752
784
704
656
704
704
768
656
784
720
720
768
672
768
752
704
704
816
720
720
784
768
672
768
688
752
704
736
672
720
736
784
752
816
736
704
640
704
768
720
784
768
752
736
800
768
752
736
768
720
704
768
688
640
752
640
640
688
736
672
736
624
736
768
688
816
640
784
688
768
768
752
640
736
768
688
656
704
768
672
672
784
768
672
720
752
672
704
752
704
688
768
720
672
800
752
752
624
640
752
640
720
752
768
736
624
720
736
736
768
784
704
752
752
736
768
624
672
624
704
672
672
640
752
736
736
656
752
736
672
688
704
736
752
688
768
640
720
752
800
752
656
672
784
704
656
768
672
800
720
752
656
736
720
784
672
752
768
752
704
752
672
816
752
736
656
768
784
752
688
736
736
736
688
736
752
720
656
736
720
752
656
736
768
656
736
784
704
736
752
736
720
608
720
672
640
736
816
736
656
704
784
704
656
752
736
736
752
752
752
640
656
720
688
672
784
688
720
752
816
752
752
736
752
688
672
720
640
752
736
752
624
640
800
736
656
752
752
640
688
704
720
672
768
672
752
672
688
752
720
752
736
720
736
800
640
752
768
720
656
720
720
752
768
704
656
720
704
720
608
736
752
720
752
640
704
656
720
752
736
768
752
672
768
704
688
720
736
720
768
704
640
672
752
656
736
688
752
768
736
656
720
784
688
672
640
736
672
720
688
736
752
656
656
720
672
672
752
768
688
768
704
688
640
704
752
752
720
768
656
720
752
800
640
704
656
720
704
720
768
736
656
816
752
800
656
720
784
736
672
752
768
768
656
736
672
720
656
672
736
800
656
656
752
672
720
720
800
768
768
736
688
720
704
672
768
768
752
672
656
784
752
704
736
704
720
736
672
704
688
736
640
752
768
736
688
688
672
768
752
768
672
816
640
752
720
752
736
736
704
752
688
736
640
752
800
736
672
768
720
640
688
832
768
672
672
816
752
672
816
640
816
608
752
768
768
752
816
832
768
736
688
688
736
624
768
752
784
752
736
704
704
640
752
640
816
736
768
784
736
720
752
704
816
704
736
640
720
688
752
752
720
688
736
736
656
752
736
800
688
784
736
688
720
704
720
720
704
752
736
720
752
704
640
832
736
800
672
656
672
704
720
656
736
752
672
768
656
688
688
736
752
720
688
768
720
672
720
800
736
656
752
752
816
736
672
672
640
752
624
736
768
784
704
800
768
672
736
672
688
736
720
768
720
720
720
672
752
736
656
752
736
768
784
736
736
704
768
672
784
688
736
752
720
832
736
784
736
720
736
752
688
784
752
752
704
784
752
672
752
752
688
736
688
784
688
736
736
768
736
672
800
656
688
704
736
704
704
784
752
752
688
736
640
672
688
768
656
752
720
704
640
672
640
704
720
752
688
672
768
768
832
752
784
688
672
688
672
752
832
720
784
784
736
688
768
768
784
752
752
640
768
816
720
800
736
768
672
656
752
752
752
768
736
704
768
656
784
656
720
688
768
656
752
720
800
736
720
672
720
736
720
736
656
800
720
720
752
720
624
784
640
672
736
800
752
736
736
672
768
704
656
752
736
736
752
736
736
832
768
768
672
624
752
656
720
672
752
672
736
688
768
800
688
640
768
704
720
720
800
768
752
640
624
784
720
752
752
736
736
752
640
752
752
720
768
752
752
640
656
704
720
736
672
656
672
656
752
752
672
752
768
736
752
656
800
800
736
640
720
752
688
688
672
752
816
752
800
672
736
832
688
752
784
736
752
736
736
768
656
784
656
736
688
720
752
672
640
720
704
656
688
736
672
752
640
672
800
688
704
752
736
720
624
752
672
624
672
704
736
720
640
800
736
800
736
736
800
800
656
672
768
688
720
768
736
816
752
736
848
736
720
752
768
704
784
672
784
784
768
752
800
736
736
720
720
800
736
768
768
672
768
768
656
704
752
688
656
656
752
736
800
720
688
672
752
656
720
752
736
768
720
816
736
752
672
704
800
720
656
736
672
720
704
720
640
752
720
704
736
736
704
688
640
640
752
736
688
688
656
752
736
656
656
752
640
720
784
704
640
704
656
800
656
688
704
736
704
672
736
784
704
784
656
736
784
736
752
688
672
752
672
720
736
640
736
720
720
800
720
752
752
800
736
688
736
688
624
624
736
640
688
720
640
768
752
640
704
672
752
736
736
736
720
672
768
736
672
672
832
752
688
752
768
784
688
800
752
752
688
720
688
720
752
784
768
656
768
720
640
736
784
624
672
752
688
800
672
768
656
672
736
752
768
704
656
768
672
672
704
688
736
752
720
768
720
736
656
784
800
704
624
768
688
736
624
784
736
640
736
704
688
752
800
752
784
800
656
784
720
720
736
672
736
768
752
752
736
656
736
672
672
768
768
704
752
736
752
672
672
736
768
736
768
688
768
656
736
704
736
736
816
624
672
736
640
656
736
720
736
624
656
656
784
736
752
656
672
720
736
720
672
672
800
768
752
720
800
672
672
784
752
640
720
720
752
672
720
752
816
752
832
672
736
768
688
816
656
704
720
800
736
768
736
816
736
752
656
752
688
704
784
720
784
656
672
736
752
848
768
768
768
800
720
720
720
816
656
656
752
736
672
736
656
752
720
752
736
784
640
624
800
832
768
688
752
800
736
752
640
768
720
736
752
816
800
656
768
768
816
752
640
656
736
656
736
640
736
704
800
640
672
800
656
656
672
752
752
720
656
752
672
720
784
736
704
720
816
752
720
768
656
688
800
624
736
800
736
720
640
800
736
784
720
752
656
784
736
704
656
672
736
656
704
752
720
688
672
736
784
656
784
640
640
736
656
704
656
672
720
752
688
768
720
688
704
784
768
752
800
800
752
752
736
720
672
816
784
720
656
752
704
672
688
736
736
752
672
784
704
688
752
752
656
704
736
752
672
720
768
736
752
704
816
736
640
688
768
672
688
736
768
832
736
768
672
768
752
656
768
752
688
640
752
736
784
736
752
848
784
768
784
736
800
704
848
688
688
752
816
752
784
640
752
736
720
768
752
656
816
736
768
752
736
736
816
736
784
656
784
784
656
672
720
720
736
672
640
768
784
656
720
736
688
672
624
704
624
704
752
656
656
768
704
736
704
736
736
656
784
736
736
704
800
672
784
704
736
768
736
752
704
640
784
688
672
624
720
736
752
816
736
688
736
736
736
720
672
656
752
752
672
656
752
672
640
768
672
720
624
688
672
752
720
784
784
688
624
672
640
832
736
736
656
784
704
688
672
784
848
656
736
656
640
768
736
752
672
656
720
640
752
720
736
768
800
752
688
736
704
752
816
752
736
736
720
832
720
704
768
688
672
752
768
736
688
640
752
784
768
736
720
752
672
656
720
720
672
720
720
640
768
752
784
672
704
720
656
752
736
656
752
720
784
784
688
800
768
688
800
640
688
800
640
752
656
816
752
800
768
672
672
688
752
752
688
736
752
768
816
656
768
688
688
816
720
704
752
816
720
752
800
752
640
768
752
752
656
704
704
656
752
688
736
784
800
752
736
720
816
720
752
720
624
752
672
672
736
640
640
784
720
704
784
784
688
720
656
704
656
656
816
752
752
624
688
768
656
752
672
656
768
720
768
800
832
736
752
736
704
816
656
656
752
768
768
720
736
752
688
752
752
704
704
784
720
736
736
720
736
688
672
704
768
752
752
720
752
672
752
768
752
672
752
784
688
720
768
752
672
736
752
656
736
672
688
752
816
752
640
736
752
672
768
752
752
672
816
752
768
752
704
768
752
720
656
752
736
816
704
736
736
656
800
736
752
784
784
736
704
704
704
640
768
656
688
656
640
720
672
816
720
688
752
656
768
656
752
736
688
736
672
720
736
704
704
672
704
768
688
768
688
752
736
768
752
768
752
656
656
656
768
688
720
688
752
736
784
752
672
736
720
704
688
752
752
688
656
720
720
800
688
736
672
688
752
752
704
752
704
736
768
752
784
816
640
752
720
720
640
752
720
736
688
752
688
656
720
720
720
640
656
720
720
720
656
688
768
704
656
720
736
752
624
688
640
736
816
704
768
640
688
640
768
768
656
688
752
656
800
752
832
704
688
752
752
672
752
800
752
752
752
720
800
752
672
752
736
752
768
720
656
752
752
768
736
720
640
816
704
640
752
752
688
656
816
688
704
688
800
720
720
672
736
672
720
752
656
800
656
672
704
736
720
768
656
672
640
752
720
720
656
768
752
752
736
784
656
656
720
720
736
784
752
704
624
816
736
752
672
672
752
656
672
720
768
800
656
672
704
720
720
736
624
736
624
640
672
720
720
640
736
704
768
752
816
656
672
704
720
752
656
832
752
752
656
752
720
624
752
736
752
800
704
736
672
784
736
720
720
800
736
752
736
784
768
768
640
752
752
672
768
816
768
720
720
800
624
704
768
752
720
656
784
704
672
672
656
736
784
816
640
752
816
688
736
688
736
656
672
736
720
736
720
704
624
736
752
688
736
704
672
736
720
720
688
624
784
672
656
672
768
736
752
752
768
736
816
768
752
720
800
736
768
672
768
752
768
816
704
672
752
688
688
640
720
736
688
672
736
752
704
656
800
816
656
656
736
688
768
736
720
752
672
784
768
752
720
736
688
720
656
720
704
784
640
784
736
768
720
688
736
720
736
640
640
736
784
720
768
768
720
720
688
656
656
752
752
752
768
768
752
672
736
736
768
768
784
656
768
704
672
768
800
720
688
688
752
816
752
800
736
768
752
752
736
736
736
688
640
752
736
656
720
688
672
752
736
768
656
768
736
800
688
656
656
768
768
816
736
768
768
688
784
624
720
816
720
672
656
720
640
688
656
816
672
672
752
640
784
736
688
752
768
720
672
736
672
784
752
704
800
656
720
720
752
720
832
720
736
704
736
752
736
672
832
704
768
672
704
688
736
752
752
656
768
672
784
672
720
720
784
720
736
768
784
784
688
688
672
800
736
656
768
704
752
720
752
704
800
752
736
752
752
736
720
752
656
752
720
704
800
656
768
736
672
704
768
656
768
736
736
736
768
752
704
688
736
816
704
752
752
736
752
720
800
672
672
656
752
752
736
720
768
736
672
736
784
784
672
752
752
752
672
672
656
736
736
736
672
816
688
656
688
656
688
720
672
736
752
640
720
640
672
736
720
800
752
656
672
704
768
752
656
656
768
768
832
768
720
752
768
656
688
768
768
816
720
656
768
816
736
768
624
656
688
688
752
672
656
672
768
736
640
736
720
624
720
720
672
736
624
768
688
752
736
656
768
752
720
752
736
720
720
736
640
688
656
800
768
704
656
800
672
704
640
752
736
768
752
752
752
752
784
656
768
736
800
752
832
736
640
672
800
736
768
720
784
752
752
656
720
720
736
768
768
800
656
736
640
736
720
672
656
800
752
640
624
640
752
720
784
768
640
736
672
736
736
704
768
720
736
672
784
720
640
800
752
736
688
768
704
672
784
832
800
736
736
688
720
752
736
768
768
736
736
784
672
624
800
752
768
736
752
784
768
656
656
720
656
688
688
672
736
672
720
736
704
720
720
704
656
720
736
688
656
736
736
704
784
752
736
784
656
752
736
720
768
672
832
784
672
672
784
704
704
672
752
736
752
736
752
768
704
784
736
784
768
752
752
752
784
704
752
752
688
672
768
752
736
720
640
720
672
656
768
752
672
656
832
720
688
752
720
640
704
672
736
688
784
736
736
752
704
768
672
720
624
736
672
768
768
688
752
752
784
736
624
672
688
736
768
656
848
784
800
768
752
752
720
688
752
736
720
768
736
688
784
768
736
752
672
800
752
688
688
800
736
640
752
640
768
656
704
784
736
720
736
736
736
768
720
688
672
672
752
816
624
656
768
736
720
656
720
656
656
800
656
800
672
768
688
752
640
656
752
640
752
704
736
768
720
736
672
736
784
768
752
672
656
784
800
720
752
752
768
816
752
752
768
640
752
688
752
768
736
672
752
816
752
816
688
736
672
736
800
672
672
752
640
736
736
768
752
736
736
736
704
720
672
688
672
736
720
656
752
752
672
800
704
720
752
736
704
704
656
768
656
624
704
736
752
688
752
736
768
624
736
640
768
800
688
768
784
768
704
704
736
768
672
752
752
720
768
752
752
768
752
672
656
720
752
784
640
752
640
656
656
736
720
736
752
736
848
752
736
752
672
800
640
640
816
704
800
736
720
736
768
736
672
736
720
768
736
736
768
816
768
736
688
752
736
720
656
672
688
720
640
672
736
816
704
832
736
704
752
672
688
752
720
704
736
832
768
752
752
688
736
720
752
688
752
800
816
736
736
784
800
768
720
768
800
704
736
720
752
720
640
672
656
736
656
800
736
640
736
800
688
800
672
672
752
656
704
736
704
720
640
752
752
784
752
752
768
736
688
752
672
704
656
784
768
736
768
768
752
736
672
800
672
656
784
736
720
640
736
752
736
736
752
736
640
736
736
672
688
768
752
720
768
736
736
736
688
736
656
672
736
704
736
720
720
704
752
688
608
672
656
736
736
784
656
768
688
752
752
672
736
768
736
720
672
736
752
656
656
720
720
800
656
720
752
816
640
720
624
752
736
736
704
768
736
688
752
768
784
816
640
672
672
656
672
720
720
784
752
784
816
736
736
736
784
832
736
736
608
656
704
640
768
656
768
624
640
720
784
672
656
720
688
736
768
752
672
672
688
752
752
672
672
736
672
640
784
704
736
752
784
752
752
784
752
656
704
672
672
752
816
736
784
752
768
736
752
816
672
704
688
800
688
720
736
752
640
752
688
784
736
672
784
752
752
656
672
704
672
736
752
640
720
704
672
752
768
768
656
752
816
752
688
656
784
688
672
768
656
784
784
784
736
704
656
720
752
816
752
720
752
688
736
768
736
752
704
784
720
816
656
656
768
640
640
672
688
736
672
800
656
672
768
720
672
704
752
736
656
736
784
656
688
640
624
800
736
720
736
752
848
752
672
656
752
784
736
784
640
768
656
768
768
736
752
656
800
720
736
672
704
672
720
752
752
768
640
768
832
752
784
752
784
688
656
752
752
768
816
752
672
784
656
752
800
784
672
736
768
720
672
752
704
720
624
736
736
672
656
640
768
640
768
768
656
672
656
720
736
704
768
672
784
640
752
672
624
800
752
768
656
752
736
720
720
736
688
704
672
752
768
768
656
816
768
752
800
736
752
832
736
720
736
768
720
768
736
768
688
672
752
784
672
640
720
800
720
752
736
640
736
704
656
736
688
672
656
672
704
736
688
656
704
736
720
672
672
704
672
736
736
752
672
720
672
656
736
704
720
656
704
720
736
640
720
736
640
672
768
736
688
752
768
752
752
688
720
752
720
816
640
672
736
800
768
848
720
720
736
768
768
768
688
624
768
736
768
688
656
768
816
672
640
784
720
768
784
720
736
656
672
816
688
768
736
672
736
704
672
752
672
752
656
720
752
768
736
672
656
672
752
640
736
752
752
752
736
720
656
672
672
688
736
736
720
688
752
736
800
656
800
752
752
672
704
736
752
752
640
768
720
640
720
736
720
656
672
672
752
752
752
752
736
720
800
784
688
720
672
752
736
704
704
784
768
736
720
816
752
736
704
672
784
752
752
736
800
720
736
672
704
784
656
816
688
752
720
736
688
720
656
816
656
640
656
688
800
688
752
736
736
768
720
672
752
688
736
720
672
688
752
832
720
736
784
720
752
752
736
752
656
704
704
624
768
656
752
816
752
752
784
784
752
784
720
672
752
688
720
720
752
752
688
720
752
768
752
656
736
736
784
624
752
688
768
752
656
752
688
656
752
736
752
784
672
688
736
752
656
672
656
656
768
736
672
736
672
752
656
736
768
736
768
656
656
720
784
784
768
816
624
752
672
688
736
672
704
704
672
736
720
784
752
672
672
688
752
736
800
736
768
640
736
736
752
656
656
624
688
688
736
640
672
784
784
768
672
816
752
688
736
736
672
656
688
656
672
672
624
704
720
672
624
656
672
768
656
832
656
752
720
768
656
736
752
768
656
736
656
688
752
784
624
736
688
688
736
736
720
736
752
736
672
688
640
752
672
688
736
752
656
736
752
752
720
768
736
752
752
784
656
672
656
736
672
768
752
816
752
752
752
784
704
736
672
688
688
736
640
704
736
736
656
784
656
784
720
768
736
736
768
736
752
688
672
688
720
768
656
736
736
768
656
656
768
720
720
768
704
672
704
672
704
688
656
672
752
720
672
704
672
656
704
640
688
720
752
704
672
768
624
768
752
688
720
752
768
704
768
768
768
768
768
752
768
752
800
752
672
736
704
736
752
720
784
640
736
720
752
784
672
832
752
736
800
752
704
768
640
688
672
768
768
720
672
752
656
752
736
608
624
768
736
704
752
688
736
752
656
656
688
688
752
736
768
752
672
672
720
800
720
672
688
768
752
752
672
752
752
656
736
752
800
736
656
768
768
752
704
704
704
656
720
752
736
720
704
672
656
720
656
720
736
624
752
720
688
656
736
704
752
720
704
752
672
656
656
752
720
720
688
720
736
752
768
640
736
672
800
816
656
640
672
784
832
704
752
768
768
752
768
752
816
752
784
784
736
768
688
768
752
752
768
672
768
768
736
736
688
736
672
736
752
736
736
656
672
816
736
816
608
784
720
720
704
752
752
736
832
624
736
752
752
752
640
736
768
736
752
672
784
784
656
656
672
672
656
624
784
832
736
688
800
720
656
752
816
704
752
736
752
816
688
688
784
704
704
736
656
816
736
768
784
816
768
656
816
736
752
832
704
768
752
720
672
720
752
736
752
736
720
736
768
768
656
688
736
608
656
736
672
656
800
736
752
752
736
688
784
688
720
752
752
704
608
768
640
800
752
736
672
752
640
688
784
752
736
704
672
736
768
768
752
800
784
672
768
784
800
752
640
688
656
720
736
752
736
640
832
704
704
768
784
768
720
672
672
752
704
736
752
752
752
736
672
656
624
656
752
688
736
784
736
736
672
736
784
752
672
800
784
688
736
736
656
768
752
656
768
768
736
752
768
688
784
720
640
768
800
720
736
752
704
720
768
624
752
784
736
752
640
768
768
672
656
736
720
816
720
752
736
736
672
752
784
800
656
656
720
800
768
720
624
784
704
736
624
640
768
720
640
752
640
720
656
720
800
672
736
768
688
672
672
752
768
752
640
640
688
656
784
736
720
736
704
736
656
752
752
672
768
736
800
720
784
688
704
768
720
704
752
816
656
704
672
736
784
752
704
672
736
704
752
784
752
736
752
688
832
768
656
736
688
704
640
736
656
688
752
736
720
720
672
736
688
768
704
768
784
752
720
672
720
768
736
672
784
736
784
768
656
720
848
624
752
800
688
656
720
752
688
768
640
736
720
752
768
768
768
752
672
672
704
800
688
688
752
736
752
672
752
752
768
752
704
688
704
672
768
736
672
672
752
640
784
768
720
624
736
656
720
672
816
752
656
656
736
768
752
672
736
752
736
800
768
688
752
720
736
656
720
736
656
640
752
736
752
752
704
768
656
688
704
656
688
704
720
672
816
752
720
736
624
688
736
736
656
784
736
800
736
768
816
720
640
816
800
656
736
736
736
720
640
752
768
688
640
736
768
752
768
688
656
656
752
800
656
672
800
720
656
752
704
736
704
768
736
784
752
704
768
752
800
768
640
752
736
800
672
752
736
768
720
656
736
768
736
720
672
736
784
720
784
688
784
688
768
752
704
688
800
752
752
752
640
752
784
656
720
736
736
752
752
720
736
784
656
816
704
768
640
688
720
720
672
816
656
768
768
656
720
752
768
768
672
656
752
656
672
624
736
672
800
784
752
768
768
768
752
672
768
816
640
752
768
640
736
656
816
640
752
752
752
768
688
784
736
768
768
768
768
704
752
720
736
736
752
800
720
752
736
800
736
736
752
656
752
624
688
768
656
752
752
736
688
752
704
736
656
688
784
736
672
656
736
784
752
672
656
688
800
784
768
752
784
704
752
768
768
768
720
768
720
768
784
752
640
752
784
704
800
752
784
736
736
736
640
704
768
688
752
672
640
672
752
752
752
720
720
736
672
784
688
704
624
720
752
768
784
656
736
800
672
688
784
720
640
784
688
768
768
768
720
736
656
736
656
768
720
768
736
736
752
768
720
752
752
736
704
640
672
768
736
720
736
672
816
720
704
704
752
736
688
752
832
672
688
784
688
656
752
816
672
768
816
736
704
752
656
720
624
672
752
736
736
768
656
752
784
672
752
784
704
816
720
656
768
688
672
656
752
784
672
608
720
656
768
704
800
672
768
784
688
736
720
688
640
800
752
752
704
672
672
672
736
672
736
704
784
736
720
768
768
736
768
752
736
752
784
672
768
784
720
672
720
736
672
672
752
784
656
720
672
752
656
720
752
816
656
656
752
672
768
656
736
752
736
720
656
656
704
784
688
672
704
736
736
688
768
720
688
672
752
640
784
736
656
672
784
736
656
752
752
784
768
672
816
768
640
784
672
752
720
704
752
768
752
752
768
672
640
736
752
800
752
720
720
736
720
768
768
768
752
672
640
720
688
720
816
800
736
688
736
736
704
752
752
672
672
768
656
624
736
768
752
752
736
736
800
768
688
688
736
736
752
752
816
736
688
736
720
752
656
688
816
752
640
752
816
688
720
688
656
704
672
768
752
672
752
768
672
768
768
720
656
672
736
656
752
720
672
704
816
736
752
672
640
640
736
816
640
768
672
768
720
720
704
704
768
736
688
752
752
720
752
816
736
784
768
688
736
768
784
688
672
752
704
784
720
784
672
656
656
736
736
784
672
768
720
752
784
752
752
688
752
704
752
656
768
784
656
752
736
752
736
656
752
736
704
752
736
752
672
736
672
752
656
768
752
736
720
768
784
832
736
816
656
736
784
752
656
672
768
736
752
640
688
672
816
720
752
672
768
800
688
688
688
752
768
688
704
768
720
752
800
752
784
624
640
816
704
640
800
720
832
752
720
640
688
656
736
736
672
736
816
720
704
704
656
672
784
768
768
672
736
704
656
736
688
736
688
784
784
688
720
736
688
752
704
640
768
672
752
736
640
720
640
752
752
784
720
704
688
768
688
672
768
752
768
720
800
768
640
752
768
704
736
752
768
704
768
720
768
736
752
784
656
720
640
784
736
672
656
688
672
688
736
752
768
656
672
656
752
736
752
784
672
736
752
752
656
752
800
800
768
736
752
768
720
672
752
752
752
736
624
752
640
688
736
752
736
736
736
704
704
752
656
784
704
832
656
768
688
752
640
736
784
800
736
656
752
688
752
784
640
720
736
656
672
672
656
736
672
784
768
720
704
752
640
720
704
720
640
656
768
784
720
752
672
704
704
800
752
704
656
688
736
816
768
704
720
784
832
688
688
704
656
704
752
784
624
672
736
768
704
784
752
768
816
688
720
832
704
816
672
640
720
752
672
800
768
704
688
752
656
768
832
720
768
688
752
704
752
800
672
752
752
768
720
752
672
656
736
656
656
720
752
672
784
704
736
640
768
736
640
608
736
688
752
736
704
752
704
800
752
688
640
656
752
736
736
752
672
656
736
768
768
736
768
752
704
736
656
688
688
688
656
752
736
784
688
688
784
768
800
752
640
800
704
720
752
768
752
768
624
656
736
752
736
736
656
752
736
736
656
768
752
672
704
672
656
736
640
800
640
704
624
768
768
752
640
784
784
736
672
752
784
752
800
768
720
768
752
640
768
672
720
752
688
656
752
672
768
720
736
720
720
672
640
736
704
672
720
688
752
704
656
752
656
720
672
688
768
736
656
640
768
688
784
720
784
784
784
720
768
656
832
752
752
672
720
672
752
800
752
736
656
768
752
720
640
752
768
656
672
832
656
752
768
768
752
624
656
800
720
768
768
784
784
816
720
768
688
688
752
752
672
704
688
704
752
752
672
768
752
736
688
784
656
624
736
784
736
768
624
784
624
704
656
752
736
656
752
768
624
736
848
752
768
800
768
768
672
640
720
688
704
816
736
736
768
704
672
768
704
704
720
752
672
784
784
752
816
688
720
720
800
768
656
720
784
784
768
752
656
704
768
752
736
688
736
768
736
672
784
800
736
656
624
688
704
720
736
736
672
816
752
720
656
736
688
768
784
672
656
784
736
736
752
752
768
672
768
752
736
752
704
784
656
800
720
752
736
688
672
688
736
768
656
816
640
656
672
784
752
752
752
784
816
720
688
720
736
720
752
832
736
688
688
752
736
752
656
720
752
656
736
656
656
736
720
752
656
720
656
720
736
656
688
688
736
704
768
624
720
752
672
752
736
752
672
640
720
672
784
752
768
832
736
768
720
672
736
784
720
720
800
752
800
752
688
752
768
736
784
736
768
784
720
624
752
688
752
752
784
784
752
672
800
720
816
656
688
784
768
816
624
720
624
720
752
752
752
688
752
624
736
720
624
752
704
672
768
800
752
688
752
768
784
816
640
688
640
768
736
656
752
704
736
640
720
736
672
784
752
736
752
656
688
752
624
736
704
736
784
752
704
752
800
656
768
752
736
672
736
768
656
624
752
656
656
800
736
736
640
768
704
736
816
768
752
832
736
736
752
752
752
720
720
736
640
672
736
656
752
736
752
736
768
752
704
736
720
720
672
656
736
752
688
736
672
672
752
688
704
832
688
656
752
672
656
768
672
624
752
704
816
656
800
736
848
784
656
656
672
720
768
752
640
656
672
768
752
784
688
656
736
704
784
736
736
640
624
640
672
752
736
624
624
784
720
640
640
768
672
624
752
688
752
736
704
672
704
656
784
672
752
752
752
768
752
672
640
752
752
656
720
768
768
720
736
816
816
752
768
752
688
752
656
800
768
784
800
656
736
640
736
672
656
672
640
656
736
720
800
752
752
720
720
672
768
768
688
816
752
688
768
768
768
704
736
672
768
736
656
720
640
688
800
736
768
768
768
672
672
736
736
656
704
672
752
672
768
672
720
752
704
736
688
672
704
752
752
752
736
656
752
688
736
736
752
704
720
752
768
672
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
400
736
736
672
720
704
752
784
656
800
800
640
704
736
720
704
688
768
672
720
688
800
768
640
688
640
640
784
656
640
720
720
752
688
752
640
752
736
736
752
784
800
752
752
736
736
720
736
672
736
688
688
704
704
704
720
672
752
672
768
768
640
752
816
688
736
672
752
752
720
784
736
688
640
752
720
752
672
752
768
656
704
688
736
672
736
672
768
736
736
736
704
752
720
720
720
736
784
720
736
784
640
816
624
800
720
832
768
720
752
704
720
720
688
768
768
704
816
752
688
688
704
768
736
656
768
720
752
720
768
720
672
736
752
720
736
672
768
672
656
768
752
800
720
768
720
688
704
752
688
800
720
688
720
640
720
736
672
656
768
720
640
768
656
688
736
736
656
752
704
672
688
720
768
784
656
848
704
736
784
688
688
656
704
736
752
736
800
768
736
768
720
752
752
640
768
704
704
752
752
800
720
752
704
752
656
752
672
752
752
720
752
752
816
736
800
672
736
688
640
736
752
736
688
640
752
656
720
784
768
640
816
704
736
752
736
656
736
688
768
832
656
736
752
768
768
752
736
768
736
656
720
640
640
752
768
672
688
752
784
800
672
800
784
784
672
672
720
784
752
656
672
752
752
768
736
688
672
688
752
720
752
704
720
656
672
768
816
688
656
768
816
752
720
736
672
736
720
752
672
752
688
704
656
784
752
736
800
656
736
736
736
784
688
688
688
640
720
752
736
736
752
784
672
736
720
656
816
752
688
656
784
768
656
736
752
736
736
640
768
704
736
784
720
640
672
736
704
736
752
816
704
640
752
656
784
736
688
672
784
672
688
736
688
736
640
816
752
704
768
736
784
624
752
800
736
768
688
768
736
672
800
736
736
672
768
768
768
672
656
800
768
736
624
688
752
768
688
656
752
736
784
832
752
752
736
688
736
624
656
816
672
736
640
800
656
752
784
832
720
736
800
752
720
688
688
656
720
672
672
640
720
768
752
656
656
672
752
816
688
688
752
816
672
720
688
672
752
720
752
736
768
672
752
784
736
752
672
688
800
752
784
736
656
704
704
736
672
800
736
784
656
736
816
672
768
784
800
672
720
672
736
752
672
704
784
736
720
768
832
736
656
736
704
736
784
720
736
720
720
624
752
720
736
672
768
720
672
752
752
672
672
768
736
720
640
784
656
688
784
704
704
752
704
752
736
688
768
688
784
752
736
768
672
736
736
736
752
832
672
688
736
768
640
768
816
736
832
752
816
784
672
624
768
720
624
752
752
752
688
768
752
784
752
800
672
720
672
656
736
720
816
704
736
768
752
704
672
704
704
784
720
752
816
736
720
656
672
672
752
656
752
784
736
768
784
656
672
784
800
656
752
784
640
784
656
768
736
768
768
688
640
720
720
752
752
752
752
848
656
688
688
656
768
688
752
704
656
752
672
672
640
752
720
704
688
736
784
768
736
720
784
752
704
768
752
752
640
752
736
752
768
656
688
720
672
640
800
816
720
768
672
672
768
752
784
672
736
752
656
704
736
800
720
752
784
640
736
672
784
688
736
720
816
656
768
752
656
800
640
688
752
672
672
784
736
656
736
656
784
752
720
640
752
640
624
704
688
672
784
752
656
656
624
752
736
640
672
640
688
672
736
640
640
736
720
816
656
752
736
800
752
672
736
672
784
704
672
800
704
688
688
768
752
720
688
736
800
736
800
768
688
752
752
688
768
688
720
720
816
656
672
768
752
768
656
832
688
736
672
720
752
800
720
736
752
736
688
720
752
672
720
656
768
832
720
768
768
704
768
752
672
752
656
736
752
688
672
752
752
752
752
752
720
768
800
832
672
672
752
768
656
688
768
688
656
656
768
784
656
752
720
656
768
720
768
800
784
640
672
736
752
736
736
752
752
672
688
656
736
784
672
720
736
720
656
736
688
784
752
640
736
640
624
688
736
704
768
752
656
816
768
656
784
800
688
672
784
752
688
736
688
704
752
720
736
768
736
688
736
656
736
736
704
752
736
816
736
720
752
800
832
736
736
624
768
704
752
752
768
672
720
736
720
656
720
752
768
656
752
704
736
656
736
736
784
752
656
752
720
752
720
768
704
640
752
688
656
640
784
688
720
672
736
800
768
656
800
688
768
672
752
672
736
640
720
720
832
656
800
688
752
672
768
784
768
688
656
736
720
688
704
624
768
768
656
720
816
736
768
752
656
752
736
704
800
768
672
704
656
832
768
640
736
784
640
768
720
720
704
704
720
720
640
672
768
672
720
720
720
672
752
736
688
768
768
736
816
800
640
672
688
736
848
752
672
800
656
672
656
816
672
736
736
672
720
672
688
688
720
816
688
768
640
736
768
784
672
752
688
752
704
704
736
672
704
768
736
704
752
688
768
736
640
672
656
752
720
736
688
768
656
656
720
752
720
688
768
736
768
816
688
720
752
768
768
640
752
752
656
832
752
752
736
736
656
672
640
768
672
768
656
656
656
688
672
768
752
736
624
704
736
752
752
752
752
768
784
672
752
768
656
816
752
640
656
752
784
736
784
656
688
720
752
768
800
640
640
768
736
656
704
752
688
736
720
768
720
736
736
720
640
736
752
752
784
656
704
768
832
784
736
752
768
688
752
736
704
720
784
736
736
640
688
704
624
720
736
656
720
752
768
736
720
816
784
672
720
736
784
736
800
720
656
640
784
672
816
720
784
816
736
752
704
752
736
720
736
768
736
736
752
640
784
784
736
704
752
672
640
688
672
688
720
752
720
656
672
800
672
704
640
768
672
832
640
800
752
752
752
736
752
752
752
688
656
688
752
736
688
752
672
720
816
752
816
768
688
736
704
736
656
736
736
688
672
768
624
800
720
672
704
784
752
720
640
688
768
768
736
736
816
736
784
752
688
736
800
720
752
704
784
768
720
768
752
688
656
832
608
672
704
736
736
704
656
656
752
752
736
704
720
656
736
736
640
752
736
736
736
768
736
656
768
736
848
720
672
656
720
768
720
800
784
688
640
768
752
704
672
672
768
752
736
752
720
720
720
768
688
752
656
784
736
768
656
800
736
832
656
672
736
720
736
768
768
736
704
736
768
656
768
720
672
704
768
672
688
736
672
752
752
688
752
720
768
736
720
768
768
752
736
752
688
656
752
656
800
736
736
720
672
768
656
720
752
736
688
816
752
816
752
752
672
752
768
672
736
704
752
752
624
784
736
768
784
752
768
656
704
704
736
688
784
688
768
656
784
672
656
832
656
736
688
800
704
816
736
656
736
784
832
624
656
704
736
672
720
752
736
672
816
752
816
736
704
816
656
688
736
720
816
656
752
736
720
736
720
736
720
624
672
672
736
752
784
624
752
752
768
672
784
656
784
736
832
768
768
656
672
656
768
800
736
688
720
672
736
736
752
768
752
752
688
768
768
656
800
672
752
736
736
656
720
736
816
704
736
816
624
736
736
672
816
736
736
672
736
752
736
768
688
672
768
752
736
656
656
736
800
672
768
752
672
736
656
720
768
688
736
736
752
736
736
736
720
640
752
672
736
768
752
672
736
736
640
784
752
816
736
784
688
832
752
752
736
736
704
736
720
736
704
752
736
736
768
736
672
736
784
672
656
736
784
656
832
752
704
640
640
768
720
736
736
752
720
784
656
768
768
800
656
624
736
752
608
672
736
720
736
720
672
752
816
672
736
752
768
656
736
736
672
672
752
688
656
736
752
768
736
768
768
752
640
720
784
752
800
848
736
720
736
720
768
656
752
752
752
720
736
784
752
752
672
688
688
752
672
720
752
768
800
656
672
672
704
736
768
752
688
736
720
672
784
800
720
672
672
752
752
720
640
736
720
832
656
736
704
752
752
704
800
608
656
752
768
688
736
768
736
672
672
768
704
704
752
704
672
656
752
640
752
752
672
688
816
672
800
640
736
736
752
736
704
800
656
768
688
624
736
624
704
624
736
768
720
752
640
704
672
704
752
768
736
624
720
656
816
720
720
752
720
656
768
672
736
704
752
752
704
720
736
656
768
752
688
704
816
736
768
768
784
704
736
752
752
752
640
672
704
672
656
672
656
752
688
752
704
752
736
656
656
688
752
832
688
752
752
736
672
640
752
640
704
672
736
752
752
704
656
624
784
816
624
768
736
736
752
736
688
704
752
736
816
784
752
752
752
784
720
720
688
688
832
816
752
656
656
672
704
656
800
800
752
656
784
688
656
752
752
768
656
672
784
816
640
784
784
800
720
752
656
784
720
688
768
768
704
656
688
736
736
672
720
736
752
688
736
704
736
736
752
736
672
640
672
832
752
768
672
752
752
704
672
768
672
752
784
832
656
736
704
672
816
704
736
784
768
784
720
800
784
752
688
688
800
640
768
672
672
784
656
672
800
656
720
752
816
752
784
656
752
752
784
752
752
736
832
752
784
752
784
784
736
768
624
752
784
672
784
736
752
640
720
672
736
688
720
688
736
768
736
816
752
704
752
720
640
688
656
720
736
656
752
688
784
736
752
816
704
720
768
688
752
736
752
736
672
704
752
656
752
672
672
672
720
672
640
656
640
784
768
672
672
736
736
752
640
656
688
656
768
784
736
736
720
752
656
704
752
768
816
736
752
736
672
672
736
640
672
672
768
832
752
800
752
672
736
656
752
672
752
640
752
656
784
720
768
752
640
704
752
720
656
752
752
736
752
768
736
784
720
752
704
704
736
720
656
736
752
768
768
800
752
752
640
736
672
832
656
816
736
752
672
752
656
736
752
736
656
736
720
752
720
672
656
736
736
752
736
656
768
704
688
656
784
608
784
624
688
640
784
656
816
752
688
672
672
688
752
672
688
656
752
736
672
656
640
784
816
704
736
768
768
672
768
656
768
720
720
736
688
672
752
720
752
736
624
656
672
656
720
640
752
656
752
688
752
640
688
656
688
768
736
640
672
656
688
784
672
672
768
768
736
640
672
672
752
736
752
688
816
752
752
800
752
736
720
640
768
704
768
784
816
672
752
656
672
736
736
752
800
736
768
768
736
752
656
736
704
784
752
720
752
688
688
768
736
736
672
624
768
736
672
736
720
736
688
688
768
736
736
720
720
736
672
672
672
704
640
672
736
752
592
768
800
656
736
736
688
800
688
768
704
752
704
752
784
672
768
768
752
784
720
816
656
784
768
768
656
736
768
608
768
784
640
688
768
784
672
752
752
736
768
640
656
832
752
752
784
720
704
784
736
656
784
656
640
752
640
768
816
752
656
720
656
784
688
672
784
768
736
784
656
736
688
768
672
752
640
736
736
752
784
768
736
640
768
704
656
752
752
752
752
736
800
768
816
752
720
688
704
672
672
832
736
736
768
640
704
768
688
672
768
752
624
672
752
672
672
656
752
688
688
672
624
672
720
736
752
736
784
736
640
752
768
736
752
720
736
656
656
656
720
688
816
720
736
768
672
816
768
656
752
768
752
752
656
704
672
704
736
688
736
688
656
688
672
784
688
688
736
704
704
688
688
768
672
784
688
832
752
720
768
672
656
688
800
752
656
768
720
672
784
784
736
672
640
736
704
752
768
736
736
672
672
752
640
768
816
736
752
768
736
656
736
784
736
656
752
672
736
688
768
704
736
656
704
656
688
704
832
768
768
672
784
752
784
752
736
704
736
736
800
720
768
688
768
816
736
752
768
656
640
704
656
736
672
752
640
656
736
752
752
736
736
752
768
736
640
624
688
720
672
720
656
752
736
688
656
736
672
752
768
640
672
784
688
688
640
752
640
768
768
800
672
768
768
720
752
672
768
784
768
752
672
800
752
656
656
768
656
656
672
656
720
688
736
784
768
720
656
656
752
768
736
720
736
752
640
656
640
736
656
704
656
688
720
672
640
720
736
736
704
736
768
800
768
800
752
736
736
768
768
640
768
736
672
720
784
752
720
784
640
672
656
752
752
720
768
752
752
752
848
752
640
720
752
752
752
736
688
720
736
688
816
720
784
752
752
688
752
688
688
736
752
656
752
784
752
768
720
784
704
736
688
752
656
736
752
672
640
752
640
672
752
816
752
736
656
720
768
736
656
736
656
656
720
736
688
736
752
672
832
768
656
688
784
672
752
752
736
784
752
736
768
816
752
704
656
768
784
752
656
736
704
752
768
768
656
736
784
816
688
768
720
720
816
672
640
704
672
752
656
752
688
688
752
768
752
752
640
736
752
784
736
656
624
736
768
720
768
704
768
752
672
736
752
752
848
752
816
672
752
672
672
672
672
720
752
768
784
784
752
736
640
752
752
720
752
656
784
672
736
736
688
704
688
640
752
672
752
768
736
688
656
656
688
784
704
624
752
736
656
656
752
752
672
656
752
736
656
656
672
704
752
656
624
672
784
656
720
656
816
656
672
832
720
672
736
768
816
656
720
736
784
672
768
752
640
784
784
672
704
720
736
656
672
752
640
672
752
768
672
768
800
672
656
656
656
752
704
688
784
640
768
752
736
752
720
752
736
784
784
736
816
736
672
704
672
768
704
736
768
688
784
736
736
720
688
768
800
640
672
752
784
720
640
672
768
752
640
768
752
752
752
688
768
768
672
752
784
736
656
640
752
768
736
640
752
656
816
768
752
768
720
720
704
688
736
656
656
736
656
736
752
752
640
768
768
736
720
720
720
768
768
720
752
736
736
720
768
752
720
704
656
752
736
672
752
720
720
800
800
752
736
672
768
720
720
736
720
720
688
672
752
784
672
800
784
752
752
768
640
736
752
656
784
656
768
704
688
768
800
640
688
784
672
752
768
784
768
656
704
656
720
752
800
832
736
784
720
752
656
720
784
720
752
736
656
688
848
720
736
736
672
752
672
768
672
720
672
656
688
752
704
656
720
720
736
768
736
704
736
752
832
656
688
752
768
752
656
656
672
640
752
784
752
768
688
704
752
656
752
672
816
656
752
720
688
768
752
752
784
736
672
768
736
752
752
704
672
736
768
752
720
672
720
816
672
768
672
768
688
752
688
752
704
656
688
800
688
768
768
752
768
752
736
736
720
736
768
688
672
752
672
736
768
752
720
656
784
736
768
784
688
784
736
672
768
816
752
720
736
736
640
784
720
832
736
784
752
768
736
768
672
720
656
672
640
656
672
736
768
784
672
768
656
768
784
640
800
688
672
736
656
768
688
656
768
784
736
720
752
672
688
768
832
768
768
768
688
752
720
672
752
752
704
752
672
752
768
768
672
784
752
656
736
656
672
640
688
720
784
656
688
656
736
720
768
656
720
656
720
768
640
768
704
720
736
752
656
672
736
816
784
752
720
784
752
672
688
736
752
736
736
800
656
720
656
688
784
720
656
752
816
656
656
672
752
752
656
768
656
752
736
784
768
752
688
704
720
736
656
752
736
656
656
768
672
672
720
800
752
768
752
672
752
688
688
656
752
768
640
640
672
752
752
672
816
752
688
704
672
736
768
640
736
736
640
720
768
672
672
832
752
720
672
720
672
768
640
752
656
688
672
656
752
640
720
768
704
656
688
768
752
672
672
640
656
672
768
736
752
672
800
688
800
736
800
720
784
736
656
736
656
736
720
752
736
720
720
704
720
624
736
656
656
640
688
672
768
736
704
784
816
736
752
768
752
736
688
736
736
656
672
768
720
768
672
688
752
720
752
704
656
816
656
736
656
640
752
752
752
640
816
752
720
688
736
752
800
752
752
672
768
736
768
656
704
752
624
688
800
752
752
704
640
736
816
672
784
752
640
752
816
688
752
688
656
672
672
752
704
752
736
688
688
672
704
816
656
736
752
720
736
768
656
784
784
752
768
640
752
768
672
752
672
640
784
768
752
704
752
688
720
736
672
720
656
736
800
688
768
752
768
816
752
752
752
768
800
720
656
672
720
704
736
816
640
816
656
688
752
784
656
640
672
640
704
752
704
800
752
752
736
656
752
672
736
656
688
768
736
736
752
736
656
816
768
688
736
752
736
752
752
656
736
736
816
752
768
752
656
832
656
688
752
704
704
640
704
768
672
704
736
784
704
640
752
736
816
656
768
752
736
752
672
784
736
736
688
688
752
784
736
736
656
688
736
768
672
656
736
768
656
640
656
736
736
624
672
720
752
736
800
672
736
640
784
640
736
736
752
672
736
768
688
784
736
768
640
784
752
656
720
768
704
672
736
720
720
816
640
688
704
736
688
720
752
768
688
720
656
752
784
672
768
752
784
656
688
720
752
736
608
816
736
720
720
640
688
672
720
640
704
752
672
736
672
736
752
816
768
736
784
816
736
688
656
784
656
768
736
752
720
704
768
656
672
752
672
688
672
752
704
800
736
768
752
752
784
704
736
800
656
704
624
752
736
720
720
832
752
736
784
752
640
768
752
672
752
752
768
720
688
752
736
784
768
736
656
672
816
736
672
768
720
768
704
768
720
784
720
736
768
736
816
672
672
768
816
736
640
784
752
640
736
752
736
752
656
800
768
768
816
816
656
704
768
720
672
720
768
752
656
736
752
784
768
672
736
752
752
752
736
720
720
736
736
752
800
736
624
784
736
704
752
784
768
640
752
752
752
688
640
640
768
768
640
736
768
752
640
800
768
752
768
752
736
752
736
688
752
736
768
704
752
624
736
768
784
752
704
656
752
736
800
768
768
736
784
832
704
736
752
816
720
736
736
736
672
720
736
736
736
752
752
704
736
752
704
784
736
784
736
672
768
688
720
688
672
688
640
768
752
736
752
640
640
784
656
656
752
720
752
768
752
672
752
752
752
656
720
768
768
656
736
704
736
816
672
768
688
688
784
752
624
672
752
768
624
704
752
672
800
672
688
640
656
736
656
752
688
624
640
656
752
736
672
672
784
752
736
768
704
736
736
640
704
672
656
752
640
704
640
752
688
672
736
768
624
736
752
768
752
752
784
736
784
704
688
656
752
752
624
752
656
784
640
736
768
736
656
736
736
816
720
688
672
704
736
768
720
784
736
752
720
624
752
672
656
784
640
656
768
736
832
624
768
720
816
736
752
752
752
672
688
736
672
688
672
640
784
640
784
768
704
688
752
656
656
640
752
688
672
656
720
784
624
800
656
736
736
736
752
672
736
736
640
736
672
800
736
752
704
656
752
768
672
752
640
720
768
704
736
768
752
688
720
704
736
656
752
784
688
736
752
736
736
656
720
768
800
736
640
688
672
736
768
688
672
672
640
720
784
656
672
736
752
800
672
784
784
688
720
672
768
736
720
720
736
752
720
672
656
768
624
688
736
640
752
752
752
816
720
720
800
752
672
816
624
768
688
688
752
768
736
640
704
640
720
768
752
640
736
704
672
672
752
752
688
768
752
736
768
736
768
656
752
672
768
768
752
672
752
672
768
800
736
736
752
784
640
800
736
752
768
816
688
672
736
784
752
800
656
640
688
768
752
784
672
736
672
768
640
736
688
768
736
752
752
736
656
640
768
752
752
752
736
672
752
720
768
768
736
672
768
752
832
752
768
752
736
720
752
688
704
736
720
672
752
656
672
752
784
768
720
784
752
736
784
768
656
752
672
752
768
720
800
752
720
672
768
624
816
656
736
656
656
736
688
768
672
736
784
736
736
688
640
720
672
752
624
736
784
784
656
752
688
768
752
736
768
736
640
768
768
640
736
784
656
768
656
768
704
736
752
656
656
624
752
624
672
656
672
752
752
752
752
784
656
752
720
688
736
720
656
800
816
768
656
784
720
640
656
800
704
752
656
720
640
752
752
752
640
720
720
640
784
672
640
640
752
640
624
752
752
752
704
736
720
720
704
736
752
720
672
672
656
784
784
736
768
784
784
752
736
736
832
736
784
704
752
672
752
832
736
752
768
768
800
752
752
800
656
656
752
816
736
768
704
640
816
672
736
736
816
656
656
640
768
736
656
608
656
768
624
736
688
720
768
768
736
784
656
752
752
784
736
768
688
752
624
704
784
768
736
688
736
640
800
736
768
720
640
768
784
656
720
736
688
752
768
768
752
688
768
720
672
752
688
640
624
624
688
752
656
672
784
752
736
672
736
720
720
672
752
768
800
688
640
752
672
752
784
688
672
752
720
720
784
688
736
736
672
752
768
656
656
672
736
640
768
720
736
640
736
640
736
800
688
800
768
656
720
704
640
784
816
736
688
720
736
672
752
768
784
704
752
672
832
720
736
720
656
752
736
784
768
752
752
752
768
800
768
656
640
752
736
752
752
848
672
720
800
752
672
736
688
624
784
672
688
752
656
688
656
640
720
688
752
688
656
752
752
656
704
704
640
784
752
800
672
736
768
736
672
672
736
704
736
736
704
720
768
672
672
848
688
656
640
800
672
672
688
784
768
736
720
816
752
800
768
752
656
784
640
800
688
800
736
752
784
672
656
720
752
656
656
752
736
640
752
640
768
736
672
720
736
768
736
672
752
784
768
704
752
752
784
752
640
672
832
656
752
672
800
720
736
768
784
784
720
768
752
720
672
768
720
672
624
768
752
736
720
736
736
768
672
736
736
720
768
736
800
752
672
752
784
736
768
688
784
736
672
784
752
688
832
752
720
816
704
720
720
784
704
704
656
768
752
656
640
784
656
752
688
736
768
672
768
672
768
688
784
752
800
768
752
736
768
768
720
752
752
752
736
768
656
736
752
672
624
672
736
656
656
752
720
752
640
688
736
752
752
800
752
736
688
688
752
656
736
768
656
656
656
752
736
752
720
704
656
768
688
688
720
736
832
752
816
672
624
784
656
688
704
720
656
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
384
624
752
752
736
720
736
672
768
688
736
736
768
736
688
768
752
720
736
672
784
672
688
736
736
672
672
720
656
768
736
640
720
752
640
688
816
672
656
752
672
752
752
688
768
736
752
672
736
752
688
720
720
720
736
720
672
736
672
784
672
720
640
704
768
800
736
672
752
768
720
640
736
752
720
640
752
800
688
768
704
768
736
672
784
624
720
752
672
768
704
736
688
800
688
736
672
672
704
672
704
704
752
752
656
656
736
768
624
736
784
720
672
720
720
672
640
736
688
704
640
704
720
656
656
832
688
768
672
672
672
704
736
768
752
672
752
752
768
672
640
736
704
736
752
752
768
768
768
752
640
672
672
656
688
656
752
832
768
784
736
752
656
672
768
704
672
640
736
720
752
672
656
768
672
736
704
752
672
704
736
672
736
752
784
800
736
752
672
784
704
720
720
752
688
752
752
768
752
768
784
640
768
640
688
752
752
752
704
688
752
736
656
784
768
768
720
752
656
784
624
640
656
720
672
800
736
752
736
768
768
736
752
736
752
704
656
672
704
672
720
752
736
720
688
736
784
704
752
800
736
752
672
752
656
784
720
736
816
624
752
736
672
656
752
752
768
768
752
704
704
752
752
720
720
720
720
704
688
704
720
800
768
768
752
672
656
736
720
640
784
784
736
752
784
736
752
656
656
736
768
752
704
768
640
768
656
672
688
672
736
736
768
752
752
736
768
736
736
768
768
736
736
688
736
768
736
656
704
640
640
784
688
736
656
736
752
768
688
688
768
848
656
720
768
688
688
752
736
672
672
800
640
688
768
720
672
752
656
672
720
768
784
720
672
736
688
752
720
720
800
768
752
688
784
800
736
736
736
768
800
688
736
752
752
816
752
704
720
736
688
656
656
656
768
768
752
672
736
784
704
736
736
752
720
720
704
688
672
704
704
752
720
720
688
768
736
688
672
752
736
752
720
736
736
752
752
736
656
720
752
736
752
752
672
624
752
656
800
720
656
768
656
736
736
752
736
736
736
736
624
736
688
720
720
768
656
800
672
720
720
768
720
672
752
720
800
624
688
672
656
800
672
736
768
720
768
640
768
720
704
736
672
768
752
704
800
768
672
768
752
752
784
784
800
752
768
704
768
672
640
768
688
656
768
736
704
752
672
720
752
672
720
752
752
736
656
640
768
736
704
800
800
672
752
736
736
736
704
656
736
672
768
800
768
752
656
688
704
800
640
656
736
784
752
752
816
688
752
672
752
704
752
752
736
720
720
736
784
688
736
800
640
816
624
672
688
752
784
720
736
752
752
832
672
768
736
672
768
672
704
672
656
656
752
704
768
672
736
704
656
656
624
752
704
768
752
624
656
784
656
752
704
736
704
736
768
768
736
752
784
656
768
720
800
640
640
688
656
768
768
768
736
752
688
736
672
688
768
752
736
752
656
736
704
784
768
688
752
736
720
736
736
752
704
736
752
720
768
656
832
672
672
720
768
784
752
640
736
768
752
752
720
800
736
736
752
816
784
672
768
752
736
672
640
784
752
752
736
752
752
752
736
800
704
704
752
752
672
752
752
832
656
784
624
752
752
656
704
816
672
736
688
800
672
672
672
736
752
752
768
736
672
656
784
832
672
736
784
688
672
752
768
752
704
704
640
816
656
752
720
720
752
736
736
784
768
768
704
784
800
672
720
624
672
656
752
736
736
736
688
640
656
736
752
768
752
784
656
816
672
656
720
640
736
640
736
768
672
688
656
752
816
656
736
752
816
736
752
752
656
768
736
784
800
736
736
784
720
736
752
736
752
768
624
656
720
672
816
720
752
672
800
672
720
768
752
832
656
736
768
720
736
656
736
640
656
688
816
768
672
768
720
816
736
800
768
672
720
672
688
672
752
768
672
672
752
736
816
752
752
752
736
736
784
800
752
800
736
688
768
784
800
768
784
752
656
752
720
784
752
736
656
656
736
752
720
736
688
736
656
736
672
656
624
784
720
752
640
768
736
736
624
672
784
736
688
800
752
768
752
640
752
752
672
736
752
768
736
784
768
672
752
784
752
656
800
672
672
736
688
672
752
768
752
736
768
672
672
752
720
768
736
752
736
656
656
672
752
656
672
688
752
720
752
752
672
720
736
656
720
736
736
752
752
672
688
736
752
752
640
736
752
768
720
688
752
656
768
768
656
656
736
784
800
736
704
656
768
672
752
736
752
784
784
816
720
656
752
752
784
640
768
720
720
768
784
768
752
672
736
816
816
768
752
720
752
800
624
736
656
720
736
784
752
720
608
720
752
752
640
736
752
720
656
784
624
736
720
752
720
736
752
752
736
656
752
736
672
720
784
768
736
704
752
768
752
736
704
800
736
640
640
784
800
688
768
720
720
752
736
816
688
736
784
752
752
672
688
704
736
736
752
656
656
720
784
656
720
752
736
768
736
768
800
752
832
640
688
736
736
752
784
720
720
688
720
720
704
672
784
704
784
656
752
656
688
640
640
672
656
736
624
832
672
816
768
736
656
736
832
672
656
688
768
640
800
736
720
720
768
752
736
784
752
800
672
656
656
768
640
752
640
752
736
704
800
656
720
656
656
640
752
752
640
720
624
656
800
736
816
736
688
736
768
736
672
656
688
768
656
736
688
672
784
800
656
768
656
672
752
752
784
720
720
720
816
704
736
736
752
656
672
672
736
768
752
736
800
736
720
736
832
720
752
736
784
800
656
752
768
736
736
752
688
640
720
688
672
688
768
736
736
736
736
784
752
752
752
752
656
720
752
736
768
688
768
816
640
720
688
768
768
656
656
640
640
784
752
704
688
688
768
720
640
768
736
736
656
688
672
736
624
768
704
784
640
784
688
768
688
736
640
704
784
816
736
656
752
640
640
672
656
752
704
656
768
672
848
720
768
704
768
752
656
640
736
720
752
800
736
720
800
736
736
752
736
784
800
624
688
736
736
768
640
688
624
656
640
736
752
704
656
768
704
800
784
688
768
768
672
624
640
688
656
736
784
704
736
752
800
784
736
688
736
688
736
688
784
672
752
752
624
672
736
704
720
832
720
800
624
800
656
720
736
736
720
656
768
704
704
800
720
672
720
656
736
688
752
624
688
784
688
640
656
768
640
656
752
688
656
800
784
752
736
640
704
736
672
752
752
704
736
720
784
768
704
656
720
688
672
752
720
688
640
688
736
720
800
752
736
752
656
672
688
768
672
768
752
784
752
832
656
656
688
704
704
672
816
688
704
816
736
656
688
736
656
720
736
768
752
768
736
656
720
768
704
704
688
720
688
784
752
752
752
768
736
720
656
752
720
640
656
656
736
768
640
752
656
752
800
752
720
656
688
688
752
736
640
752
768
640
752
736
784
720
736
656
736
656
752
752
816
736
656
800
720
752
768
784
768
672
704
736
640
736
736
704
688
720
752
768
672
624
800
784
768
720
640
720
784
704
672
800
688
768
816
736
752
736
688
688
672
768
736
672
736
720
720
736
800
768
752
784
736
752
656
800
784
768
688
736
720
720
672
736
656
768
784
768
672
816
752
752
800
624
720
800
720
672
800
736
720
688
736
720
720
672
752
640
672
672
736
768
752
800
656
640
816
688
768
752
704
816
672
768
752
800
640
688
672
720
784
640
800
656
768
640
768
800
768
752
704
832
736
768
736
624
784
768
736
752
800
672
640
656
736
720
736
656
752
736
720
752
768
672
672
656
784
736
768
704
688
688
784
720
736
752
720
768
784
768
768
800
768
640
736
736
640
656
784
656
816
736
672
768
784
752
672
688
768
736
736
752
656
784
656
736
720
768
736
640
672
768
736
720
672
736
752
816
656
816
640
672
784
704
608
720
624
752
720
768
640
640
656
784
752
656
800
672
752
720
736
688
752
656
704
784
720
640
784
688
672
768
704
816
736
752
672
768
640
784
720
656
672
768
720
688
720
784
656
816
768
752
688
768
720
640
800
672
736
752
736
736
832
752
784
640
768
624
736
768
784
688
736
816
752
736
800
624
752
656
656
736
720
720
672
736
752
784
640
704
768
720
720
736
720
704
736
736
736
816
688
672
736
704
688
736
656
672
736
752
656
672
752
736
672
656
704
656
720
688
640
736
720
656
704
656
720
672
816
720
672
736
752
640
704
752
656
752
752
736
720
800
624
640
752
784
704
672
672
736
752
656
816
640
688
688
800
784
656
752
736
736
704
752
704
752
672
640
704
752
768
800
752
736
800
688
736
768
816
672
800
736
784
816
640
736
720
752
672
816
656
768
704
752
672
656
800
736
736
688
672
752
752
672
720
720
672
688
768
720
752
656
752
752
784
720
768
736
656
784
752
704
720
800
784
672
768
784
704
752
736
784
752
688
768
736
704
800
688
688
768
736
784
640
736
720
672
768
656
656
720
800
624
736
736
672
720
800
752
752
784
736
736
784
688
752
672
752
752
736
736
656
784
736
800
736
784
736
704
688
784
736
736
656
640
768
736
656
656
800
640
736
656
672
736
736
752
752
656
640
640
800
736
720
624
752
720
752
672
656
672
688
688
768
768
672
752
688
768
784
768
656
720
672
656
816
688
768
656
672
640
736
640
768
736
688
672
672
752
768
672
752
688
752
640
736
736
656
800
752
784
640
656
736
784
672
784
752
656
704
736
624
752
736
816
768
752
752
768
752
784
656
784
816
768
736
736
688
816
704
704
784
704
784
672
720
752
816
768
720
816
704
736
656
672
656
656
800
736
736
624
784
736
752
656
768
736
720
736
784
848
672
752
656
768
736
624
768
800
656
624
672
768
704
720
784
688
752
720
656
624
752
672
640
752
656
672
736
736
656
784
720
656
672
640
752
720
752
768
736
768
768
736
656
688
672
688
688
640
640
752
672
736
752
752
736
752
672
752
688
736
816
736
736
832
752
752
640
736
704
640
736
752
768
768
752
656
704
704
688
720
800
672
736
752
752
752
752
720
656
752
752
688
816
752
752
688
640
704
736
704
736
720
640
816
768
800
736
832
656
736
640
784
736
640
736
752
752
736
672
688
672
656
624
768
800
720
752
736
656
816
752
784
752
736
752
752
752
656
640
736
800
752
656
672
784
672
736
624
672
720
640
704
736
640
720
752
736
688
672
768
832
736
768
768
816
720
688
656
752
656
672
800
736
720
656
784
768
672
688
688
704
704
656
672
752
720
736
752
784
688
768
752
752
752
736
784
768
784
784
784
720
736
720
720
624
688
800
720
720
720
640
736
736
752
816
656
688
768
704
720
736
704
752
736
672
688
736
752
704
736
672
768
800
672
752
672
736
688
784
752
656
768
752
736
752
848
768
784
800
784
688
720
624
816
672
768
656
768
624
784
768
784
736
800
752
752
656
752
688
768
800
736
752
720
752
656
720
752
736
672
784
768
752
704
672
752
720
784
720
736
688
736
736
656
784
768
736
768
720
768
848
656
752
672
736
672
736
752
736
768
704
736
704
672
784
736
752
800
768
704
784
720
688
736
816
640
768
736
768
752
720
736
672
688
656
640
656
672
720
752
752
752
656
736
656
672
656
752
768
768
736
768
672
720
672
736
704
672
640
736
672
768
768
672
704
736
800
656
672
672
736
768
768
736
736
704
816
720
720
736
784
656
768
800
736
832
784
640
736
720
656
736
752
752
640
784
768
704
736
768
720
688
704
736
736
768
752
784
752
672
768
768
624
624
688
800
640
688
736
752
720
656
736
720
752
704
704
672
688
800
688
624
656
704
656
688
752
688
784
752
688
736
736
768
800
688
768
688
752
768
736
752
672
736
800
784
672
688
784
768
752
672
736
688
752
800
656
752
736
736
768
704
672
656
736
752
752
640
752
784
640
672
752
736
736
752
800
752
720
640
656
736
640
688
672
720
752
672
736
784
656
624
752
752
672
688
736
720
752
816
672
800
832
784
672
720
688
752
736
752
720
736
672
816
720
704
768
736
784
752
720
736
704
720
688
688
752
736
784
656
720
752
784
752
624
736
784
736
624
720
672
768
736
752
672
672
704
736
800
720
624
736
752
752
704
656
752
736
752
752
608
752
688
656
704
784
672
768
752
816
656
768
688
768
656
736
768
736
672
752
752
752
768
688
752
768
656
640
672
736
736
736
640
672
640
752
752
656
752
736
768
752
736
736
688
688
736
624
736
784
736
784
656
768
768
768
848
656
704
752
688
816
688
800
784
800
640
720
656
816
736
736
800
784
640
768
736
752
704
736
624
688
704
768
736
704
800
672
752
768
752
816
784
736
784
832
736
752
736
656
752
752
768
672
736
656
768
784
720
784
768
688
688
752
672
736
672
704
640
736
768
720
656
656
688
752
752
656
624
688
752
720
752
640
704
752
672
720
720
736
800
736
736
720
688
672
736
656
768
656
736
736
640
768
736
720
800
768
688
784
704
816
768
816
672
704
736
656
672
768
656
672
752
800
736
656
656
720
688
752
720
784
704
736
656
720
720
656
688
688
752
720
720
736
704
752
640
752
720
736
736
752
704
752
720
752
736
752
640
624
624
624
768
656
704
768
672
608
720
752
736
736
768
752
752
816
640
816
704
688
768
672
768
688
736
672
768
640
672
752
800
640
736
720
752
656
720
656
752
752
752
768
624
672
752
608
640
640
704
640
752
752
640
720
624
688
656
720
672
720
752
688
720
736
688
752
736
640
720
656
736
768
752
704
640
752
736
752
640
656
720
640
752
672
640
656
736
720
640
752
736
736
736
656
672
736
720
736
736
656
656
752
752
736
656
720
736
720
688
720
752
688
720
704
720
640
672
640
720
656
736
752
736
720
624
736
672
752
656
752
624
704
656
640
656
784
688
752
656
720
640
640
720
784
624
704
672
688
624
768
720
736
640
688
736
720
688
736
640
672
784
736
688
672
688
736
832
688
624
736
672
720
656
624
656
720
784
640
640
832
752
752
784
752
784
720
768
752
752
688
784
736
704
656
688
752
720
784
640
720
768
688
640
784
720
736
752
768
704
624
768
768
752
752
768
784
800
784
672
688
672
720
736
688
784
768
816
720
704
752
768
656
640
720
704
736
704
672
752
656
752
736
752
768
720
704
736
816
672
800
672
752
704
688
640
640
800
656
752
800
656
768
736
688
704
768
752
800
688
768
656
752
784
688
656
736
672
768
784
784
768
832
752
752
656
784
752
784
736
640
800
672
736
656
800
672
640
784
768
736
720
752
720
736
624
752
752
720
784
752
784
656
800
720
752
816
752
752
672
736
752
768
816
768
768
656
768
784
640
752
688
656
816
640
672
784
672
736
688
752
752
752
752
656
752
720
752
720
656
720
688
752
688
720
736
800
704
768
832
656
672
656
640
720
640
656
656
784
768
704
752
672
752
688
656
752
816
736
752
640
672
656
736
736
752
752
672
768
784
784
688
640
768
768
752
736
688
768
768
736
688
656
736
672
624
704
752
656
752
640
656
736
752
736
608
704
752
752
752
768
800
720
688
816
736
736
656
736
720
736
768
752
672
640
720
720
816
752
704
672
624
768
752
656
800
640
752
640
736
736
720
736
752
752
736
768
672
752
656
704
672
704
752
752
752
768
672
752
640
752
624
736
704
784
720
800
688
768
752
736
704
800
768
688
768
720
736
752
752
592
720
720
768
704
672
672
672
720
624
752
768
672
656
704
800
768
736
656
768
832
720
752
672
784
768
720
672
656
768
752
736
736
784
640
704
656
704
752
768
816
784
720
640
752
720
656
736
768
672
704
752
672
768
672
688
752
768
720
752
736
688
768
768
608
736
752
688
752
768
656
608
688
688
736
720
752
704
592
768
736
720
736
752
736
656
768
784
672
720
656
784
848
704
704
720
768
752
672
720
736
768
704
736
784
768
688
688
672
752
704
736
672
688
800
672
720
688
784
656
640
736
704
768
784
672
624
752
736
720
784
768
752
752
784
736
784
736
736
768
624
800
640
752
800
752
752
656
800
656
640
640
784
624
720
736
704
768
640
752
720
688
640
720
656
704
752
688
752
736
784
736
656
672
704
720
816
736
736
736
704
752
656
752
720
752
752
688
768
784
736
720
752
784
640
800
656
688
768
800
688
768
688
688
656
656
736
656
640
784
752
752
736
800
736
800
736
736
704
672
672
736
672
752
704
784
768
672
752
816
704
704
720
720
768
736
784
640
704
656
768
688
736
720
768
736
720
784
640
752
736
720
720
800
720
704
752
672
800
768
784
752
784
736
768
736
688
752
768
672
800
640
816
704
752
656
784
688
704
640
816
736
736
736
752
656
768
736
704
752
832
752
704
656
672
784
736
752
720
784
816
752
736
768
752
736
656
784
816
768
752
656
736
800
720
720
672
688
784
800
800
672
752
672
752
752
752
736
704
752
640
784
832
688
752
768
768
784
736
736
672
656
768
752
752
736
736
688
816
640
720
688
800
752
768
752
752
624
784
752
752
672
704
736
784
768
752
752
720
736
624
736
752
768
672
816
720
768
784
688
688
768
784
704
688
688
752
752
656
752
768
720
656
768
784
656
656
672
656
704
736
640
768
736
784
656
768
736
752
656
752
752
704
736
704
736
736
736
736
768
752
752
800
624
672
736
656
752
672
800
640
800
640
736
816
800
752
720
752
784
784
720
672
800
640
752
752
768
752
736
752
736
832
752
784
736
672
656
752
752
752
752
768
720
832
736
768
672
704
720
768
640
752
752
640
752
672
752
704
768
816
768
688
704
768
784
736
704
752
720
672
688
688
704
640
800
736
672
720
736
656
784
784
752
752
656
784
752
704
688
704
672
736
640
688
720
768
736
736
656
816
752
752
768
848
656
768
752
752
800
752
672
720
752
752
768
800
736
752
752
736
736
752
816
752
672
752
672
656
688
800
752
656
768
816
736
800
736
768
720
816
736
672
800
672
816
720
736
768
672
640
768
768
736
768
736
800
640
704
720
768
784
736
672
672
656
720
800
688
656
752
768
768
688
752
768
736
672
720
656
720
768
784
672
704
656
704
800
768
608
768
736
752
688
800
768
784
752
656
672
768
768
640
752
688
752
736
784
784
784
688
768
736
752
672
736
672
816
736
656
640
736
656
736
768
768
656
640
784
736
768
736
720
736
736
688
768
688
752
752
752
784
768
672
768
656
736
704
736
752
688
752
752
656
784
672
720
736
752
640
656
672
672
768
704
816
752
672
688
752
736
736
752
736
720
736
688
752
752
656
720
688
752
736
688
736
752
768
736
784
672
720
656
736
624
640
640
752
768
736
640
672
736
736
736
688
752
688
720
752
768
688
784
736
640
752
768
656
672
656
672
768
688
752
768
768
688
736
624
752
688
736
800
704
768
720
656
688
720
768
768
672
688
656
768
736
672
656
736
656
704
656
768
736
672
736
656
768
752
768
640
752
752
720
672
752
704
640
736
688
752
736
816
752
800
784
768
704
704
768
720
688
800
736
672
736
672
688
688
752
752
752
752
736
720
784
736
752
816
752
752
736
768
768
752
720
736
768
736
752
704
800
672
768
736
800
656
752
720
736
816
736
656
784
720
672
752
704
672
752
704
704
672
704
736
736
704
736
720
736
704
752
688
800
688
720
720
672
688
800
688
752
816
704
736
656
752
736
688
752
704
688
608
784
752
640
720
784
688
752
752
704
640
672
736
672
736
624
736
768
672
736
688
784
784
736
688
752
688
656
736
736
688
736
736
640
768
784
672
768
624
736
752
720
656
736
752
656
736
752
752
784
656
688
752
816
736
704
688
752
656
704
752
672
800
624
736
688
656
752
688
656
768
704
736
688
640
768
656
800
752
752
736
624
784
736
736
752
784
720
672
736
656
640
736
688
768
784
720
704
656
800
720
688
656
768
736
768
752
736
768
752
720
672
656
704
768
656
656
752
800
752
720
768
768
640
688
752
752
688
784
784
672
672
784
752
752
752
752
768
752
784
768
656
736
720
720
768
672
736
768
768
672
736
784
736
736
768
672
736
752
624
672
688
736
672
768
656
736
688
800
640
656
704
672
784
640
784
768
672
752
688
752
640
768
768
768
784
752
752
720
688
656
736
752
752
736
800
752
752
688
784
736
736
688
736
784
800
656
672
784
720
752
784
800
768
688
736
624
672
656
768
672
688
624
768
720
688
752
736
752
736
688
736
752
768
656
736
720
720
752
752
640
752
768
736
672
768
720
704
672
800
656
768
656
656
800
656
672
688
768
688
800
768
752
640
672
752
752
656
720
752
688
720
736
688
752
624
752
768
752
736
768
768
656
752
688
816
656
768
800
736
640
768
704
640
640
736
736
736
640
640
768
800
752
656
656
784
736
688
656
640
752
832
752
672
704
640
704
736
736
768
784
672
656
752
656
800
736
784
640
768
704
688
752
800
752
672
704
688
736
672
672
720
624
640
656
704
688
816
688
736
752
640
768
736
736
624
784
704
656
640
624
752
624
752
672
640
736
784
768
752
672
768
800
752
640
688
736
848
672
688
720
768
800
624
752
768
656
688
784
640
640
672
800
656
768
656
704
736
720
768
800
640
848
768
736
736
768
672
752
656
752
704
704
800
672
704
736
672
704
672
768
720
752
704
672
672
736
752
784
736
672
688
640
640
672
768
624
688
736
672
736
608
656
640
656
768
736
704
752
816
752
736
688
752
752
640
688
768
688
752
672
688
736
736
640
768
720
768
800
688
800
736
656
640
816
752
800
704
768
768
736
816
752
656
816
720
672
672
672
752
688
736
768
720
640
672
720
752
768
736
656
704
752
672
624
688
752
752
640
736
752
768
672
768
736
688
720
736
800
736
768
720
752
704
672
784
688
784
768
752
752
784
752
720
736
656
752
688
656
704
704
704
736
752
736
656
736
752
768
656
720
640
752
832
688
688
816
768
752
704
736
752
704
656
656
672
752
816
736
720
640
752
720
736
640
704
736
800
688
800
736
704
832
752
704
672
672
816
688
752
720
752
720
768
816
768
720
768
704
688
752
752
768
720
720
752
768
752
752
752
752
800
656
720
736
672
656
800
640
672
656
752
752
752
736
752
832
752
672
720
656
720
736
736
736
816
736
768
736
672
640
640
704
720
656
736
720
736
672
816
736
736
736
736
768
736
800
720
704
736
640
832
752
800
736
816
752
736
704
768
736
640
832
736
656
784
640
832
736
656
736
672
752
672
752
704
784
752
688
624
720
736
736
752
768
752
672
736
752
672
768
656
752
672
672
736
816
624
736
752
720
672
752
704
704
736
784
768
768
640
736
624
800
656
768
752
752
752
768
672
752
672
752
768
720
656
816
736
752
752
704
672
768
656
768
672
704
784
752
784
736
736
768
816
752
736
640
720
688
768
720
704
688
784
688
736
688
640
640
736
704
624
736
704
736
736
656
768
640
720
752
768
624
736
688
656
736
704
672
784
720
672
768
784
784
768
736
752
688
688
688
784
784
640
752
752
752
704
736
784
736
752
736
784
704
720
752
736
800
704
752
752
640
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
400
656
752
736
704
672
720
752
768
736
672
640
816
752
784
720
656
800
656
768
736
688
768
640
736
736
752
752
736
816
704
720
672
768
800
736
688
640
704
736
640
736
672
736
736
640
672
768
768
672
784
752
752
784
720
752
752
736
736
656
720
752
736
624
720
656
672
768
688
752
736
752
672
736
640
688
624
656
672
624
752
752
640
784
768
752
720
736
640
688
656
752
800
736
688
672
688
752
752
816
656
736
736
752
672
784
640
720
752
656
672
640
752
688
656
752
752
784
640
752
672
768
672
752
768
720
736
784
736
704
656
752
768
768
736
768
768
752
672
768
704
784
704
752
672
768
736
736
736
720
800
704
656
800
720
768
688
768
672
752
768
752
736
800
736
816
720
736
752
752
752
672
752
752
704
752
768
752
672
752
688
656
768
752
832
752
672
800
752
784
672
656
784
688
816
752
768
784
656
752
640
656
800
784
768
768
736
752
752
752
784
752
800
752
672
752
720
720
800
736
688
720
768
768
752
752
736
736
752
768
720
688
752
704
752
752
752
720
672
816
640
688
768
736
752
656
656
768
720
752
752
720
720
800
752
768
768
688
752
672
656
752
784
832
736
752
688
688
736
720
768
672
736
768
784
800
656
800
656
768
752
752
768
768
688
720
768
736
656
752
704
672
736
736
768
688
736
640
656
736
752
656
624
768
640
736
736
640
704
752
704
704
720
768
800
736
768
752
784
720
752
752
784
656
752
752
688
800
752
752
736
720
752
784
672
720
784
752
800
752
752
752
720
768
752
752
704
672
752
672
736
720
656
704
736
752
688
768
656
768
800
688
736
672
736
704
640
624
672
720
720
672
624
720
656
640
752
752
624
752
736
768
784
784
816
672
736
688
704
768
624
720
704
736
784
640
752
656
672
672
784
672
752
736
720
800
800
752
752
752
768
656
784
720
736
736
752
720
656
768
816
736
752
672
640
704
736
752
688
704
752
768
720
736
672
736
656
656
736
816
736
768
656
672
752
736
736
704
720
736
640
752
688
736
752
816
640
752
656
752
720
720
672
752
688
720
672
752
720
768
768
752
736
640
768
704
656
672
720
752
736
752
640
736
672
656
736
768
768
752
800
736
800
672
768
752
768
720
736
624
688
672
752
672
736
752
784
720
800
736
720
784
656
736
752
752
752
752
672
656
768
784
768
752
832
672
672
752
688
848
672
624
688
736
688
768
656
752
688
672
688
816
640
656
752
768
656
720
752
736
768
768
752
672
672
736
640
688
784
752
672
752
736
688
672
800
640
736
736
672
704
784
768
752
736
704
720
736
704
768
800
752
720
672
736
768
736
768
736
752
752
688
672
688
752
656
752
656
736
784
672
704
816
736
768
752
816
688
752
672
688
688
816
736
672
704
720
768
704
672
768
752
752
784
656
752
736
736
752
752
688
672
736
736
736
736
656
656
736
768
752
736
784
736
688
752
768
736
720
624
736
688
720
784
704
736
720
752
768
736
656
752
848
640
784
672
752
768
720
656
688
816
768
640
768
672
752
688
656
800
672
800
720
800
752
768
688
640
720
672
704
688
640
736
752
768
640
736
688
736
656
624
816
784
656
704
784
752
752
656
752
784
624
720
656
736
752
768
656
752
656
736
816
720
816
720
816
720
816
640
752
672
720
640
656
704
768
720
752
752
688
736
640
752
784
800
768
752
672
768
672
736
784
720
688
800
768
688
800
768
688
688
720
768
720
704
816
736
688
736
768
768
640
832
672
752
672
656
688
688
768
784
656
800
672
816
752
704
672
736
624
784
768
752
800
752
752
736
624
640
688
768
656
720
688
752
656
752
720
736
688
672
784
752
752
736
672
784
800
656
672
704
656
752
736
768
752
784
704
752
752
672
656
784
752
832
736
672
672
752
704
736
784
800
656
752
784
640
688
800
688
752
752
624
720
720
768
752
720
672
784
768
688
768
688
752
752
624
656
656
752
752
672
720
816
752
736
784
736
672
656
736
704
688
656
688
832
656
768
640
784
720
752
800
656
688
768
736
736
720
752
736
672
752
624
768
656
656
640
768
656
752
784
736
736
656
656
720
784
752
672
720
736
656
736
752
704
656
640
720
688
704
720
720
688
688
736
624
816
736
672
672
752
656
640
752
752
736
768
672
784
608
640
736
688
752
736
672
688
656
752
816
656
784
736
688
656
688
672
752
768
752
656
656
752
688
656
704
816
672
672
736
816
720
768
720
768
672
752
736
816
672
656
736
624
736
672
624
752
656
736
800
704
672
752
720
816
640
672
784
752
672
624
640
768
752
736
624
752
720
720
736
816
672
768
672
816
640
784
752
800
768
800
752
816
768
736
688
688
768
672
816
768
656
672
656
816
784
720
768
688
704
800
800
672
736
672
752
784
816
736
688
672
656
784
768
768
704
672
784
768
768
672
688
768
784
704
736
656
704
656
736
800
656
688
832
704
752
752
784
768
688
704
704
832
720
784
720
768
800
704
704
752
736
752
768
720
736
752
816
752
784
800
784
656
672
752
800
672
720
704
736
640
784
736
736
768
720
752
656
768
832
672
624
656
736
736
688
768
752
736
688
800
624
672
720
736
672
752
672
656
672
736
624
704
688
752
736
752
752
752
752
688
672
752
672
672
768
784
768
640
768
672
688
656
752
768
720
784
656
784
688
624
752
752
640
800
688
768
688
752
752
736
768
768
704
704
688
768
656
816
672
720
784
688
656
656
720
736
736
752
720
736
624
736
736
704
800
736
736
768
672
640
784
736
784
752
784
720
736
784
656
848
752
768
768
688
752
768
736
736
672
672
656
688
752
672
768
688
704
768
800
736
672
752
768
800
672
800
752
768
768
832
640
768
768
688
752
816
656
656
672
688
688
768
624
704
752
752
800
736
672
720
752
656
688
784
656
768
752
768
624
768
800
736
656
752
704
704
688
736
768
720
656
736
656
752
688
768
768
672
816
832
624
800
672
640
816
736
752
784
816
768
688
640
752
704
832
720
768
736
752
784
752
768
752
736
688
832
752
768
656
640
752
752
784
736
768
672
736
608
768
672
704
736
736
752
768
736
816
752
688
736
624
736
656
752
752
816
752
752
768
656
720
752
816
768
816
736
640
736
816
736
656
704
752
656
656
816
656
688
640
736
704
752
704
736
704
768
768
752
624
624
704
624
736
736
784
704
736
752
720
688
768
704
736
752
640
640
768
800
656
688
752
752
688
752
688
736
752
768
736
736
640
736
688
752
768
656
640
768
672
752
752
720
656
768
640
672
704
736
752
784
688
752
768
656
688
736
672
752
736
720
784
736
752
736
672
656
656
736
736
736
784
864
640
784
720
784
816
688
784
672
736
768
768
640
720
736
752
704
640
672
752
672
768
688
672
752
640
800
704
768
752
800
784
640
752
768
752
736
672
736
752
704
832
688
704
704
752
736
768
672
768
704
784
736
656
768
800
736
672
736
688
816
656
752
656
816
704
608
784
784
736
784
784
640
816
672
768
672
800
752
752
672
736
640
784
784
704
752
656
672
688
640
656
736
816
672
720
752
656
720
736
784
688
816
704
752
816
752
624
672
704
784
752
784
656
752
656
736
656
752
768
720
720
784
672
752
672
784
752
736
752
752
752
720
656
720
832
768
752
656
672
784
672
736
752
768
752
672
752
816
672
688
768
752
736
752
672
736
752
784
640
784
736
656
656
784
768
752
720
800
720
736
672
832
704
768
752
784
736
656
832
640
736
720
816
656
752
640
768
736
768
688
736
640
736
768
720
720
768
752
640
688
720
720
704
736
672
640
768
704
672
640
656
720
720
672
784
784
656
816
672
688
688
768
736
688
736
672
672
624
656
688
672
720
736
736
720
672
752
672
752
800
768
736
624
672
704
768
768
752
720
800
752
752
656
768
784
768
704
624
816
640
816
768
656
800
688
688
800
688
800
752
800
672
768
752
768
816
736
736
720
752
784
752
736
688
720
736
688
704
784
656
672
752
656
768
736
784
720
736
752
768
720
720
752
768
768
768
720
752
736
656
688
784
736
752
768
640
720
656
768
736
752
752
736
752
784
736
672
688
704
688
752
800
720
640
688
672
640
656
672
704
640
800
720
784
736
768
688
784
640
736
656
752
672
736
704
736
656
640
752
736
736
784
752
736
656
672
704
752
656
736
624
800
656
656
720
752
736
784
768
784
640
800
752
752
672
832
720
752
768
752
672
640
752
688
768
768
720
736
752
768
752
752
736
752
752
784
752
768
640
784
656
768
736
672
704
736
752
672
784
736
736
640
688
736
752
672
640
768
720
768
656
704
640
752
736
752
752
688
784
720
752
736
656
720
784
736
672
736
736
608
672
784
752
752
832
768
800
720
816
736
768
672
720
752
752
736
768
800
656
640
784
640
768
768
640
800
704
752
816
656
816
736
752
656
688
768
752
736
736
784
784
800
752
768
672
736
768
720
784
736
656
752
768
784
784
800
768
720
688
736
656
768
752
672
672
736
784
720
688
640
656
672
784
736
768
736
640
672
656
752
656
656
784
768
752
784
736
672
736
752
832
752
768
688
688
720
720
800
736
688
640
720
784
768
704
736
752
800
656
624
736
656
768
640
704
672
832
640
720
752
800
656
688
720
768
752
816
736
800
672
736
768
688
736
752
784
720
736
768
736
672
784
768
624
720
736
784
752
752
656
720
672
800
736
704
752
640
688
768
752
736
800
768
752
736
752
736
656
784
720
688
672
704
752
800
752
784
656
800
656
736
736
800
656
672
832
672
688
736
704
688
688
752
736
656
752
752
624
768
816
720
656
704
736
704
768
752
816
688
736
736
768
736
752
752
672
688
736
656
784
832
752
800
672
656
768
784
816
720
752
800
720
704
752
816
688
784
720
704
656
624
768
736
736
736
784
704
672
624
736
752
736
784
672
672
768
784
688
672
704
816
752
704
736
752
800
704
672
656
672
720
656
768
656
768
720
768
656
736
816
672
720
768
656
640
672
656
720
800
800
736
736
720
704
656
752
672
688
816
672
656
784
784
720
672
640
784
752
640
672
736
640
752
752
672
768
656
640
752
640
800
752
768
656
736
672
656
640
736
784
736
752
656
704
816
688
624
736
608
640
736
800
768
736
656
624
768
736
736
752
768
656
672
784
800
736
656
736
800
768
656
720
672
688
656
736
816
720
672
816
736
720
736
784
656
752
784
672
784
736
656
672
736
672
656
688
736
672
752
736
784
768
736
752
768
736
800
640
656
672
736
640
688
752
640
640
736
688
752
720
720
816
688
720
752
800
656
656
768
688
800
624
704
752
736
768
672
736
640
624
752
688
672
752
752
752
736
640
768
768
752
656
688
672
768
832
656
736
736
752
784
752
720
656
768
656
640
736
704
736
768
752
672
688
672
736
720
688
656
832
752
688
720
736
608
720
784
736
640
640
736
784
720
688
752
656
704
752
640
672
688
736
704
752
752
688
720
736
720
752
688
672
672
736
768
688
768
640
800
752
704
656
688
784
800
752
736
736
736
624
720
672
752
688
672
768
832
752
688
672
672
736
672
768
768
624
768
736
752
672
736
704
656
720
752
768
720
736
672
640
704
768
672
720
720
720
720
672
688
800
704
704
704
736
752
768
720
752
736
800
752
752
800
656
688
752
800
768
784
720
752
688
752
640
672
784
800
736
800
672
752
768
656
736
736
640
768
768
720
720
672
752
736
752
784
672
800
720
672
784
704
704
784
720
736
624
784
784
800
720
768
784
768
720
816
624
752
768
752
704
672
736
800
752
752
784
752
752
832
736
768
688
672
752
752
784
720
784
752
752
720
656
736
800
672
752
688
720
768
784
736
672
736
784
800
816
640
752
704
720
720
656
640
736
736
736
704
768
752
752
704
656
720
768
624
656
704
672
624
768
736
800
752
656
768
704
672
752
720
736
688
672
736
800
784
656
736
624
656
656
768
672
752
720
720
688
768
752
672
672
736
736
752
752
720
720
752
784
768
752
656
752
640
784
720
736
736
768
816
752
784
672
752
736
704
704
832
736
768
784
784
688
656
672
656
656
720
688
640
720
736
800
800
752
768
752
688
624
704
672
736
752
784
752
704
688
704
768
656
656
640
752
688
720
640
656
608
640
656
752
752
672
768
704
672
736
768
800
640
752
752
704
656
672
752
720
752
736
752
736
768
752
736
784
736
736
736
768
688
704
800
736
720
656
768
640
672
640
640
672
752
720
768
672
688
656
656
768
720
736
720
768
672
752
656
656
768
768
784
656
752
752
736
800
752
768
752
672
800
720
640
736
784
656
752
640
704
784
736
784
784
784
752
704
640
768
704
784
768
656
736
736
672
752
800
752
640
688
688
720
688
800
704
640
752
704
624
704
736
688
704
720
768
720
720
752
736
672
688
752
656
768
624
816
704
800
752
768
800
800
688
656
800
704
768
720
768
752
752
704
704
768
624
736
768
720
752
720
736
672
640
640
720
688
720
768
688
672
736
816
736
752
720
656
784
752
752
704
752
768
736
752
768
784
736
640
800
688
736
640
784
752
720
800
624
736
672
800
736
784
752
688
672
768
704
752
672
768
704
832
672
768
768
768
752
768
688
704
752
752
720
752
688
656
656
752
800
656
768
624
672
736
800
640
752
752
640
672
752
640
736
768
736
656
736
768
656
736
800
752
736
768
832
752
768
656
816
752
720
816
752
768
672
688
672
784
672
640
656
752
752
672
784
656
720
784
752
736
672
752
768
768
768
672
736
768
736
800
768
752
704
672
752
704
736
752
768
672
800
624
768
656
720
656
752
640
720
768
672
832
688
768
752
784
736
784
672
640
656
768
672
752
608
672
736
736
656
768
768
640
720
720
752
768
688
768
672
784
752
656
704
688
736
752
688
768
752
656
688
768
768
768
800
656
768
832
672
768
768
768
800
704
720
656
656
704
768
672
624
736
752
768
736
736
720
736
768
656
656
672
768
752
672
624
768
656
736
768
672
752
768
736
816
640
640
608
768
752
688
736
784
768
656
768
768
736
784
672
752
768
800
768
752
736
752
816
736
672
768
816
688
672
736
768
688
752
736
688
768
752
768
640
816
736
640
656
736
720
736
736
736
672
672
640
688
688
736
768
656
656
720
816
752
784
752
656
672
736
656
672
816
704
656
736
736
704
640
752
688
688
752
656
752
736
768
752
736
720
688
656
656
688
752
752
768
784
640
640
736
688
720
688
800
720
672
672
736
800
784
768
800
720
624
784
752
768
768
784
720
800
752
752
704
736
784
720
800
720
784
720
736
752
752
736
640
672
720
736
704
672
704
736
640
624
704
720
688
752
768
704
784
736
704
736
720
672
736
736
672
752
640
736
832
656
672
656
720
656
688
672
656
720
736
688
720
704
656
752
784
736
720
720
656
656
784
736
752
752
656
736
656
720
640
800
640
736
656
688
672
688
688
736
736
736
624
720
640
656
624
752
688
752
784
832
672
704
768
768
784
656
720
704
672
784
800
752
752
816
752
784
736
640
656
656
736
768
752
704
656
704
672
784
768
672
784
752
720
704
672
656
736
672
752
656
672
832
640
800
736
752
720
672
752
656
672
752
736
784
752
720
736
624
688
736
720
720
656
624
736
704
688
768
784
768
768
752
704
784
784
784
800
656
736
800
752
784
640
768
752
656
704
752
752
800
768
656
720
752
816
736
624
752
800
768
752
720
752
736
704
768
768
672
768
624
672
688
752
752
816
688
784
752
720
768
720
720
768
784
688
720
656
768
656
736
768
720
752
640
736
688
720
736
672
816
656
720
752
672
704
704
800
784
720
656
736
752
640
688
768
752
816
752
800
768
736
656
800
752
736
672
752
752
640
736
704
752
752
752
736
720
704
752
640
784
736
704
752
688
688
688
736
832
704
720
672
768
720
736
752
656
736
816
720
688
656
672
720
640
720
704
672
800
736
640
752
784
720
656
800
752
768
640
640
672
784
768
736
704
752
624
656
784
736
768
752
768
656
672
656
784
672
656
736
800
688
736
688
752
752
624
640
784
704
736
768
736
608
752
736
656
736
720
768
768
736
768
672
656
672
640
736
752
656
688
768
768
752
720
736
768
704
768
768
768
704
768
704
752
640
800
768
736
688
752
768
656
736
736
752
704
640
768
704
704
672
736
816
736
656
704
736
768
720
688
672
720
736
656
816
624
800
720
784
672
656
768
640
752
736
736
768
752
720
768
688
784
656
736
720
768
688
656
640
752
768
768
656
720
624
656
752
704
752
704
752
848
656
656
768
736
736
784
720
784
752
768
752
720
720
688
720
704
752
736
768
688
736
624
656
688
736
672
768
752
736
688
752
672
768
720
672
640
736
688
800
608
704
656
784
720
656
784
688
720
736
736
672
784
736
656
752
736
768
672
736
784
688
704
768
784
752
736
736
704
720
672
800
736
736
736
768
704
672
688
752
656
768
720
704
688
784
768
672
704
832
752
672
704
672
720
752
720
640
672
640
752
624
720
672
752
720
768
720
736
736
688
672
720
784
720
768
720
752
720
672
752
784
736
640
752
752
768
752
720
672
672
752
784
816
768
752
800
656
688
752
752
720
736
720
752
752
672
736
736
752
768
784
656
624
672
720
672
752
768
688
672
720
672
768
736
768
800
736
688
800
640
640
752
608
704
800
672
624
736
768
640
656
784
816
768
752
720
704
656
624
768
768
768
752
736
656
640
672
768
752
768
768
768
672
752
720
768
832
720
800
768
816
736
784
800
768
688
720
736
784
768
768
752
800
736
624
752
720
656
800
624
768
784
640
784
736
736
624
720
704
784
640
752
656
640
736
720
768
688
688
736
656
688
688
640
736
720
704
656
656
800
784
752
768
720
656
736
736
704
640
752
672
736
656
704
784
656
816
736
720
672
736
816
656
720
784
752
672
656
752
704
736
784
624
816
752
688
768
720
880
752
816
752
720
752
768
736
752
656
640
720
688
736
752
752
688
656
736
624
736
672
752
768
720
736
768
624
768
704
656
688
768
672
832
624
720
640
736
672
752
624
752
752
752
752
768
816
768
752
704
672
784
736
720
704
656
640
672
736
688
736
672
736
656
736
640
752
704
736
752
800
752
720
720
672
640
640
736
720
752
784
752
640
784
720
736
672
800
736
720
768
656
784
752
800
752
800
640
832
736
656
752
688
736
736
688
672
720
752
656
768
752
736
768
736
768
640
784
752
688
784
672
752
736
784
672
736
752
768
720
720
720
720
736
704
720
752
656
672
816
816
656
800
640
656
752
704
704
768
720
656
752
720
640
736
736
752
672
752
672
720
688
752
768
752
640
752
672
752
768
736
688
800
688
720
736
768
752
672
736
784
736
736
752
768
688
656
768
784
736
752
752
720
720
736
752
736
672
736
672
720
656
784
752
640
752
752
736
768
736
672
640
736
768
736
720
768
720
720
768
752
736
768
640
800
752
720
608
768
688
624
752
784
752
752
736
752
704
704
736
752
784
720
752
736
640
768
752
752
768
736
752
672
784
784
752
752
624
688
768
768
688
768
752
752
768
784
752
752
688
656
672
752
720
768
752
736
784
784
768
768
720
752
752
736
688
752
688
736
720
720
768
768
800
640
752
656
720
736
768
720
736
752
688
736
736
640
800
720
736
640
752
656
800
752
640
704
688
768
736
768
656
816
752
640
704
672
752
752
768
752
768
736
688
736
752
752
816
736
800
752
720
736
656
752
672
752
688
736
656
688
640
640
800
672
784
720
752
656
768
768
784
752
704
736
656
848
768
640
672
832
640
704
640
672
736
672
736
800
752
752
736
752
752
672
656
752
768
752
752
832
656
640
672
672
672
752
688
768
752
688
656
768
736
656
784
736
768
752
672
672
720
784
624
736
784
768
736
624
720
736
656
752
752
704
656
816
656
736
720
752
640
672
624
736
656
768
736
704
656
720
624
672
800
768
768
736
736
736
752
672
720
688
752
752
720
784
688
752
800
736
768
656
784
672
784
688
688
640
672
736
784
736
688
752
752
752
640
688
784
768
720
768
640
720
752
800
672
640
816
640
736
640
656
752
768
656
784
720
768
736
640
736
704
736
656
736
832
688
784
640
752
752
656
752
752
768
720
752
736
752
672
784
752
768
640
640
784
768
672
672
704
832
736
752
672
720
752
752
672
784
768
624
768
736
752
672
752
784
720
656
656
768
736
768
768
736
672
656
656
672
688
736
736
688
752
656
768
800
672
688
656
672
784
736
624
720
848
704
768
624
640
752
768
688
752
752
768
688
640
800
768
832
704
768
672
688
768
656
752
672
672
736
672
688
640
768
688
752
784
752
720
800
656
752
752
656
768
688
752
736
688
656
752
736
704
672
720
736
736
640
656
624
752
736
752
752
688
736
768
816
752
720
784
704
784
768
720
784
784
656
736
624
784
736
736
784
752
704
784
640
672
640
688
656
720
752
800
832
752
672
736
736
704
768
672
704
672
672
752
688
688
688
736
832
656
640
736
736
656
672
736
656
688
736
640
688
800
720
672
624
816
736
656
752
720
752
720
704
640
784
624
768
768
752
736
752
672
800
640
656
688
720
768
768
640
736
704
752
704
704
672
784
752
736
752
656
768
736
656
656
800
656
816
752
768
656
768
672
656
736
768
688
688
736
736
768
784
688
704
640
816
656
688
816
720
656
720
640
656
736
656
736
768
672
720
624
800
752
624
624
640
736
736
720
752
752
736
752
624
672
784
672
656
640
800
768
672
752
784
656
768
736
656
688
656
704
736
768
768
688
768
816
768
784
656
640
688
672
640
752
640
720
720
672
640
640
768
688
624
656
800
640
672
656
672
768
736
656
688
768
640
672
752
832
736
736
672
768
800
704
672
624
736
656
704
768
784
640
768
784
720
688
816
768
656
640
752
640
768
736
800
816
768
752
816
656
768
752
832
816
752
640
640
784
688
752
640
640
768
720
640
768
688
752
720
768
752
784
800
768
720
752
736
704
736
720
784
736
816
672
672
768
768
720
720
672
704
656
736
704
704
720
752
752
816
752
640
736
768
672
656
688
800
720
688
672
720
624
656
704
800
672
736
752
784
704
720
752
672
640
752
720
736
640
816
752
720
784
672
640
736
720
800
640
640
656
672
672
720
752
736
688
752
656
784
640
736
720
752
768
800
624
784
640
768
768
784
736
800
752
768
640
800
736
752
736
768
720
736
688
736
736
656
640
720
784
656
768
704
672
752
752
704
720
656
720
672
832
752
656
640
816
656
752
640
768
752
816
752
752
736
720
752
832
736
704
672
752
640
640
704
752
736
768
640
720
736
816
720
752
736
768
736
736
624
784
768
752
752
608
656
672
688
752
752
640
752
688
688
752
656
752
704
784
752
736
768
704
736
736
784
672
752
752
752
752
672
752
704
640
800
688
736
784
768
736
752
784
656
736
784
736
640
656
688
736
784
816
752
736
672
656
752
624
768
720
784
704
624
800
752
768
752
688
752
784
720
752
720
768
720
784
752
736
720
768
688
736
640
704
656
736
704
736
704
656
640
784
816
736
784
624
672
672
800
656
672
640
784
640
672
784
672
768
752
688
784
672
768
768
800
672
656
624
784
736
688
784
736
688
816
768
752
784
656
720
784
640
800
768
736
672
768
768
640
672
752
688
640
672
752
736
704
768
704
736
640
752
656
768
640
752
656
688
720
752
720
656
656
784
736
752
784
720
624
688
624
640
720
752
640
752
720
656
624
768
832
752
720
656
768
704
704
704
672
768
736
736
736
736
736
768
800
736
736
736
672
720
768
688
672
736
672
624
720
736
784
656
816
704
768
672
704
736
688
768
800
768
672
720
800
768
768
720
672
736
752
800
704
768
720
800
768
640
688
768
800
640
768
784
736
752
688
672
752
704
656
656
672
672
768
720
752
704
672
672
736
752
736
784
672
688
720
656
640
688
720
704
752
752
688
736
672
688
640
720
800
752
640
640
720
720
656
800
640
672
752
736
736
672
768
656
688
784
752
768
704
656
672
768
656
736
672
752
640
736
768
784
800
672
736
624
816
720
752
640
704
656
752
672
768
672
672
736
752
832
656
720
736
736
656
784
624
768
736
752
832
672
656
816
784
720
768
736
768
688
752
784
736
736
736
752
768
720
752
656
784
720
816
656
672
640
736
672
848
736
784
752
816
688
720
704
720
800
736
752
752
736
784
736
656
768
752
720
816
640
672
640
736
768
704
624
752
688
736
624
672
608
752
672
784
704
736
688
688
640
752
672
816
768
720
736
720
720
640
816
640
736
672
752
768
784
736
640
752
688
656
752
784
688
768
816
656
736
672
736
736
768
768
736
768
672
688
656
832
736
704
752
736
736
656
752
752
752
752
704
656
736
624
672
752
800
736
736
704
720
752
640
688
688
704
736
624
768
672
752
768
784
656
752
832
656
672
656
656
672
768
720
688
736
720
768
816
768
784
768
768
640
752
656
784
688
688
784
784
720
688
656
752
736
640
672
768
720
768
640
800
752
784
768
704
736
688
816
736
672
752
752
704
672
768
640
672
736
752
768
720
720
704
800
672
800
736
736
688
656
800
752
784
752
672
752
752
672
640
752
736
768
752
656
768
656
752
656
640
752
656
768
672
672
720
752
672
672
720
768
720
656
768
784
736
656
736
640
736
688
656
752
672
752
736
800
688
672
784
672
752
768
752
768
736
752
784
736
704
640
752
704
688
656
720
752
704
704
768
752
816
704
640
688
672
736
752
688
752
736
736
656
672
736
768
688
768
640
736
752
752
656
800
752
752
656
752
752
752
672
800
736
736
784
704
816
672
656
816
752
720
640
800
672
720
752
736
656
704
720
672
800
608
752
672
768
832
672
656
704
784
736
672
736
656
800
752
768
688
640
720
672
752
720
704
624
816
656
752
656
624
752
784
688
752
784
752
752
688
768
704
688
768
768
752
656
736
848
656
736
688
720
784
704
672
672
672
736
672
656
752
672
656
800
768
720
640
736
752
624
736
640
704
736
784
720
672
752
768
640
656
800
656
816
768
752
672
800
752
736
640
704
752
672
800
752
784
736
752
768
816
672
768
656
768
784
640
672
752
784
672
672
768
656
656
752
720
784
704
736
768
656
768
768
768
688
736
704
736
736
768
672
768
720
752
704
640
704
768
672
736
720
672
768
784
640
672
688
720
656
672
656
736
720
640
768
816
688
624
688
800
736
720
672
736
784
720
800
768
768
816
752
768
672
752
656
736
768
752
656
688
688
672
752
752
768
848
656
784
736
752
672
672
672
672
736
656
768
688
768
656
720
816
640
816
768
656
656
784
640
640
768
656
688
704
720
720
640
736
720
640
784
656
736
688
752
768
752
640
736
752
672
752
768
656
720
752
720
736
720
752
736
752
656
752
656
768
768
768
720
752
688
752
672
752
800
656
752
752
736
720
640
784
816
640
816
736
704
800
720
784
640
656
672
656
784
656
704
736
768
704
736
640
736
784
800
800
736
672
640
816
752
736
752
752
752
624
720
640
816
736
816
624
768
752
752
784
768
832
832
752
672
624
752
768
768
752
672
704
752
640
784
688
768
768
704
768
752
672
656
688
736
752
704
720
736
640
784
736
752
672
672
768
656
736
688
720
672
736
736
656
672
720
704
752
736
640
768
672
656
688
752
640
688
816
752
704
656
816
768
704
752
656
816
688
768
672
720
752
672
752
784
784
656
656
816
752
736
752
800
640
768
768
768
752
640
800
704
640
736
640
752
736
736
752
768
784
640
720
768
656
768
736
800
736
640
768
640
688
736
656
656
688
720
640
816
768
656
752
720
624
736
672
768
656
656
704
672
736
752
768
800
672
640
832
672
768
672
800
672
736
752
752
688
752
752
656
752
768
736
736
608
640
768
784
688
736
752
752
736
736
736
640
752
752
768
784
736
608
672
816
736
736
640
720
736
736
688
768
736
672
656
784
656
656
672
736
768
736
768
752
768
736
672
608
624
752
640
704
736
736
704
672
656
736
672
752
688
704
672
784
768
656
704
688
752
624
656
720
752
768
688
784
768
784
800
656
704
768
752
656
720
736
656
752
720
624
768
672
640
768
736
656
768
656
768
720
800
720
784
672
672
752
704
672
784
704
672
768
688
736
768
704
816
656
752
672
752
752
640
784
752
736
672
768
720
704
736
720
640
672
768
720
736
752
720
736
672
800
624
656
720
784
752
784
672
720
768
640
656
736
768
768
736
720
624
736
656
800
736
784
624
736
672
736
784
736
672
736
672
736
768
656
736
640
704
688
736
720
832
688
736
752
640
752
608
768
688
816
752
736
656
752
752
784
656
656
752
752
768
784
640
672
672
672
736
768
688
672
688
752
752
672
752
704
752
736
720
704
640
656
752
640
736
640
736
736
752
768
768
752
784
720
736
720
816
640
640
624
688
736
736
656
784
640
704
784
672
832
736
688
752
816
688
704
768
736
656
768
656
768
688
656
736
624
784
672
704
752
736
736
752
656
784
592
688
752
704
736
800
784
672
768
768
752
752
752
784
736
656
736
704
752
800
752
704
720
624
656
656
704
656
736
768
672
768
656
704
720
832
640
688
704
704
816
656
800
752
656
672
688
768
752
720
752
672
736
656
752
672
752
736
640
672
656
784
656
704
800
768
672
672
784
704
608
672
720
672
752
752
688
704
736
752
736
672
752
768
768
720
768
720
624
736
640
736
800
640
752
704
640
688
672
640
688
672
720
752
752
656
608
752
640
768
704
736
784
784
640
800
784
768
640
688
672
736
704
752
672
752
752
672
752
752
640
752
800
736
736
656
720
688
752
720
736
640
624
656
784
848
736
736
768
704
656
768
656
752
688
720
656
816
704
720
752
800
752
720
672
784
736
672
736
656
736
752
768
704
624
784
752
752
752
608
784
768
752
672
736
672
688
752
752
752
768
768
752
688
752
640
800
736
736
704
752
656
720
736
816
752
640
672
736
656
672
720
640
688
688
656
752
752
752
736
656
704
672
768
752
816
720
688
720
736
752
656
736
672
720
768
736
784
736
704
720
688
688
736
672
768
608
752
672
720
672
736
736
672
752
688
736
784
736
704
672
672
688
656
672
768
656
816
752
640
672
656
704
768
672
768
800
672
752
752
672
768
656
736
752
784
768
752
720
640
688
656
816
736
656
768
784
720
736
720
656
736
768
656
688
800
784
768
800
688
736
736
736
736
816
640
768
672
736
768
736
640
720
736
656
672
736
736
752
752
784
688
672
656
704
832
752
656
736
688
752
800
768
720
752
752
640
768
624
752
736
752
736
800
656
672
656
832
720
768
768
688
752
704
752
752
720
720
672
752
784
672
656
720
640
656
736
640
752
752
816
752
672
736
752
784
688
784
640
704
784
816
752
688
752
800
640
688
656
704
672
784
752
752
640
656
768
816
768
704
624
736
752
624
736
720
720
656
768
720
688
768
656
784
656
720
784
800
672
816
752
768
752
752
768
720
736
640
800
736
752
784
736
672
736
672
720
736
720
608
784
752
784
736
832
768
736
736
720
720
752
752
816
816
688
672
640
784
704
752
752
736
784
640
816
704
704
672
752
720
816
672
688
752
688
688
768
608
672
736
768
736
752
752
624
752
816
736
832
656
672
768
688
672
752
736
656
752
736
752
720
848
704
640
736
768
784
736
768
640
736
736
800
752
768
752
736
688
720
672
768
736
672
752
736
720
800
736
752
736
720
640
752
816
704
752
672
720
752
720
800
784
672
640
672
800
800
720
736
752
752
816
624
624
656
688
640
752
704
672
656
672
784
752
688
624
752
736
720
752
784
736
816
752
656
672
736
784
736
752
736
688
752
672
624
800
736
768
688
656
656
736
752
736
736
688
640
640
688
640
800
656
752
768
800
672
688
752
672
800
640
640
752
672
688
736
752
640
784
688
736
672
736
608
816
752
784
720
656
768
688
720
752
752
688
720
672
688
656
640
640
720
656
768
672
736
672
704
688
736
736
688
768
672
736
784
704
752
736
800
768
752
720
656
768
656
720
688
672
832
720
640
800
656
752
752
720
624
672
768
720
736
768
784
736
656
688
752
736
736
736
704
672
640
768
688
656
656
688
656
720
752
688
704
704
672
720
640
704
752
752
768
608
816
768
736
800
768
672
768
720
624
752
736
656
656
784
672
752
752
736
752
656
752
640
688
768
656
752
672
656
752
704
688
640
672
704
800
720
736
704
736
784
768
752
688
768
768
768
720
752
752
752
752
672
752
768
768
640
768
720
672
736
752
672
736
672
752
656
704
672
672
736
784
704
768
800
736
752
752
672
736
736
784
768
800
736
752
688
656
640
752
752
784
752
704
768
656
768
800
752
768
656
752
816
672
672
704
704
720
768
736
688
736
800
656
800
704
672
800
640
640
784
768
656
768
704
656
736
672
672
624
752
736
768
624
704
688
768
752
640
688
656
736
656
736
688
656
768
752
640
736
784
736
688
656
800
640
704
752
688
752
784
656
688
816
656
640
752
688
784
656
688
736
736
688
672
688
656
800
656
768
672
752
736
800
800
720
640
768
784
672
672
784
720
640
640
752
720
672
768
688
752
640
736
672
688
768
768
768
752
720
720
704
832
752
656
672
752
768
656
816
752
704
784
752
816
688
672
752
704
752
768
720
688
656
672
656
688
752
752
736
656
768
768
752
736
768
656
640
720
736
752
736
736
752
784
656
768
704
736
736
816
640
736
624
672
752
768
640
784
640
784
784
672
672
736
688
752
768
720
640
816
704
736
816
736
816
656
800
736
736
752
784
768
720
736
752
672
720
768
752
704
672
736
688
752
736
640
736
768
672
640
640
752
640
736
720
672
768
688
752
768
656
768
784
768
784
752
640
736
672
640
704
736
752
784
752
688
720
752
752
672
640
768
752
800
656
752
816
720
640
784
736
768
624
736
720
736
656
720
672
752
720
832
752
832
736
752
736
640
752
736
704
688
672
768
672
784
656
704
768
736
672
720
800
672
768
784
624
832
656
736
768
752
800
672
784
816
784
736
704
688
800
704
672
656
736
768
736
720
784
736
688
720
656
656
752
736
768
640
640
656
800
656
752
768
816
720
752
688
768
736
672
736
752
752
800
752
736
688
800
752
768
768
752
768
688
768
752
752
736
736
704
768
736
768
800
736
720
800
608
736
640
768
736
720
768
688
768
624
752
784
736
768
672
800
624
752
688
736
656
752
816
720
752
736
720
752
752
784
752
688
656
752
752
816
736
784
672
656
656
768
656
736
768
768
624
800
736
832
656
688
640
720
752
720
800
752
704
720
672
736
736
736
736
784
784
688
672
736
656
752
656
720
624
672
752
736
784
640
720
736
656
768
784
752
736
768
768
624
736
736
640
640
656
640
640
752
720
656
640
752
624
656
704
672
736
672
656
736
672
688
656
672
656
736
752
832
624
736
736
736
736
656
736
720
768
800
752
752
656
688
720
752
736
800
752
752
704
656
752
736
640
688
688
752
688
752
720
736
768
736
784
784
640
784
752
752
784
768
752
784
736
784
720
688
704
800
768
784
752
640
688
736
752
656
752
736
800
736
656
752
752
704
752
800
736
752
640
736
672
640
736
704
800
704
736
672
672
768
640
656
656
624
640
736
736
768
736
688
656
784
752
688
784
736
672
800
672
672
736
720
624
752
800
672
688
736
736
688
752
784
736
752
736
704
752
752
784
720
688
640
704
688
656
672
816
752
672
720
752
752
752
752
752
816
624
720
752
752
736
720
800
736
736
800
736
672
768
656
704
656
672
688
688
672
784
688
816
672
752
768
656
784
720
752
752
720
752
736
752
768
624
656
704
688
832
640
672
640
720
752
704
768
800
736
656
688
672
752
704
704
720
752
800
784
688
720
768
752
752
768
800
720
640
752
672
768
768
752
752
672
736
672
688
752
800
672
688
736
768
768
688
736
752
752
704
752
640
736
656
688
736
656
688
768
736
768
672
768
688
736
736
736
752
784
784
752
768
608
832
656
752
752
752
672
656
656
784
736
752
688
704
720
672
752
688
800
752
752
800
688
752
736
752
768
768
736
752
816
768
736
672
736
672
784
736
736
784
752
768
752
640
736
736
672
672
784
752
688
672
656
720
688
656
752
640
720
736
768
752
624
736
704
656
832
736
752
768
640
656
640
656
672
704
640
752
768
752
752
688
736
656
752
816
672
704
656
736
704
800
736
656
768
816
672
784
768
672
736
800
736
768
672
784
752
752
656
640
800
800
784
768
800
736
800
640
752
752
816
752
752
688
656
768
640
736
816
752
736
640
816
736
672
640
784
656
672
752
672
736
784
640
736
736
768
736
672
752
736
768
736
640
768
752
752
784
672
656
736
688
736
816
784
656
800
768
656
656
784
768
656
672
800
768
688
768
752
800
656
720
672
832
736
688
656
672
688
768
752
704
688
784
736
688
768
832
752
640
816
624
768
656
768
720
816
752
672
704
752
736
704
736
720
624
784
656
736
752
672
784
800
672
688
768
688
752
688
752
752
752
784
768
784
752
784
816
736
720
736
656
736
624
752
720
720
752
720
784
752
752
752
816
656
736
736
656
704
736
752
752
672
736
752
736
736
800
784
736
688
752
720
752
736
640
720
800
624
768
688
688
752
624
672
720
752
736
768
720
736
752
816
816
752
784
752
672
720
784
768
768
704
672
752
640
736
752
784
672
768
736
736
736
672
752
640
688
736
736
672
768
752
704
688
624
656
752
816
624
720
752
640
752
608
688
640
720
816
672
688
640
768
656
720
768
752
784
752
672
640
688
816
640
720
736
688
752
736
688
816
656
768
704
720
736
784
752
800
736
768
784
688
672
736
752
656
752
736
800
784
784
768
800
752
736
768
752
672
784
704
640
688
736
656
640
736
752
720
672
752
720
640
736
768
640
640
800
752
816
720
752
752
608
768
752
720
640
720
752
656
640
736
752
800
720
768
656
736
784
768
688
832
768
656
720
784
800
736
704
752
672
640
656
656
704
688
800
768
784
656
832
688
736
656
640
736
720
736
720
800
672
736
704
736
736
768
736
752
736
688
752
656
784
752
784
688
752
752
768
640
720
784
784
704
752
768
752
672
656
656
720
736
736
736
704
768
720
768
768
768
768
720
768
736
688
784
752
720
752
752
784
736
768
672
736
768
656
736
736
656
656
752
768
640
688
720
752
752
720
656
688
720
736
704
608
704
720
752
784
736
640
800
736
784
736
784
784
736
656
720
800
656
720
672
736
736
768
848
672
720
640
768
672
800
752
672
768
672
656
752
656
784
656
768
784
736
752
752
656
640
624
784
784
752
768
720
672
784
656
752
704
752
640
640
672
752
752
768
752
656
720
752
688
672
752
720
672
752
768
784
688
752
784
640
768
768
752
656
688
736
704
656
816
704
640
688
816
704
656
656
784
656
768
672
736
768
656
752
672
800
672
704
672
752
768
640
816
752
640
640
720
768
752
720
736
720
800
720
672
752
768
640
784
720
640
736
752
720
672
736
672
656
672
640
752
768
736
768
736
784
784
768
816
640
768
736
672
672
768
736
784
624
752
784
736
800
688
768
784
800
656
656
656
720
752
688
768
672
800
752
752
752
688
720
768
832
608
704
768
688
640
672
800
752
752
768
800
640
816
752
752
688
736
752
720
768
736
800
752
736
736
784
736
768
720
704
736
624
640
768
768
768
752
736
752
704
768
688
752
800
672
720
640
768
752
736
720
768
752
768
736
752
768
672
736
832
768
720
736
736
656
784
768
688
640
720
656
720
672
736
640
704
768
752
736
816
640
640
784
720
736
656
816
672
720
720
784
640
768
640
752
784
672
640
736
784
768
656
720
608
736
752
752
752
784
672
784
800
736
720
720
752
720
656
768
720
672
736
800
688
784
688
752
672
672
752
736
736
752
656
672
768
736
688
832
656
768
720
736
672
752
704
672
784
688
672
736
656
720
736
752
736
752
752
736
816
640
784
656
752
816
736
688
736
672
800
736
800
720
768
784
736
768
704
640
720
752
736
736
752
640
752
688
640
640
768
704
656
752
816
752
752
752
816
736
752
752
624
640
752
800
656
720
672
800
752
736
656
752
768
752
656
752
736
704
656
656
656
800
768
624
736
752
752
736
704
720
704
752
704
752
800
720
672
672
752
736
784
672
784
720
768
784
688
752
640
656
688
624
672
656
752
640
672
736
752
656
784
672
768
656
752
752
704
784
752
736
832
752
640
704
752
656
784
816
752
640
688
768
640
768
640
752
720
752
736
624
736
672
768
736
704
752
768
736
752
784
800
768
672
640
688
672
768
736
752
752
768
768
688
768
752
768
768
720
784
640
640
672
720
752
672
656
736
672
688
816
768
784
784
752
688
656
688
800
672
704
784
768
784
656
704
752
656
672
688
736
752
656
736
784
736
752
672
624
768
736
720
768
640
640
688
688
720
768
672
736
672
736
640
752
816
656
768
752
672
736
736
640
768
736
624
736
768
640
704
800
784
736
720
688
704
768
816
720
656
672
656
752
768
832
736
800
672
640
768
768
736
656
736
768
784
752
656
624
768
688
752
784
640
784
656
752
784
736
768
704
640
736
736
784
720
752
768
672
624
672
704
768
656
752
800
800
720
640
688
848
656
656
720
656
736
752
752
768
800
752
768
768
736
720
752
672
752
688
816
672
688
640
768
800
848
672
688
704
784
768
672
816
736
720
624
752
672
656
832
736
672
640
752
768
720
656
800
672
640
656
624
688
640
672
656
736
624
656
752
752
720
704
768
640
768
768
800
688
656
720
752
672
672
720
736
672
640
704
672
672
736
720
640
672
768
800
672
720
752
624
768
768
624
752
736
800
640
768
720
672
736
672
736
704
736
592
736
736
736
736
768
720
720
656
736
800
672
768
768
752
720
768
752
720
800
752
656
656
752
752
688
656
736
672
672
720
784
768
688
640
672
624
688
736
656
640
736
800
816
768
672
752
752
768
720
656
800
736
624
752
784
784
672
768
784
752
736
640
688
832
704
624
752
736
752
720
768
640
704
768
800
656
768
736
688
656
768
752
816
608
704
656
816
752
704
736
752
672
816
752
736
752
688
736
720
736
784
832
688
736
704
672
672
736
656
624
720
736
752
640
672
736
736
832
736
784
640
704
720
800
720
624
752
784
752
672
672
768
784
752
736
784
800
704
672
704
752
768
704
672
720
656
656
784
768
736
608
784
736
720
736
672
720
720
672
704
624
736
672
768
752
784
784
736
736
720
672
736
768
688
720
672
768
736
832
752
704
720
736
640
784
752
752
752
640
768
768
752
736
752
736
656
736
656
752
752
656
736
720
640
736
768
656
736
640
768
752
640
752
640
832
656
736
736
720
640
752
640
688
768
720
752
736
736
704
752
704
704
736
752
736
736
720
752
720
672
672
752
688
752
656
736
640
640
736
832
736
768
656
640
704
640
752
736
688
656
768
656
720
752
640
752
672
656
752
672
720
720
640
704
672
688
768
784
768
720
688
768
656
704
736
688
640
704
688
640
752
816
752
752
752
736
704
752
752
768
752
672
768
752
752
736
752
752
752
736
720
816
656
688
688
736
688
640
768
768
800
752
608
720
688
736
752
736
736
752
736
720
656
768
768
656
752
640
752
640
640
752
752
752
736
736
672
736
816
752
640
768
800
624
800
736
672
752
704
784
640
736
672
672
768
672
672
752
752
752
624
720
752
656
624
752
768
656
720
752
656
736
736
800
640
752
656
752
752
640
640
784
816
688
768
768
672
688
800
688
848
736
752
720
720
816
736
720
640
736
608
720
752
688
752
672
640
752
752
816
752
752
656
752
752
704
672
688
768
720
640
784
640
752
720
688
752
640
752
688
704
736
768
720
720
624
704
784
752
736
688
832
688
720
752
688
688
656
656
816
704
736
784
736
816
640
640
640
768
768
848
768
800
656
656
720
704
720
656
752
672
736
768
656
736
784
688
704
736
752
752
720
736
768
672
624
672
768
656
768
720
720
736
768
816
672
752
688
688
816
736
672
688
752
816
720
704
656
656
640
752
752
752
656
736
672
768
720
784
704
752
736
736
752
736
736
672
816
656
624
688
800
656
688
752
736
768
816
768
832
768
816
640
736
752
752
784
640
752
672
640
768
720
720
768
768
736
752
736
656
672
768
768
656
800
752
640
784
640
768
736
752
656
752
656
768
656
768
656
736
752
800
768
752
704
752
752
720
640
688
672
656
768
768
736
736
704
768
768
800
624
752
720
640
736
720
624
752
736
832
736
736
736
640
768
688
752
640
768
640
736
752
816
720
672
640
656
784
736
672
624
720
736
688
736
816
784
704
704
640
720
800
656
752
752
672
736
752
752
704
736
656
672
656
736
656
672
768
736
752
656
768
784
656
640
752
752
672
672
720
768
736
768
736
656
752
672
688
768
800
752
752
640
800
736
816
752
704
768
768
736
768
768
656
640
736
688
640
624
672
720
768
784
768
752
672
752
672
704
672
624
800
624
784
624
768
816
656
768
736
768
752
752
688
720
784
752
752
720
752
624
752
736
672
736
752
672
752
736
752
624
688
784
752
768
768
656
688
720
720
656
768
736
736
736
768
736
752
752
752
752
752
768
768
736
640
752
720
656
736
656
784
624
768
720
736
736
816
752
688
624
656
800
768
672
784
752
720
752
752
656
752
672
720
784
768
672
704
656
736
800
640
784
784
720
752
816
736
736
752
672
704
752
752
800
784
672
800
720
672
640
800
624
720
752
752
656
816
752
672
752
768
784
752
672
768
768
768
672
720
688
784
736
688
736
736
800
736
816
704
640
768
672
768
752
752
688
768
736
640
640
736
656
704
704
752
640
752
736
752
768
688
656
752
672
736
800
784
800
656
640
720
640
688
800
704
656
720
784
752
656
704
672
736
656
752
640
736
784
656
704
736
656
800
672
656
768
784
640
800
704
672
672
784
688
768
656
704
736
624
688
752
656
752
768
640
768
752
688
784
768
768
752
752
800
768
752
640
784
784
832
768
768
752
816
752
720
704
736
736
688
800
784
624
752
640
752
816
640
672
704
752
752
672
688
736
768
736
688
656
656
672
752
768
736
752
736
720
768
736
816
704
672
768
768
656
720
768
608
752
656
784
752
736
672
832
736
784
640
640
800
720
672
656
768
704
688
736
784
656
736
752
736
656
800
736
784
720
752
704
752
816
672
656
752
640
704
736
640
704
736
768
752
688
736
688
656
640
656
656
672
752
752
672
768
752
624
768
640
656
768
656
736
736
688
784
672
752
736
624
736
752
752
704
656
784
640
752
768
752
736
640
656
688
736
672
784
736
720
800
752
720
768
784
688
752
592
752
736
736
688
768
768
640
752
768
752
736
656
672
704
736
784
720
736
736
688
768
720
736
752
656
688
640
736
720
768
720
704
784
784
736
752
736
736
624
752
800
640
720
752
688
672
656
736
640
768
656
688
768
688
688
736
768
704
688
752
688
752
720
656
704
672
784
736
672
768
624
640
672
720
640
656
704
640
752
768
688
752
768
736
800
672
640
720
640
784
816
624
720
752
752
672
688
672
736
736
784
736
640
640
688
752
752
640
736
656
656
736
768
704
672
736
656
672
720
768
752
656
768
688
768
720
752
752
752
704
752
784
736
704
752
736
720
688
736
736
816
816
736
752
688
800
752
768
704
656
672
832
768
720
768
640
752
736
736
640
736
688
736
704
720
640
656
640
624
768
800
752
640
752
704
640
736
656
720
720
656
768
736
656
784
800
736
768
816
672
752
736
768
752
784
768
640
752
800
672
768
752
704
768
656
672
688
768
752
752
704
736
848
640
656
784
784
752
752
736
704
672
720
800
704
736
720
736
640
704
624
608
752
800
656
640
832
752
800
752
688
768
672
752
736
720
768
736
672
640
816
672
768
640
784
816
752
768
640
688
768
768
688
704
736
768
688
784
672
800
752
672
672
672
720
752
688
736
784
720
768
752
816
688
688
672
672
736
768
672
768
752
720
752
640
688
656
640
768
736
704
768
752
704
656
688
752
752
816
784
624
768
768
768
656
672
752
640
768
736
784
624
704
656
704
736
768
688
672
704
768
688
672
736
640
656
752
752
640
704
640
640
768
608
752
784
720
752
624
752
768
816
752
800
752
656
736
704
640
768
736
800
768
720
624
688
800
736
800
720
688
768
752
752
624
656
736
784
656
768
640
640
656
624
768
672
640
736
688
736
752
704
752
752
736
752
736
832
736
768
816
672
768
768
784
656
768
784
720
656
768
672
752
736
672
656
816
784
832
768
624
656
704
688
640
656
656
656
784
816
640
720
768
720
656
736
720
736
704
720
688
752
720
768
672
768
688
624
704
656
656
640
800
736
768
768
752
768
688
672
672
800
736
784
752
736
784
672
736
656
784
784
704
656
752
624
816
752
736
768
784
752
768
752
672
752
816
736
752
720
672
704
768
656
784
624
688
656
608
752
720
720
720
752
768
800
752
720
752
736
736
720
656
784
720
736
672
736
688
736
608
784
672
736
720
736
736
608
784
752
768
800
736
784
736
640
720
736
656
672
704
656
800
752
736
640
816
752
768
752
800
768
784
800
832
656
752
784
720
752
768
656
768
736
736
768
784
752
768
736
800
640
736
736
688
736
688
688
688
720
800
752
688
688
752
688
720
784
784
640
784
672
752
800
720
768
656
672
720
736
816
736
752
816
720
704
752
800
832
768
736
800
752
704
816
640
752
720
704
736
752
624
752
720
768
672
672
752
704
624
752
640
768
640
672
656
752
752
672
752
752
752
688
752
672
736
736
704
736
672
800
720
816
752
784
656
768
656
656
832
768
736
832
736
672
720
720
816
656
752
816
752
672
688
768
704
672
768
736
768
784
736
672
688
720
752
672
768
720
640
656
688
848
752
752
768
736
704
752
720
736
752
752
720
720
752
768
752
656
640
752
688
656
768
736
752
752
720
576
688
752
752
736
720
752
736
736
752
784
736
736
640
832
736
752
656
752
752
688
752
768
784
752
768
704
784
656
784
736
672
768
672
688
784
736
752
688
704
768
688
752
800
752
752
704
768
656
688
640
672
720
784
736
752
688
752
736
768
720
656
688
752
752
688
656
736
672
624
800
672
736
800
800
720
752
752
752
736
720
624
688
816
640
784
784
752
720
768
640
704
640
768
752
672
800
768
768
736
624
688
736
784
688
768
800
656
736
752
704
640
704
736
656
768
752
640
816
640
752
656
800
736
752
640
656
768
624
704
736
768
736
752
672
800
736
752
736
736
752
800
720
720
736
720
784
688
656
736
640
736
784
736
752
752
672
768
656
736
784
752
736
784
752
656
784
816
720
752
768
752
752
656
704
672
640
720
688
608
640
688
736
624
656
736
672
656
784
688
752
768
640
752
800
736
640
720
720
768
688
784
768
752
752
704
640
768
640
752
752
688
656
720
768
752
672
688
768
784
640
800
688
768
816
736
704
720
768
800
656
800
672
768
736
720
720
752
640
672
752
752
768
688
704
752
656
752
752
736
656
752
752
736
800
736
640
752
672
752
768
704
656
624
704
736
672
672
736
736
768
688
736
768
704
752
672
656
752
768
736
720
784
688
752
800
752
688
768
656
704
736
656
736
768
752
672
752
752
752
704
768
752
688
672
624
736
736
640
752
736
736
720
656
688
640
736
656
720
784
736
768
656
720
752
736
752
752
784
752
752
640
784
752
640
768
752
752
736
752
736
624
736
656
768
672
720
656
768
704
832
736
688
752
736
736
640
784
704
640
752
768
688
736
672
800
768
672
752
720
656
656
704
736
672
736
816
752
752
624
736
672
736
640
672
752
736
752
736
624
688
656
800
672
672
656
752
736
752
752
640
784
720
656
768
752
736
736
624
752
752
752
752
640
800
736
736
752
752
672
720
768
656
736
656
672
768
720
640
800
736
656
720
768
656
800
720
752
800
672
656
768
656
752
784
656
640
672
720
768
736
752
736
672
720
656
656
736
720
768
736
752
624
800
752
656
704
624
656
736
752
736
736
688
704
784
704
736
736
752
640
752
640
640
688
752
768
832
832
736
736
832
768
784
752
704
672
768
656
752
736
768
656
720
752
640
784
672
768
688
768
800
800
656
736
752
800
736
752
672
656
768
784
720
736
752
768
752
624
768
640
688
752
736
768
672
688
640
688
640
816
624
704
720
752
640
656
784
784
752
784
752
624
768
672
736
656
832
640
784
672
704
672
672
848
704
656
736
736
720
752
736
752
752
736
736
752
736
672
800
752
800
672
752
656
704
752
752
768
816
736
784
624
656
656
624
768
752
688
752
640
752
752
752
656
768
800
720
752
752
704
720
752
672
640
640
736
736
752
736
832
752
672
736
624
752
688
736
784
736
704
784
640
736
672
720
656
784
656
768
816
768
784
688
656
736
736
752
720
672
720
640
656
784
736
752
736
816
704
736
752
720
736
640
672
672
640
656
624
720
784
736
736
752
736
752
800
656
704
672
752
752
704
736
640
768
752
736
752
656
736
720
688
752
784
752
768
784
816
688
752
784
736
736
800
688
816
704
752
736
784
752
720
640
672
736
720
656
736
752
736
624
768
800
720
672
784
672
752
720
736
736
736
656
752
784
752
656
784
640
656
768
736
640
736
640
688
736
752
736
736
672
768
752
656
816
640
768
752
768
688
720
736
768
800
736
688
672
800
736
688
816
768
752
752
672
688
752
752
640
624
752
784
672
736
656
672
736
672
704
720
640
720
640
752
720
752
800
672
672
816
640
672
656
672
704
736
784
736
720
784
704
784
752
672
688
720
752
768
784
688
656
752
800
640
656
752
768
656
704
736
736
784
672
784
816
784
768
784
656
672
752
736
752
752
688
672
672
784
704
624
752
752
752
736
784
656
704
672
752
672
784
736
768
672
768
816
672
720
720
736
736
752
656
768
656
624
688
784
736
672
784
784
736
656
704
720
752
752
672
832
640
688
720
768
752
752
752
640
720
672
640
704
752
752
768
752
752
720
656
704
688
752
704
752
768
752
784
832
736
656
752
752
736
816
768
800
736
768
752
672
784
656
768
672
752
656
752
688
752
752
656
752
752
816
736
736
784
736
672
752
752
624
640
752
736
656
768
768
720
656
768
752
672
624
640
768
672
736
768
736
656
704
800
640
768
784
768
784
768
736
736
752
720
720
768
816
688
624
752
784
784
736
768
768
688
752
800
752
768
752
752
720
672
656
752
752
688
816
768
640
704
672
656
640
720
688
752
720
640
640
736
848
656
768
640
736
784
752
784
656
688
800
656
768
752
672
784
768
784
720
752
752
768
688
704
816
656
768
640
752
624
736
704
736
656
768
704
704
640
768
832
736
736
752
720
768
656
672
784
736
656
736
768
720
720
736
784
736
784
624
832
720
752
736
768
816
720
816
656
784
624
768
752
720
656
784
688
768
624
656
672
688
736
736
656
672
752
720
704
752
624
656
704
832
768
784
800
768
720
720
752
688
752
736
656
752
704
624
688
752
688
736
752
704
816
736
752
800
752
688
624
640
816
624
672
816
704
752
752
656
736
736
656
736
624
752
656
736
784
752
768
672
816
720
656
784
672
752
640
720
672
768
784
624
720
736
656
752
720
752
752
688
640
752
656
768
720
736
640
704
720
656
672
752
672
768
752
672
752
752
768
832
736
656
752
656
736
656
752
656
672
640
784
768
800
768
816
752
736
736
720
720
704
736
752
800
736
752
704
688
704
736
736
784
736
672
656
784
800
736
752
752
704
640
720
832
656
800
816
800
720
768
752
736
624
736
720
720
624
688
768
784
672
624
752
656
672
752
672
736
656
672
752
656
704
656
752
640
800
752
736
656
672
736
688
752
720
656
720
768
720
640
736
768
752
736
784
688
736
720
768
784
640
688
800
736
752
736
640
688
736
688
752
768
768
736
768
720
816
736
736
768
672
752
736
752
672
784
688
752
656
672
720
752
784
736
784
688
704
800
656
704
656
672
688
768
752
752
736
736
720
736
752
640
768
736
688
736
736
624
752
736
752
768
832
752
752
752
672
736
816
768
720
656
736
752
704
736
752
800
672
736
800
768
672
752
752
800
752
656
752
752
688
736
736
752
688
736
736
752
752
752
704
656
736
720
784
752
768
736
624
736
720
736
720
672
688
656
784
640
656
672
672
752
752
672
784
656
736
656
720
800
704
752
672
768
784
672
736
624
720
752
768
768
704
672
768
800
768
800
752
640
816
800
736
656
768
656
752
672
736
736
736
736
720
752
784
736
720
752
672
736
752
784
656
736
656
816
720
752
672
768
800
832
736
720
800
768
800
640
720
672
720
640
672
720
640
768
656
768
720
672
752
752
688
752
640
832
640
656
672
608
656
816
752
784
784
768
672
736
752
672
752
736
656
640
768
752
832
656
720
752
784
688
768
672
720
640
752
672
752
768
672
672
768
640
784
688
656
784
752
704
752
736
752
720
736
736
752
720
640
688
736
800
672
736
736
640
768
752
720
640
768
768
688
640
768
720
784
768
768
720
656
656
720
736
736
656
688
800
704
752
848
768
768
720
768
768
848
752
720
784
768
784
720
800
768
656
768
800
720
768
752
816
656
816
640
640
704
656
688
640
720
656
688
720
736
752
752
752
720
768
672
736
672
752
720
672
720
672
688
736
688
640
688
656
672
688
768
656
672
640
688
704
672
720
752
800
800
768
768
656
752
736
752
752
752
768
656
656
688
768
704
736
656
704
624
736
752
720
768
768
704
736
656
752
736
752
752
752
704
736
656
672
752
736
688
624
720
640
656
672
784
720
672
784
688
736
656
672
752
784
720
736
784
752
752
736
688
752
672
736
704
752
656
688
800
688
656
784
800
752
752
752
656
704
736
656
768
624
752
752
720
736
688
736
704
656
688
736
752
752
752
672
736
736
672
816
752
704
640
784
720
736
768
736
752
640
672
736
640
768
768
752
784
704
736
800
736
688
672
800
752
736
736
624
768
752
768
656
768
752
704
752
848
688
768
784
752
736
672
752
720
736
656
656
736
640
704
672
672
688
688
752
672
656
784
816
656
736
656
656
656
752
784
768
752
720
656
736
688
656
832
736
816
640
720
768
752
624
784
768
736
800
640
704
656
704
672
720
672
768
688
720
752
704
624
800
688
736
736
752
736
800
736
768
752
800
656
816
736
672
736
800
752
752
656
832
688
688
640
784
736
736
752
800
784
768
752
752
688
736
736
640
656
656
688
720
720
736
688
720
704
736
736
816
640
768
752
640
736
752
784
752
816
688
800
768
800
656
736
672
672
672
752
640
656
720
656
816
720
656
656
768
720
768
768
752
736
640
768
656
688
688
688
800
784
736
720
656
688
784
656
688
736
768
752
752
736
672
736
688
752
672
736
768
736
704
736
800
784
720
704
736
752
768
752
656
704
656
784
624
832
736
752
720
752
752
800
768
656
640
736
752
704
768
656
656
784
736
672
800
784
768
736
672
640
752
752
640
672
736
800
672
768
720
752
688
768
736
656
752
736
704
752
640
752
656
688
704
672
768
768
736
640
640
752
672
672
656
608
784
624
752
736
784
720
656
672
640
656
672
704
752
688
688
752
640
752
656
720
768
672
768
688
656
752
752
688
816
800
832
640
736
784
736
752
752
736
736
688
688
768
784
640
832
784
736
672
784
768
752
672
672
688
736
736
736
688
784
720
624
640
752
736
624
768
816
672
672
688
656
800
736
736
736
752
656
736
640
752
688
736
736
672
752
736
784
656
720
768
720
688
688
768
688
656
768
800
672
736
672
768
672
800
736
688
752
768
672
784
688
752
752
624
640
736
736
672
784
752
656
752
752
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
368
656
736
752
752
672
720
736
624
656
736
752
640
768
752
688
704
720
784
736
688
752
768
720
768
768
672
768
736
800
640
768
736
752
752
672
752
752
688
720
704
672
784
720
672
672
752
784
736
784
704
672
816
752
752
672
752
752
784
752
768
656
800
800
672
672
640
640
768
656
816
752
768
736
656
704
624
752
672
752
768
752
720
784
752
784
768
720
672
656
688
752
656
720
768
688
800
592
720
768
800
768
720
704
752
752
736
656
752
736
672
752
736
672
656
656
752
736
624
672
752
768
640
752
688
640
656
704
720
736
672
768
656
736
720
768
720
816
784
800
800
656
736
816
688
672
688
656
720
672
752
656
720
768
656
720
688
656
784
752
752
640
752
784
688
704
672
752
672
736
672
736
736
704
736
768
784
752
816
672
720
752
720
752
640
736
640
784
656
640
656
768
784
640
688
736
736
672
656
784
768
688
704
752
736
752
768
688
688
704
720
688
704
736
784
624
672
656
752
816
720
784
752
752
704
768
768
768
656
688
640
672
752
656
640
656
704
752
752
800
752
768
736
672
672
672
736
800
656
784
688
688
768
656
704
784
800
720
720
672
752
784
752
800
752
704
768
688
704
816
768
752
784
736
752
736
720
688
720
688
640
688
784
720
704
752
752
656
624
688
768
736
816
688
656
736
752
688
752
784
736
640
768
608
736
672
640
736
832
784
656
656
848
672
656
720
688
800
704
720
752
800
752
672
688
688
752
752
752
672
736
768
656
720
736
656
736
736
672
784
720
688
752
656
752
752
640
656
832
704
800
640
640
624
656
736
768
640
768
784
752
768
768
656
736
640
816
720
656
656
720
736
720
752
752
768
768
752
688
784
672
672
800
752
816
816
656
672
784
672
768
704
672
640
752
688
752
768
784
672
720
736
784
768
752
752
752
736
688
736
752
640
784
768
768
736
688
720
736
736
704
640
656
656
736
672
720
768
688
736
736
736
720
768
832
720
832
736
768
640
624
800
656
688
752
640
736
656
768
768
720
656
656
640
752
704
688
720
720
736
752
672
736
720
720
672
688
704
656
720
752
752
688
752
752
752
736
624
752
656
672
720
640
656
736
656
752
736
672
640
752
752
736
736
736
752
800
720
736
800
752
640
752
656
800
640
768
736
800
752
736
640
752
656
736
752
816
608
768
752
752
608
624
672
784
736
624
688
688
736
752
752
784
736
784
752
784
640
672
848
768
768
768
672
784
736
752
784
784
656
624
752
640
752
768
656
800
688
784
688
672
656
736
736
720
752
688
768
688
688
832
720
784
752
640
784
672
752
688
672
624
768
736
704
720
736
768
768
672
752
720
800
640
672
752
736
672
768
736
752
672
736
752
720
656
656
768
784
832
736
784
816
736
656
656
736
672
720
736
736
624
736
688
704
736
768
832
736
768
688
752
784
752
752
752
752
800
736
800
736
736
704
688
672
784
624
672
736
640
800
752
656
672
768
704
768
688
688
720
624
640
640
688
752
624
736
800
736
752
816
656
736
640
656
672
640
784
752
816
752
672
672
800
688
656
688
784
768
752
768
736
736
688
704
736
816
768
672
768
672
784
768
768
752
624
640
736
736
688
736
736
704
816
752
768
800
736
624
752
752
720
768
704
624
752
784
752
656
736
736
672
688
688
784
656
720
752
672
736
784
768
784
768
816
656
784
640
640
640
704
736
800
768
768
640
768
768
640
784
800
768
800
720
752
704
736
752
736
704
784
736
720
672
752
816
656
640
752
736
736
720
768
752
752
768
736
736
768
752
752
816
672
784
720
688
640
720
720
784
704
656
768
752
720
720
640
672
688
736
784
784
656
688
752
736
784
768
768
688
816
816
720
784
832
784
752
672
752
720
688
752
720
672
832
624
784
768
736
624
752
640
656
704
768
672
640
736
656
736
720
672
768
752
752
752
688
656
752
752
688
688
768
736
752
752
768
752
720
768
752
656
704
752
704
656
752
832
688
720
688
720
752
752
688
720
704
640
800
720
784
672
752
656
752
752
736
720
816
688
752
656
704
768
672
752
720
656
656
784
736
832
736
736
688
672
752
736
832
688
672
752
768
752
768
752
768
656
640
752
640
672
624
688
720
736
736
752
640
768
768
640
656
704
640
656
816
752
688
768
736
752
800
736
672
656
816
752
768
800
656
768
752
784
736
656
704
800
768
768
704
640
672
752
752
688
704
752
672
688
768
800
672
672
784
752
736
656
848
656
640
720
752
640
656
656
752
800
720
736
672
768
640
672
624
816
752
672
768
704
736
768
704
752
720
736
672
640
656
752
784
704
704
784
736
768
736
640
736
736
624
736
752
752
816
624
816
752
704
640
672
752
704
816
752
800
656
768
688
736
736
720
736
784
656
640
624
688
768
672
640
736
736
688
624
768
768
736
752
752
768
768
672
736
704
624
768
736
656
720
752
768
752
688
688
704
768
784
736
624
800
672
640
784
752
784
640
752
832
672
736
768
720
656
752
672
752
720
704
736
656
720
720
752
720
736
768
704
752
784
704
656
752
656
768
768
672
736
640
720
720
704
768
656
704
688
736
688
736
832
672
704
672
784
736
672
736
768
784
688
736
656
784
640
672
752
704
752
736
672
688
704
656
800
768
768
656
720
688
736
784
656
656
752
736
720
768
752
720
640
656
640
768
704
736
720
688
720
752
688
720
768
656
832
800
640
704
656
752
768
784
784
752
736
768
736
640
672
656
752
768
752
768
736
688
768
720
688
768
736
784
704
656
624
768
768
784
784
656
720
688
784
688
720
656
736
720
720
624
736
688
672
752
688
768
656
672
752
720
720
752
688
720
752
720
656
608
656
736
720
784
768
752
736
736
688
768
720
832
720
656
624
656
752
656
704
768
784
672
704
768
752
768
672
752
736
688
624
640
688
672
704
768
816
736
752
672
640
704
752
800
672
752
800
656
656
784
752
768
640
688
752
704
640
704
736
752
736
752
640
688
800
736
816
736
768
704
736
624
752
720
720
752
768
704
608
640
720
752
768
768
800
640
704
736
688
768
656
784
784
688
816
784
752
688
704
768
768
640
816
752
800
752
768
768
784
640
704
704
752
672
752
688
624
704
720
752
800
752
736
752
768
704
656
704
720
752
624
688
800
736
768
656
768
784
624
656
816
736
736
688
688
672
768
640
768
704
672
720
768
736
672
736
768
752
736
816
640
768
656
752
656
800
752
784
704
752
800
736
768
768
784
672
704
752
752
768
688
736
752
672
720
720
736
720
752
704
768
768
640
656
736
720
640
736
768
704
768
816
736
736
752
688
752
640
624
816
624
688
736
656
752
720
752
640
640
752
784
832
656
640
688
720
640
672
640
736
736
800
784
768
656
736
816
736
800
640
752
784
784
624
672
752
752
736
736
800
736
640
784
688
752
720
736
768
752
640
656
736
784
784
704
752
688
688
672
768
736
752
752
704
688
768
752
704
720
752
624
656
768
768
736
656
704
656
784
752
704
624
720
736
656
736
736
640
752
672
672
688
768
768
672
768
640
688
624
784
720
640
672
720
784
704
784
752
752
768
624
672
656
720
704
752
704
640
752
768
768
688
768
768
736
640
800
640
624
688
736
752
752
768
672
640
688
720
752
768
656
816
672
720
624
656
688
752
752
624
816
752
752
640
800
768
720
752
752
704
752
768
752
736
640
752
688
768
768
688
640
656
688
656
736
768
720
768
736
720
672
752
640
736
704
736
656
784
800
720
752
784
672
672
704
656
736
784
752
736
656
768
720
688
736
752
736
752
752
720
656
720
720
720
624
832
672
768
640
688
672
800
752
752
752
800
656
816
640
800
768
736
736
752
752
720
672
768
768
672
720
688
656
656
832
768
752
752
672
720
672
752
688
672
720
704
704
704
736
624
720
736
656
800
656
768
736
784
640
656
624
640
656
816
736
752
768
752
752
672
736
704
736
720
752
640
752
640
672
736
656
720
640
752
784
752
688
688
656
832
688
656
784
784
688
688
720
816
688
656
640
800
688
752
736
768
656
816
656
736
736
704
656
736
688
752
640
752
624
736
704
736
784
832
736
736
768
784
736
752
752
768
768
640
752
768
752
768
720
640
752
784
704
656
784
752
768
752
848
752
832
736
752
800
640
688
768
752
784
704
736
688
736
704
672
816
640
656
800
752
752
816
656
752
752
784
752
672
688
720
768
704
640
736
752
736
736
672
624
736
736
784
752
704
736
672
656
752
672
736
688
736
752
816
640
832
656
784
656
816
656
784
704
736
752
784
688
800
672
736
752
800
768
640
768
816
768
720
656
720
752
752
688
704
752
752
736
624
752
736
736
624
736
752
720
704
800
688
736
736
720
752
688
656
800
688
656
800
720
736
752
640
720
624
656
672
672
656
736
720
768
720
656
752
832
736
688
736
816
752
752
752
784
688
784
672
768
736
752
800
672
736
720
672
736
816
640
656
848
752
688
672
768
672
736
736
784
736
784
656
752
736
736
704
672
800
752
800
736
800
736
672
752
720
704
768
656
784
752
800
736
752
816
688
704
720
736
816
720
768
768
736
640
656
800
768
656
704
768
752
688
800
752
640
672
704
736
752
752
736
752
720
800
720
736
768
736
768
736
672
752
768
800
704
720
800
688
784
784
704
752
640
688
752
768
640
768
768
752
688
672
640
736
784
736
688
768
768
736
736
704
656
736
736
736
816
752
736
656
688
768
624
752
688
784
656
784
736
736
640
720
768
784
736
720
768
672
624
736
656
768
736
752
800
656
672
752
784
672
736
800
656
784
752
752
752
784
672
704
800
752
736
640
672
752
656
640
736
640
816
752
736
768
736
800
672
736
736
768
752
784
800
736
736
768
640
672
752
768
752
624
656
640
752
752
784
816
720
752
720
752
752
736
720
672
704
672
752
768
768
656
736
736
784
736
736
736
832
736
656
736
784
624
656
688
736
704
688
720
736
672
736
672
768
784
640
768
752
752
736
800
640
736
768
672
768
656
624
752
768
768
784
640
736
720
752
736
800
704
656
784
672
736
656
784
720
656
832
672
640
768
656
672
640
768
656
800
736
672
704
656
624
736
624
752
640
688
752
736
672
800
736
640
816
752
720
752
672
736
688
736
784
800
672
640
688
736
720
752
784
672
752
672
736
768
736
688
672
640
752
784
656
704
800
752
656
640
736
672
640
736
688
736
752
736
640
752
672
784
768
672
752
656
736
656
752
752
736
656
656
672
736
672
736
736
784
656
720
736
768
752
768
736
736
672
672
816
672
752
800
752
736
736
704
768
656
768
736
752
704
688
736
672
752
688
672
752
720
736
704
672
752
656
768
768
752
736
736
768
736
656
784
800
784
736
768
640
832
672
752
656
752
624
672
800
752
688
784
720
752
656
784
752
752
688
656
672
784
768
736
672
656
816
656
768
768
752
752
736
768
752
704
656
736
656
736
752
736
640
704
752
800
624
736
688
800
736
688
752
752
672
784
752
704
832
752
736
688
752
624
656
768
720
656
704
736
752
656
752
656
720
752
736
736
720
688
640
656
752
640
720
672
768
752
768
736
736
656
752
736
784
752
736
784
800
720
784
736
672
768
704
624
752
672
688
800
768
736
784
720
736
752
768
768
640
736
688
704
736
704
752
736
736
816
672
736
816
752
624
704
704
704
672
768
752
736
672
832
752
736
736
816
688
720
768
640
768
816
640
752
736
752
672
736
672
752
656
672
768
784
672
656
720
816
640
656
736
720
736
624
656
720
752
720
768
736
784
720
736
656
768
768
752
720
704
784
688
768
688
736
736
752
752
800
736
736
768
784
752
720
656
624
752
752
736
752
688
768
720
672
784
672
736
736
752
672
656
720
672
640
688
624
768
720
704
720
752
720
624
672
656
736
736
816
752
784
704
752
816
736
800
720
768
752
608
768
784
656
784
672
752
768
736
656
752
672
688
640
656
752
768
736
800
736
656
752
752
672
656
768
784
736
736
656
688
736
736
784
704
768
640
640
784
736
752
704
720
752
736
736
640
816
768
656
720
768
720
768
656
768
704
656
752
720
768
768
656
768
768
736
736
688
832
592
768
672
816
784
736
784
752
816
736
720
640
752
752
784
672
768
688
800
720
640
736
672
768
768
704
736
672
640
736
800
768
656
752
736
768
736
768
672
816
752
800
736
752
656
768
736
768
672
704
656
736
640
720
672
640
784
736
752
624
736
736
672
736
672
736
640
736
752
720
640
832
720
672
672
752
768
816
624
640
672
752
672
752
736
752
704
768
768
736
768
736
816
752
736
752
688
736
720
768
656
752
736
672
640
736
784
672
768
624
720
784
672
672
736
784
704
736
752
736
672
672
800
672
672
768
752
704
672
720
752
752
704
656
736
736
736
752
704
688
656
752
752
752
672
640
768
672
720
672
768
768
656
672
720
752
688
784
752
720
736
768
752
672
768
752
672
704
752
672
752
752
784
672
800
736
768
688
736
720
784
752
656
656
736
752
816
752
736
720
800
640
752
752
800
656
688
656
688
736
736
720
752
736
656
784
752
624
720
768
736
640
848
672
752
672
688
768
720
640
720
832
720
656
656
816
656
688
752
768
656
752
752
752
704
640
768
720
736
752
704
768
736
656
688
736
656
800
704
752
720
768
752
640
752
752
656
800
736
736
640
752
768
656
624
832
720
720
768
784
768
608
736
816
640
720
640
736
736
752
784
688
784
608
736
720
656
768
752
784
736
784
656
784
656
800
736
736
736
656
768
656
704
752
720
640
720
688
672
800
768
752
736
768
672
736
784
736
784
672
672
784
768
720
672
720
688
656
656
752
688
752
784
752
752
736
656
784
768
784
768
752
752
736
640
720
720
704
736
672
736
720
640
672
752
720
688
704
672
688
752
832
752
704
736
640
752
688
704
720
656
752
752
800
624
752
736
752
672
720
768
752
736
736
704
688
656
768
640
768
656
768
736
688
768
624
768
768
768
640
672
640
720
672
624
736
640
672
768
656
752
752
672
688
640
640
672
768
768
672
752
752
768
736
768
784
656
768
640
752
720
704
736
640
704
752
736
816
704
752
752
720
752
752
720
736
752
768
656
752
720
752
736
640
736
624
752
672
656
768
752
768
672
768
704
752
720
640
752
784
768
768
720
784
736
768
704
736
752
736
736
656
736
736
672
672
768
736
736
784
768
736
752
784
736
688
752
816
752
656
656
784
736
672
752
736
672
752
784
784
752
640
752
816
720
624
704
688
624
656
736
672
768
752
672
800
720
720
640
752
816
720
720
784
672
704
672
816
752
752
672
736
768
752
704
736
672
736
688
816
736
768
736
784
736
672
768
720
752
736
800
784
768
768
736
752
832
720
752
768
672
800
640
688
784
688
656
800
752
736
656
800
688
800
800
672
800
672
656
784
752
640
752
672
768
800
672
720
720
656
624
720
624
672
640
736
800
720
704
720
704
656
736
768
752
640
752
784
736
672
736
752
656
752
656
656
640
640
800
672
720
720
672
688
768
704
752
768
752
688
720
704
736
704
624
784
720
752
736
752
784
752
704
752
656
720
752
784
640
672
688
752
752
736
640
736
752
768
800
752
672
752
736
656
736
704
640
640
720
752
736
736
736
768
736
816
736
768
720
768
720
688
800
656
720
656
816
688
784
688
752
656
752
848
736
752
720
752
704
656
736
752
624
656
672
656
736
720
768
784
752
672
752
752
640
768
656
672
752
784
768
736
656
656
688
640
736
800
736
704
752
720
768
752
768
736
672
736
720
720
816
736
720
752
704
768
656
688
752
736
672
816
656
720
752
704
768
768
640
768
752
672
752
688
800
656
672
736
672
720
640
672
704
720
768
784
768
784
752
656
736
672
736
768
640
640
768
752
656
704
656
704
704
720
656
672
640
736
752
720
656
672
752
672
832
720
768
704
624
768
640
800
640
768
736
768
672
736
752
672
688
736
784
720
656
768
720
752
752
784
688
672
624
768
736
752
672
768
672
688
736
672
624
768
656
704
752
752
688
800
656
784
752
672
768
672
656
752
736
640
736
768
656
624
640
640
784
736
752
736
752
688
768
752
672
720
688
640
656
736
656
752
768
752
752
752
624
736
672
784
656
784
688
784
688
720
736
784
752
720
752
672
704
736
736
784
736
720
752
752
752
800
736
768
800
800
720
656
736
768
736
736
656
752
736
624
640
656
784
752
784
720
768
640
784
800
656
752
656
800
640
640
752
816
752
688
720
736
720
672
752
736
736
688
656
752
752
752
672
688
688
768
704
816
704
752
672
768
688
704
640
736
672
720
848
672
656
704
752
832
720
672
704
752
752
736
656
720
704
704
720
752
704
752
752
688
656
784
736
752
752
704
640
656
656
640
656
816
720
688
720
752
784
640
784
736
640
768
640
736
688
752
656
752
720
704
720
752
768
816
752
688
752
736
768
768
752
624
672
688
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
416
672
656
800
640
768
752
752
736
752
688
736
672
768
656
800
688
736
736
752
736
736
720
736
720
656
736
736
816
672
640
736
752
688
752
752
784
768
736
768
736
656
736
768
624
656
784
672
816
656
816
656
784
784
672
720
720
752
736
768
784
720
656
800
800
752
656
704
832
752
752
672
688
672
800
656
640
736
768
736
752
736
752
736
736
752
656
688
752
720
736
624
832
720
720
656
752
704
624
640
688
656
672
672
688
656
768
800
736
736
752
800
768
800
752
768
784
800
768
752
688
816
720
736
752
768
768
752
752
848
768
720
736
656
720
672
720
768
624
720
768
752
672
784
768
768
752
768
768
752
640
640
736
752
736
640
736
784
720
656
752
720
768
704
816
720
784
672
640
736
704
672
640
672
736
752
656
688
752
736
752
640
720
752
704
736
768
656
768
736
736
672
736
656
688
736
768
672
768
736
752
704
784
688
736
704
752
736
736
800
736
704
768
720
736
736
704
752
784
784
672
688
640
768
736
752
784
720
640
672
656
672
704
752
720
752
688
640
720
736
688
608
656
704
720
752
672
720
768
640
688
784
784
720
768
752
800
704
688
768
752
656
752
736
736
736
688
768
752
672
640
720
768
752
768
768
672
688
640
768
656
720
752
752
688
736
736
720
752
672
752
688
768
800
640
704
672
768
736
656
752
672
752
656
784
752
736
688
736
752
800
736
752
672
736
688
752
640
784
704
800
800
688
752
752
752
768
704
736
736
816
704
688
736
704
704
752
672
752
768
736
768
720
768
720
752
752
800
704
736
736
752
736
624
656
640
736
752
752
752
688
720
736
672
688
800
688
672
736
624
656
736
720
736
704
656
736
800
816
736
752
640
752
816
736
768
752
736
752
624
768
704
816
736
688
656
784
768
752
832
752
832
752
816
768
720
752
800
768
752
736
672
736
768
672
688
672
640
720
736
800
688
768
720
768
752
752
736
656
752
656
672
720
736
720
736
688
704
752
736
672
720
736
640
752
800
752
800
640
752
800
736
688
672
784
752
752
704
656
752
656
736
720
752
752
768
768
800
736
656
704
784
736
736
688
752
768
736
688
688
672
768
816
704
752
688
800
736
752
736
752
768
688
800
736
800
752
736
736
784
752
720
704
688
672
816
640
784
736
640
640
704
672
688
704
656
768
640
736
736
736
816
752
720
768
736
672
752
704
656
688
816
720
672
640
768
672
752
640
768
752
656
640
672
656
704
736
736
752
736
704
752
704
640
752
736
672
784
736
736
656
784
752
736
832
752
656
704
672
768
784
752
768
784
768
656
720
736
720
752
688
720
656
784
704
768
640
752
720
688
624
720
688
704
800
656
816
768
784
768
640
736
720
800
672
640
752
624
768
784
752
704
752
672
672
704
832
688
752
768
704
736
768
752
688
768
688
768
784
752
768
688
720
736
768
720
768
656
768
784
784
768
816
656
752
736
624
784
736
640
768
720
688
736
688
736
704
816
752
752
736
688
752
736
672
752
656
768
720
768
704
656
768
752
720
672
672
672
752
704
752
656
720
704
656
768
688
656
672
720
720
736
656
768
768
752
752
736
816
736
736
656
800
640
704
768
672
672
752
688
672
816
768
736
816
736
672
752
736
672
688
736
640
816
656
688
800
656
784
736
672
752
688
688
768
656
768
720
800
736
736
672
704
656
768
752
736
688
832
736
736
704
832
768
704
720
656
688
672
672
752
688
688
752
720
752
752
752
736
752
656
784
688
784
768
752
672
736
640
688
752
704
768
672
784
688
752
800
720
768
672
736
752
656
736
768
720
784
800
720
800
640
704
688
752
736
704
640
768
784
736
784
752
768
752
752
752
720
704
736
736
720
688
736
688
800
704
656
640
672
720
720
736
768
736
656
784
656
720
768
768
768
768
720
720
736
624
736
672
768
640
768
688
720
736
736
768
784
656
752
752
752
704
688
656
768
720
672
752
624
624
704
768
720
640
752
752
720
640
736
752
672
736
672
656
672
752
672
624
736
768
688
672
752
656
736
752
656
688
704
688
656
736
672
688
736
672
736
768
784
688
720
768
752
704
656
768
736
736
816
704
784
736
768
752
672
720
800
624
736
752
720
656
656
736
736
704
768
736
672
672
752
736
640
768
752
640
800
752
736
688
736
752
672
672
736
784
768
816
704
736
736
752
656
784
784
736
752
784
736
752
736
704
656
672
736
656
688
768
656
752
688
656
656
672
672
720
688
720
640
768
752
640
768
720
624
752
736
768
672
656
784
640
752
736
752
816
752
736
784
736
752
752
768
800
784
752
720
752
704
672
720
704
816
720
640
672
656
768
720
720
656
752
720
752
800
720
656
768
752
656
656
816
704
704
752
720
768
688
640
736
688
736
736
816
720
800
656
832
768
688
816
656
640
768
736
752
656
672
768
784
752
688
720
784
736
800
624
736
672
752
656
688
640
784
736
752
736
736
752
720
656
752
672
656
768
752
688
784
752
752
720
688
688
752
768
656
768
688
768
688
736
672
768
672
688
800
768
752
736
688
640
720
768
736
736
752
720
704
672
752
736
656
656
624
720
768
800
736
752
640
656
784
736
672
656
640
704
736
640
736
688
736
736
672
720
656
736
736
672
768
768
784
656
688
688
752
656
752
720
672
784
736
736
752
736
672
800
736
656
752
816
768
768
768
720
736
816
736
672
672
832
640
800
672
768
784
704
720
768
688
656
752
656
752
736
656
720
704
768
768
656
736
752
672
720
768
784
752
720
752
720
736
672
752
704
800
768
656
784
688
752
768
656
752
704
720
752
800
720
768
704
768
800
704
768
704
784
784
720
736
672
688
688
688
752
736
736
704
672
656
736
800
688
688
656
640
672
736
752
752
688
736
640
736
640
656
736
704
688
752
800
752
736
752
784
768
768
624
656
672
768
720
816
624
720
752
688
720
784
656
768
672
768
656
768
704
752
752
800
640
752
672
800
768
672
672
752
720
752
640
752
720
640
704
656
672
752
768
704
704
640
800
752
752
736
736
720
800
784
736
656
752
768
672
736
736
736
672
768
752
640
720
752
736
752
752
768
624
768
656
672
624
784
640
768
752
672
688
656
656
704
800
624
656
672
752
752
672
800
752
768
768
784
736
720
688
704
736
752
672
720
800
656
704
736
656
672
768
672
736
688
784
672
720
736
704
624
704
720
688
784
736
720
656
736
768
768
704
800
688
672
768
784
624
752
752
688
768
688
704
752
736
752
656
720
752
752
704
672
768
752
800
848
672
736
656
704
672
672
752
736
752
736
800
688
640
752
736
768
656
736
752
672
752
736
752
640
736
784
688
752
736
656
656
640
752
720
768
672
784
720
720
768
784
624
656
800
768
736
640
816
656
720
688
736
688
736
768
656
672
656
736
752
800
768
656
736
672
672
736
752
736
736
672
784
736
832
752
720
688
704
656
736
672
768
640
768
624
752
672
720
736
768
752
736
736
768
784
704
736
736
672
688
688
656
688
720
784
784
800
736
656
768
720
720
736
752
672
688
720
624
768
704
752
752
784
752
672
736
736
768
640
704
736
816
672
688
768
752
752
672
752
736
672
800
688
800
688
752
768
736
768
736
752
672
656
752
672
656
752
656
784
688
768
688
656
736
752
720
752
736
704
672
672
784
672
720
736
784
720
672
672
704
704
688
672
736
720
736
752
720
672
608
656
768
752
752
656
720
752
656
656
720
736
640
736
800
752
672
768
736
736
752
736
800
752
736
832
768
768
752
752
832
736
784
672
752
736
784
656
800
752
704
720
656
640
704
656
768
752
768
656
752
752
704
736
640
704
768
720
768
736
688
752
752
736
768
672
672
672
768
720
672
784
752
800
800
784
624
672
720
752
784
784
736
720
704
784
752
768
736
784
768
784
656
768
688
688
720
816
736
736
656
672
736
720
752
672
736
688
768
768
672
736
672
672
720
752
656
752
752
752
640
752
720
752
720
752
688
624
672
656
752
784
624
720
752
672
752
736
800
688
784
640
656
752
736
688
784
752
640
720
784
720
736
784
656
736
768
736
768
768
672
784
720
752
672
752
624
768
672
768
800
784
768
720
736
656
784
688
704
672
704
784
656
672
656
672
720
720
752
736
720
768
784
656
800
752
816
736
800
640
656
752
720
688
640
736
736
768
656
672
736
768
768
768
736
784
736
800
752
688
816
688
720
736
784
640
656
800
752
752
640
800
800
704
768
736
752
704
752
752
752
736
752
688
640
784
672
624
720
768
704
688
736
752
672
704
752
672
688
752
736
720
672
688
752
720
752
752
784
672
736
736
656
720
656
752
656
768
736
752
768
752
816
688
752
656
752
640
800
800
736
736
768
768
656
752
752
752
736
784
752
720
784
736
784
672
704
736
784
640
784
736
752
656
640
736
656
752
720
736
720
640
640
736
800
688
816
656
688
816
640
720
752
768
736
624
768
672
672
736
736
640
736
720
752
672
720
736
656
736
656
752
736
832
736
752
704
752
752
704
800
720
688
704
752
704
736
640
784
736
736
704
688
656
720
704
800
736
720
720
608
720
672
624
720
672
640
816
816
688
784
656
752
784
640
752
784
720
720
768
816
784
752
736
688
704
640
672
736
704
688
640
656
640
672
736
672
720
704
784
768
752
768
672
720
672
752
768
752
656
800
656
816
640
672
656
720
720
816
704
656
736
640
736
736
736
640
704
656
720
656
736
736
656
752
736
720
784
752
672
752
736
752
752
736
640
752
736
736
640
672
640
704
752
736
640
768
656
736
736
736
752
704
688
784
720
784
784
688
704
736
672
784
624
816
736
672
784
736
672
752
768
688
656
752
800
784
640
672
656
752
672
736
688
752
752
672
640
656
736
688
688
736
720
688
720
736
736
768
768
736
752
768
816
672
688
736
752
736
720
736
720
768
720
656
752
672
672
752
784
656
672
720
752
768
688
768
704
752
704
752
656
816
736
656
688
768
656
656
672
752
784
752
736
768
720
672
736
784
752
736
736
768
752
656
704
736
656
800
736
720
736
672
656
640
640
736
752
672
672
656
736
800
736
736
656
784
736
752
720
768
640
720
720
608
720
768
768
736
672
672
656
752
752
720
704
656
656
656
704
752
832
688
624
736
736
800
736
720
752
736
720
624
768
800
672
736
736
768
784
800
720
672
672
656
688
816
752
752
768
640
704
736
768
768
656
768
672
752
768
816
672
704
752
752
608
704
736
640
624
736
640
688
656
672
768
784
768
672
752
768
752
688
720
784
800
672
816
768
784
784
816
656
672
592
752
688
736
736
800
784
736
688
768
656
720
720
720
800
768
752
688
752
672
800
736
768
720
704
720
736
816
640
720
784
752
736
736
736
768
672
672
640
672
704
720
688
672
736
656
704
800
736
800
752
720
688
688
752
736
752
768
768
752
720
640
736
704
752
736
656
752
736
688
784
656
768
752
768
768
736
784
768
816
704
752
704
752
672
784
720
768
736
736
736
784
736
688
752
640
784
688
656
608
752
752
704
704
688
672
784
736
736
736
720
704
736
720
752
656
736
800
752
752
736
736
720
672
768
752
736
800
672
800
656
672
672
736
720
640
752
752
736
704
736
656
656
688
784
736
768
704
768
752
704
656
752
640
656
672
608
640
736
736
688
752
768
656
736
784
656
784
688
672
736
720
720
784
800
752
736
736
720
816
736
736
800
736
704
784
656
672
672
688
752
640
640
800
752
688
752
752
800
688
736
736
768
800
736
768
704
672
704
688
800
752
800
784
736
816
672
704
640
736
640
688
752
784
672
672
624
752
736
736
736
672
672
720
752
656
656
752
624
656
688
800
688
672
768
752
688
768
784
656
688
736
704
624
688
720
768
784
752
736
752
640
736
736
656
768
720
688
768
672
752
704
768
672
736
672
816
672
768
800
768
768
752
752
736
736
640
816
736
816
736
752
800
752
640
736
752
784
688
672
768
752
656
752
608
800
656
752
816
640
784
768
704
752
640
736
752
656
720
752
656
752
624
656
768
752
672
736
688
720
640
800
752
832
816
640
736
736
672
800
736
784
656
768
736
704
720
736
816
736
752
656
704
752
672
768
656
656
720
768
720
736
752
736
752
688
672
752
736
736
672
768
688
624
768
736
752
752
768
752
720
656
736
672
736
752
736
640
736
768
704
752
704
816
736
704
688
752
784
736
784
720
752
800
768
672
752
832
672
752
688
656
704
752
688
736
656
736
752
752
672
672
720
640
672
720
752
672
624
736
736
688
768
672
672
736
768
688
768
720
736
720
688
736
736
640
752
736
768
688
768
720
656
752
752
688
736
768
688
752
768
768
656
752
704
816
752
752
768
640
720
736
768
736
768
672
768
816
736
752
640
720
640
736
672
672
640
704
768
736
704
768
656
656
672
720
784
688
752
624
768
672
624
736
752
736
640
672
768
672
752
720
672
704
672
768
640
752
656
752
752
720
736
704
624
736
736
736
720
736
816
752
736
688
688
752
784
720
736
752
752
720
816
752
768
656
736
672
656
768
768
736
736
752
752
672
752
640
816
736
736
704
640
752
752
720
752
688
736
720
768
704
736
768
720
736
736
656
640
816
608
672
720
784
800
656
784
704
720
656
784
784
672
736
736
784
656
672
688
768
768
784
784
784
784
816
640
768
784
736
800
672
768
752
752
640
672
688
816
688
672
640
640
656
688
720
736
800
656
704
768
736
720
784
784
688
640
736
720
736
720
672
640
720
736
672
816
704
720
672
720
656
720
736
656
816
624
688
800
640
704
768
752
752
672
656
704
704
768
656
768
656
768
768
768
752
672
672
752
720
768
640
704
752
736
800
768
736
768
736
752
752
704
720
736
672
800
736
752
768
752
784
624
736
688
736
784
656
672
752
720
656
752
720
656
832
720
816
736
720
768
752
656
688
752
768
688
784
736
704
736
752
816
672
672
672
784
752
752
672
688
672
688
816
704
656
752
752
736
704
720
752
768
656
640
752
656
784
608
688
736
688
640
704
688
720
656
752
768
688
768
736
672
816
640
704
656
640
672
736
752
736
736
720
736
768
624
752
736
704
704
800
768
656
768
672
736
688
672
672
640
768
736
736
784
672
656
768
672
768
752
736
800
704
720
800
704
752
704
784
656
704
688
752
768
816
704
624
768
752
736
672
720
848
688
672
688
768
736
736
800
624
736
672
768
736
736
736
784
656
640
720
752
640
736
656
768
704
736
624
752
640
720
640
800
704
736
688
768
688
832
752
736
720
736
656
736
704
768
752
656
736
656
736
784
768
656
720
688
784
752
736
752
768
688
736
656
784
672
704
688
832
736
816
640
800
736
672
688
752
784
752
720
736
640
752
768
672
736
656
640
672
784
640
720
752
640
752
624
768
688
784
640
624
704
752
704
672
784
752
672
736
720
752
640
720
752
672
752
752
656
656
736
768
736
656
752
832
736
736
752
656
784
624
736
752
752
752
752
736
672
784
640
720
768
784
656
656
640
720
752
752
752
640
800
656
752
672
736
640
752
672
736
672
720
736
816
752
768
688
752
720
688
736
800
672
736
784
832
688
752
752
752
688
752
784
736
688
768
704
800
768
752
752
704
656
672
704
736
752
768
816
720
752
720
672
736
640
688
752
768
688
672
688
672
752
768
784
656
736
736
752
720
768
736
736
640
688
640
768
624
720
720
704
720
720
768
688
768
736
736
800
752
752
768
720
800
752
720
768
768
640
656
640
784
768
688
656
752
720
736
736
736
624
736
720
640
672
720
768
768
656
624
640
736
784
704
816
752
736
640
720
720
656
736
672
720
768
736
816
704
672
752
752
640
752
624
768
688
768
752
752
720
768
768
848
720
752
752
832
688
688
672
784
720
736
688
624
640
672
704
736
608
720
656
768
656
656
752
640
736
768
720
736
800
784
656
704
672
688
720
656
800
752
640
736
704
640
736
752
672
736
768
816
720
736
768
640
720
736
736
768
752
736
736
752
736
720
784
768
752
768
784
752
768
752
624
720
784
656
656
672
800
736
832
752
704
672
800
736
736
640
656
656
768
688
640
736
768
656
672
768
736
720
720
800
704
672
656
832
736
752
736
768
672
688
736
768
784
752
624
752
720
736
768
720
720
704
784
768
624
736
752
784
784
736
768
720
752
736
752
752
720
752
688
672
640
752
640
752
656
736
768
688
736
720
800
816
672
784
672
752
784
656
752
704
752
688
768
656
624
640
816
656
704
752
768
720
624
736
704
704
736
736
672
832
672
768
640
736
784
624
784
768
688
656
752
704
720
656
640
704
800
672
784
768
704
688
768
656
704
736
768
768
784
768
672
752
816
704
768
800
704
704
768
784
784
704
752
752
784
816
672
736
768
736
704
672
784
768
688
736
672
736
768
768
752
656
640
656
736
688
736
736
672
656
736
752
752
720
672
736
640
688
736
752
800
624
640
752
784
784
784
752
720
704
736
624
640
688
704
752
640
688
784
656
768
656
784
784
640
768
768
640
656
752
736
640
752
640
624
656
752
768
656
784
752
688
720
752
784
688
672
640
736
720
736
736
736
736
704
688
800
784
752
624
656
752
656
752
800
752
640
720
624
800
688
704
720
656
720
752
832
784
816
656
640
768
736
768
752
768
736
672
656
736
656
656
816
736
752
656
640
752
656
640
736
768
752
752
768
752
736
752
704
768
736
640
720
752
768
640
656
640
688
736
688
768
704
736
752
752
720
752
640
672
752
720
736
768
736
736
672
768
672
640
752
736
736
656
640
768
672
736
688
656
656
768
656
672
752
800
688
752
832
688
704
752
768
768
640
704
720
784
736
736
704
672
752
736
640
672
720
816
656
784
672
752
656
768
752
816
768
672
752
768
720
752
768
816
752
752
816
672
768
736
720
752
640
768
816
672
736
752
768
784
608
720
656
672
720
752
640
784
720
800
736
704
752
752
736
752
672
736
752
768
752
688
800
736
736
688
672
736
768
656
688
784
736
752
704
704
816
720
752
784
672
768
672
736
736
608
752
704
656
736
736
800
736
688
768
624
736
720
752
768
640
608
672
784
672
752
656
704
624
752
736
640
768
624
720
720
736
768
640
816
672
672
720
768
800
784
720
736
736
816
704
736
784
800
704
688
752
656
768
752
656
704
768
752
736
624
688
752
624
688
752
640
672
800
784
720
736
736
688
640
656
752
768
752
736
736
720
752
736
752
720
736
640
752
704
704
816
768
784
704
736
720
736
656
768
768
784
656
784
752
768
720
704
688
640
736
816
656
672
768
816
688
656
768
640
736
672
800
688
800
752
720
688
672
672
736
720
736
656
752
688
688
784
656
688
752
768
672
768
752
736
784
672
672
672
720
688
640
736
688
736
752
752
608
768
736
640
736
752
752
752
624
736
784
656
672
736
688
752
672
800
752
816
752
752
704
656
672
752
736
640
752
768
688
800
704
736
752
736
736
720
704
752
672
752
736
768
816
784
784
720
752
768
688
768
672
784
640
752
784
624
784
672
736
672
752
672
736
672
640
784
752
736
720
768
768
768
656
752
704
672
752
752
656
736
768
816
656
672
736
800
768
688
656
752
800
656
720
640
672
736
736
736
704
736
768
720
640
768
720
736
784
640
656
736
672
784
672
752
704
752
640
672
624
768
656
672
704
640
736
752
768
816
672
656
752
720
720
736
672
704
736
704
704
640
768
752
720
736
752
640
784
768
736
800
768
752
752
752
656
736
736
736
752
768
752
752
768
736
656
736
768
656
784
832
752
640
672
672
800
768
688
704
656
656
672
736
752
736
752
784
624
720
720
656
640
640
640
752
768
736
736
688
720
752
752
800
752
688
704
640
640
688
736
672
752
752
800
752
832
656
736
672
704
768
640
800
752
736
624
656
800
752
640
800
656
752
752
736
752
720
672
768
752
816
736
672
784
672
672
752
656
736
736
736
768
736
720
656
704
720
752
736
784
656
640
640
816
768
672
672
800
656
720
768
640
784
608
656
752
752
624
688
752
736
752
640
768
704
752
768
768
736
736
768
656
736
656
704
672
752
752
656
752
688
688
688
608
736
768
656
768
720
800
800
768
672
688
608
800
704
752
784
736
720
720
672
736
768
752
784
672
752
768
672
672
736
640
608
800
752
624
752
736
800
704
768
704
688
720
752
720
752
720
720
752
688
784
736
752
752
768
672
736
672
672
656
736
736
784
800
656
736
688
640
768
624
656
800
784
704
704
752
768
640
688
624
640
704
736
736
720
800
640
672
736
736
736
720
768
752
672
736
736
736
720
720
736
704
640
704
752
816
656
768
720
720
672
688
688
656
720
672
736
704
672
736
688
752
784
704
720
624
752
768
736
768
800
752
656
672
736
688
656
656
752
656
688
672
720
640
688
672
816
656
768
800
752
736
768
688
720
688
704
736
736
640
768
736
784
672
752
608
688
704
704
736
736
752
752
800
640
736
784
768
672
672
816
752
736
736
720
672
768
688
768
784
752
800
768
720
768
672
720
640
768
768
752
752
688
768
784
704
752
720
784
784
768
720
736
688
656
768
624
656
752
752
736
704
672
752
672
768
720
736
688
672
640
640
752
816
640
736
752
736
752
720
736
720
752
752
816
688
704
768
688
640
688
672
768
656
832
736
784
656
816
720
704
736
800
752
640
672
784
656
832
736
832
640
752
672
768
736
656
784
704
704
752
736
752
736
768
736
736
656
688
816
736
816
736
672
752
640
720
640
784
736
672
736
736
736
672
736
656
816
704
800
752
656
736
768
688
736
784
752
720
768
640
752
800
736
768
688
736
736
752
752
736
800
752
704
768
784
672
672
752
752
736
720
768
752
672
640
640
656
752
752
640
720
720
768
656
672
640
672
848
736
720
768
720
752
752
752
656
752
720
688
800
688
656
768
720
800
672
800
736
736
736
736
768
768
752
800
768
800
704
656
720
768
768
752
736
656
752
736
784
720
688
672
816
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
416
736
752
816
752
768
672
736
736
784
672
736
736
720
656
736
640
752
656
752
800
672
752
768
640
688
752
768
736
736
672
736
704
672
784
736
736
752
784
736
816
736
768
752
800
752
720
720
704
720
736
640
768
720
656
672
704
752
784
672
656
672
784
736
752
752
704
768
736
752
736
688
688
784
736
688
768
656
736
736
784
672
832
752
800
768
704
672
752
736
816
784
736
752
736
656
656
736
784
752
736
672
768
656
704
784
656
768
672
816
640
768
640
784
752
720
656
688
656
816
720
752
736
720
752
768
752
752
720
768
688
736
752
800
624
672
752
736
640
752
752
800
688
784
768
736
704
768
768
688
688
736
736
640
736
656
720
672
688
752
704
752
736
688
656
768
736
624
736
736
784
800
768
752
720
624
752
720
672
688
736
784
688
656
720
784
752
816
656
736
672
656
624
624
656
656
656
752
688
608
768
704
784
672
688
672
704
736
688
752
752
736
768
784
704
736
752
752
784
752
752
752
688
704
752
720
688
736
640
752
800
736
624
752
800
704
736
768
752
752
720
816
672
656
736
640
656
656
736
656
752
752
704
768
672
656
688
672
736
752
800
736
800
640
736
688
752
800
752
752
752
768
800
672
768
688
848
768
784
800
768
784
752
736
768
688
736
752
832
784
768
768
736
704
752
752
752
640
752
688
704
768
752
688
672
800
688
784
672
816
656
768
704
768
672
720
720
704
672
640
688
688
816
720
656
800
736
704
736
784
752
752
736
736
672
736
736
672
816
672
752
720
736
736
672
768
800
800
720
800
656
768
656
704
672
688
656
640
688
752
672
704
752
672
736
624
672
736
736
672
784
688
768
640
672
768
720
640
736
672
752
768
752
736
768
672
704
672
752
752
736
800
752
768
640
752
768
752
752
736
768
736
752
768
688
784
672
656
736
736
736
752
752
736
752
688
688
752
752
752
672
736
672
752
800
752
752
736
624
736
752
720
768
736
736
736
752
784
832
656
672
736
736
816
752
736
752
736
736
832
672
800
736
784
656
720
656
752
800
688
656
752
736
720
720
816
720
688
784
688
736
640
704
656
688
768
736
624
800
768
672
768
752
768
640
752
672
832
736
688
768
800
752
704
784
688
672
704
784
736
768
736
672
688
784
656
736
720
656
736
768
752
768
752
752
752
736
752
768
784
656
720
736
768
816
720
720
784
640
640
624
768
736
672
736
640
688
688
656
720
768
672
800
720
800
608
672
752
768
736
752
752
784
736
752
768
672
656
816
656
720
736
656
688
720
752
672
624
752
672
640
768
736
672
784
720
672
752
672
768
640
736
640
656
688
688
768
640
672
672
768
736
736
672
640
768
736
800
672
688
720
736
768
656
736
640
736
752
752
768
672
752
672
784
816
672
736
688
720
816
736
736
800
720
752
784
688
800
768
640
720
672
672
768
784
752
688
688
624
656
720
704
736
784
752
704
736
768
800
640
656
784
672
704
784
768
752
736
736
784
720
816
720
752
768
624
688
624
752
816
736
688
736
752
736
800
688
784
672
720
768
752
656
800
704
672
784
768
624
752
656
752
704
752
656
656
656
768
704
768
768
768
784
736
768
816
736
704
768
688
752
720
672
672
784
816
736
752
752
736
640
688
736
736
768
672
704
768
752
672
688
736
784
720
656
752
688
784
752
768
736
768
768
784
752
736
688
752
784
736
784
768
672
816
752
752
656
784
800
784
816
736
704
704
720
640
672
704
752
688
704
768
640
704
752
704
736
768
800
656
736
704
752
720
720
736
768
800
784
672
672
736
720
736
688
672
720
768
656
752
640
720
656
640
736
688
656
720
704
736
784
752
672
768
800
736
736
720
752
688
752
800
736
784
752
736
672
720
688
736
720
704
768
736
624
736
752
688
688
800
752
688
800
672
768
688
640
688
736
656
624
640
784
736
656
752
752
688
736
688
752
752
784
784
704
768
736
672
704
640
752
736
672
608
752
640
656
656
640
752
816
752
784
656
688
720
672
800
736
720
752
624
672
672
768
816
752
720
784
800
752
656
800
784
768
768
656
752
752
688
768
688
832
736
720
672
656
752
656
704
784
784
640
640
768
736
752
752
640
720
736
720
752
752
736
736
752
656
800
720
768
768
672
752
736
768
768
752
736
672
800
656
736
736
656
672
704
720
784
672
640
688
656
720
720
752
736
624
736
656
800
736
784
672
752
640
752
672
752
784
736
784
752
720
736
848
784
704
736
800
720
704
656
768
768
672
768
736
672
704
672
768
752
688
736
736
752
656
720
752
752
624
688
752
784
704
672
768
640
720
752
720
752
624
672
800
704
688
720
768
736
656
688
704
704
736
752
640
752
736
736
720
736
800
688
736
656
816
768
832
768
736
688
656
784
688
688
800
672
656
784
656
672
640
752
784
768
800
720
752
768
704
624
640
736
752
752
736
640
768
688
736
640
704
752
720
768
752
816
640
736
656
752
768
768
736
640
768
704
768
800
608
752
784
768
752
768
752
704
704
656
736
688
704
640
720
816
736
752
816
688
704
656
752
672
752
736
672
752
720
672
752
720
672
640
704
784
688
656
672
672
752
656
752
752
720
672
640
688
800
672
720
752
704
688
640
736
768
768
720
640
656
640
784
704
720
736
720
752
688
672
736
752
720
736
768
720
688
688
752
736
704
752
656
816
736
752
752
720
752
656
720
720
720
656
672
688
672
736
656
720
784
752
752
784
736
768
752
640
688
784
720
800
752
688
720
768
768
800
752
640
720
752
720
736
784
800
800
736
752
736
688
656
768
752
672
784
720
656
736
704
624
688
768
784
640
768
752
768
656
720
784
768
752
656
640
688
640
752
720
800
800
752
672
768
688
688
768
672
624
688
656
752
704
688
816
752
720
640
704
752
736
704
800
720
688
640
816
672
784
720
672
720
624
736
640
784
720
624
784
624
704
736
720
752
752
656
704
672
640
656
736
816
736
656
656
784
784
752
768
816
720
672
736
800
720
752
672
688
688
768
784
688
784
656
704
752
640
672
768
640
720
736
656
784
736
752
752
768
720
752
752
768
784
656
768
656
704
688
800
656
832
672
736
800
656
688
624
736
816
624
736
720
720
768
720
704
736
672
784
816
752
736
656
736
656
720
816
640
704
768
800
800
800
784
736
816
752
800
752
800
672
784
672
640
704
704
720
624
752
672
736
688
704
720
736
720
704
720
672
688
800
752
736
640
624
688
720
656
704
704
736
784
752
624
752
656
624
688
624
704
640
768
736
752
704
640
720
800
640
720
640
752
640
672
688
752
672
832
736
768
768
736
736
768
768
672
736
640
752
768
672
704
752
816
704
768
752
688
800
736
816
784
768
672
752
736
704
736
832
736
736
640
800
752
768
624
720
736
752
736
704
736
656
752
752
672
720
736
768
736
736
736
624
720
656
656
784
720
768
656
672
832
752
688
752
720
768
736
704
752
768
800
752
800
800
624
768
752
752
736
800
656
752
672
720
752
784
752
752
704
752
640
656
672
656
704
656
752
752
752
704
640
736
640
688
784
752
656
704
768
736
672
752
768
640
672
656
736
752
704
720
720
672
752
592
672
704
752
768
672
720
672
816
688
688
752
704
768
832
752
784
688
704
752
752
624
672
768
672
720
752
736
720
752
800
736
736
816
688
768
672
672
816
656
640
736
736
768
752
768
656
656
736
640
688
640
768
672
800
656
752
656
784
672
688
672
832
672
768
784
800
768
816
672
768
752
752
752
736
640
656
688
752
672
736
752
656
720
752
736
736
752
656
768
784
688
784
656
688
768
768
768
784
768
816
752
720
704
672
752
688
784
752
720
656
752
688
768
736
752
800
800
720
736
656
784
720
768
736
800
688
624
784
624
736
720
720
640
688
736
752
720
752
688
752
656
640
624
800
736
752
736
768
672
752
768
784
784
624
752
720
720
736
768
768
752
688
736
800
656
688
784
784
752
720
656
752
816
752
736
672
816
672
640
768
832
688
768
736
736
784
672
640
832
768
736
624
752
784
720
624
704
704
704
720
640
800
784
736
832
736
672
704
768
592
784
704
656
800
800
736
816
672
704
656
768
672
688
768
768
800
784
752
720
704
768
672
624
736
768
784
640
608
784
752
736
672
704
752
768
768
768
800
768
672
768
800
640
736
704
816
656
640
752
736
752
752
640
752
688
624
736
640
768
736
672
800
736
688
768
768
768
688
736
688
720
640
688
672
768
640
688
800
624
640
736
800
768
720
656
752
656
640
768
752
704
752
752
784
704
752
736
768
752
656
768
656
720
656
832
752
720
656
752
736
800
736
720
752
640
688
752
720
784
736
672
736
768
640
624
736
736
704
720
784
752
752
832
736
672
624
704
736
720
752
720
752
672
768
784
768
688
736
768
688
720
688
784
768
832
656
768
736
784
832
752
752
784
752
736
736
720
736
656
832
752
816
768
768
672
736
672
736
736
752
784
720
736
816
656
640
704
752
656
752
736
768
768
640
784
736
736
784
704
736
640
672
768
768
624
688
672
720
752
640
832
752
752
752
688
736
784
736
736
768
688
752
816
768
640
656
672
736
688
752
720
656
784
640
832
752
704
752
736
736
720
752
768
800
752
656
688
768
672
752
720
688
736
752
736
720
784
736
752
672
736
656
752
752
720
672
640
656
656
720
720
704
784
608
752
800
704
688
752
736
672
672
752
768
720
768
768
720
784
656
656
640
720
688
688
640
736
784
672
752
672
720
752
768
800
688
736
736
816
640
656
768
704
800
720
736
752
736
752
752
752
656
736
736
752
640
704
784
720
624
736
736
752
656
784
784
624
784
736
752
704
688
720
752
704
688
624
768
704
752
688
752
672
720
752
784
768
768
640
784
768
672
720
800
672
800
704
752
736
688
800
768
752
688
816
720
736
784
640
736
736
832
768
704
672
752
752
752
800
752
768
784
736
768
688
752
640
736
720
672
640
752
736
704
640
688
656
752
736
752
672
640
752
640
704
784
768
752
784
672
752
800
752
640
752
752
768
816
640
832
656
672
736
752
768
784
720
736
768
720
640
784
768
736
736
752
704
768
672
752
736
768
768
736
784
736
752
656
688
736
752
656
688
736
784
784
704
752
752
800
656
736
768
752
736
752
752
752
768
736
640
688
656
720
720
688
816
688
752
704
784
672
736
656
752
720
752
752
768
720
624
800
768
768
688
768
768
768
784
672
768
752
704
768
672
672
800
688
784
768
688
752
736
768
704
640
720
720
768
800
720
736
784
688
736
800
688
720
736
640
768
720
640
672
656
752
736
816
752
800
672
656
832
768
752
720
640
672
688
768
768
720
704
768
720
784
752
720
752
768
688
752
736
688
656
752
624
800
688
784
720
768
768
688
640
784
656
688
832
672
752
704
672
720
752
656
704
640
752
720
688
752
768
688
672
640
736
736
800
640
720
656
768
656
784
656
688
672
656
768
720
720
752
672
752
624
800
736
736
640
736
752
768
640
672
768
688
688
720
720
784
736
816
720
752
752
800
640
752
752
720
736
688
688
752
768
704
656
784
768
736
736
768
768
720
720
768
720
752
736
752
656
736
736
752
704
640
736
736
752
672
736
704
624
672
736
640
752
768
640
656
608
800
672
768
784
768
736
800
736
752
768
688
736
768
832
656
752
784
768
672
672
800
672
752
752
736
736
736
768
736
672
640
752
736
656
720
752
640
720
784
752
752
720
720
816
752
672
736
672
736
656
736
736
736
672
752
736
736
688
800
752
720
736
752
768
752
688
784
832
752
752
784
736
752
688
672
624
768
688
752
688
656
624
672
720
784
800
768
768
768
688
736
736
768
640
736
816
736
752
704
656
768
688
768
720
736
720
800
752
832
688
736
832
656
736
640
752
752
752
672
784
720
768
688
752
672
704
672
720
768
624
752
736
656
752
640
768
720
704
656
784
848
672
784
752
752
672
704
720
832
672
736
656
752
720
752
672
736
624
736
768
672
640
752
768
672
736
640
672
736
640
688
720
752
752
768
784
768
752
736
816
656
720
736
736
768
720
688
752
624
720
800
688
736
672
784
800
736
672
704
768
672
672
736
784
736
768
784
768
640
768
768
672
640
752
688
800
736
656
752
768
720
720
752
672
800
784
656
768
736
752
688
768
736
784
672
736
736
720
736
816
688
768
656
688
768
624
736
736
688
752
720
672
736
752
736
688
736
736
720
752
720
752
672
768
752
752
656
736
768
768
816
656
656
720
704
768
752
752
672
752
672
672
704
784
736
752
800
752
736
672
736
736
736
752
816
768
800
704
800
704
784
784
800
752
768
672
640
720
784
640
752
640
688
736
704
720
656
672
736
672
688
752
704
752
752
752
768
800
736
816
720
736
720
688
784
768
672
640
720
640
736
768
656
672
736
832
656
688
768
768
800
688
672
768
800
640
768
688
688
704
640
640
704
720
784
704
784
768
608
768
736
736
672
736
688
672
656
736
768
752
720
736
720
704
624
704
720
704
624
752
816
736
832
704
768
752
752
736
736
672
736
736
816
672
672
800
768
704
784
640
800
736
704
752
640
656
736
768
752
704
736
752
752
624
752
672
736
720
768
704
768
736
784
736
800
624
672
736
704
736
672
688
736
672
784
720
752
656
784
768
672
752
736
656
736
688
736
736
752
640
768
720
800
656
704
752
768
736
752
688
704
656
768
768
784
720
688
768
704
672
784
800
752
752
640
752
816
672
752
736
720
688
736
768
640
736
752
688
672
656
704
800
816
720
656
800
752
752
688
640
624
640
720
736
720
816
640
736
688
656
672
624
672
672
768
752
704
640
672
752
720
672
736
768
752
736
752
800
784
656
656
752
640
688
688
768
640
656
736
704
848
656
768
752
752
736
816
736
816
752
784
736
752
752
672
720
656
752
656
656
800
656
752
656
752
656
736
800
736
736
672
736
736
784
656
736
720
672
688
688
640
736
656
720
752
736
736
752
672
752
672
736
752
752
768
688
752
656
736
720
736
768
800
704
736
800
800
784
752
736
816
656
752
704
736
720
768
688
752
768
752
816
736
736
672
752
816
656
800
768
656
752
656
736
688
720
720
720
768
768
656
784
688
736
768
768
656
768
656
800
736
640
768
704
752
704
752
656
752
656
736
672
752
800
624
736
752
704
688
784
736
800
752
736
688
736
784
752
736
768
768
832
768
752
752
704
704
784
768
688
688
752
752
816
736
752
752
656
720
672
752
752
768
752
640
688
784
736
736
688
848
752
736
752
752
656
752
800
640
832
656
672
784
752
752
736
672
656
640
768
784
720
640
736
768
768
720
688
768
816
720
752
784
736
752
768
784
640
720
752
672
736
672
752
752
704
752
752
688
720
720
672
656
688
816
640
752
688
672
784
688
720
736
704
752
784
672
688
624
736
752
624
624
688
752
656
752
688
720
656
656
816
720
768
752
704
720
640
720
784
720
736
688
736
752
752
768
688
640
784
656
736
800
720
752
704
640
656
640
752
736
688
688
784
672
736
752
704
688
704
672
720
672
688
816
704
752
736
656
800
672
720
688
688
656
752
656
768
800
704
784
672
704
736
752
688
640
736
656
800
704
752
816
672
656
736
800
752
704
704
720
768
752
752
720
720
688
672
768
752
736
704
640
624
784
784
720
784
752
816
624
784
832
640
768
768
688
736
800
672
688
736
704
800
720
752
768
800
656
656
624
752
736
752
736
752
720
704
704
752
736
640
624
768
720
656
720
672
816
656
656
736
800
736
640
736
736
720
736
656
800
688
752
800
768
768
736
736
800
736
736
656
816
704
720
640
768
800
624
672
768
736
752
688
752
768
736
672
800
688
800
688
752
736
640
640
784
736
736
800
656
640
688
672
736
784
720
800
736
768
720
800
640
672
752
784
656
736
624
752
672
640
624
784
736
752
672
720
624
624
640
736
640
688
768
720
832
768
784
656
752
672
800
768
752
784
752
688
736
672
752
704
768
736
768
736
768
768
688
768
656
736
640
720
752
720
656
704
736
688
752
720
752
736
640
752
768
768
768
688
752
784
752
704
752
704
800
736
816
656
736
736
720
768
768
752
720
752
784
672
688
736
688
784
736
768
640
784
752
784
768
720
736
624
752
768
688
736
720
784
704
704
736
688
688
736
672
768
672
736
720
640
688
752
704
592
656
720
768
720
768
784
752
704
704
624
736
816
672
736
736
688
752
752
800
736
656
624
640
688
640
752
640
720
656
800
736
720
768
752
704
752
720
768
688
768
752
640
624
720
640
784
624
832
736
688
752
704
704
816
720
800
640
688
768
736
624
752
736
768
736
784
784
720
768
656
672
800
752
608
752
832
736
736
736
784
704
608
768
752
752
752
752
704
752
688
640
656
720
736
752
736
672
640
736
768
736
672
672
832
624
752
656
640
736
768
656
832
720
736
656
736
688
768
768
768
784
672
768
672
752
720
736
784
736
704
688
656
752
640
672
800
688
672
704
768
768
672
672
736
672
736
688
720
752
672
656
816
752
704
768
720
624
704
752
704
624
752
752
736
736
704
752
720
736
752
672
640
720
656
672
688
736
752
752
768
768
704
800
672
688
704
688
688
736
768
784
752
736
736
768
752
752
752
656
672
752
656
720
640
720
752
672
656
768
720
768
816
800
704
736
752
704
656
720
640
800
672
768
720
736
656
704
720
688
656
672
752
624
656
736
768
640
640
640
736
736
800
640
640
752
720
768
752
752
672
736
752
752
688
640
752
688
640
688
720
752
640
768
768
752
688
656
816
768
752
656
720
656
672
816
736
656
736
784
688
816
656
752
688
672
688
768
656
768
720
752
816
736
640
784
640
800
736
768
768
720
720
672
704
720
752
624
704
736
736
768
672
736
688
720
656
688
784
768
672
736
736
704
736
752
736
672
752
704
752
768
736
672
736
784
784
752
672
736
800
624
736
688
704
608
704
656
656
672
704
720
736
752
704
736
720
656
768
672
720
656
768
688
752
672
752
624
752
688
752
768
672
624
752
752
656
768
656
800
624
656
784
768
656
672
736
720
768
704
800
720
736
720
656
768
784
816
640
768
704
656
752
656
768
816
768
784
752
720
672
736
816
736
704
624
768
752
816
720
736
752
768
752
656
784
736
640
816
672
784
752
736
640
768
752
720
688
688
672
720
624
752
752
752
704
736
752
752
624
816
720
784
720
640
752
704
656
736
672
752
672
752
672
720
736
672
752
672
752
768
736
752
752
640
656
672
752
752
752
752
656
656
720
736
768
752
752
736
752
672
832
688
752
672
784
640
656
784
672
800
640
752
624
656
736
752
736
720
672
752
656
624
736
816
752
768
752
656
736
672
688
784
816
736
768
688
704
688
784
768
736
784
736
688
768
752
656
816
784
768
736
640
656
672
800
672
688
704
656
608
768
720
752
656
640
704
752
656
640
752
672
736
784
704
768
816
704
688
720
752
752
704
736
768
800
768
736
672
736
720
736
704
816
656
752
736
672
688
720
672
720
704
736
672
672
720
736
752
768
784
752
752
752
720
768
688
752
656
640
720
688
752
784
816
832
768
672
672
720
752
768
752
768
736
704
752
816
640
720
688
736
784
800
816
736
656
688
736
736
752
800
768
672
784
624
640
640
752
624
672
736
672
752
752
640
800
768
752
656
752
752
720
736
784
800
720
736
736
752
736
752
640
672
768
816
736
800
768
768
848
688
768
736
768
720
704
752
656
784
672
736
736
816
672
736
720
672
768
704
736
672
736
640
736
704
704
720
752
688
752
720
752
736
672
656
784
720
784
624
752
784
688
672
736
768
784
656
624
736
720
672
672
752
768
656
768
784
736
752
752
768
800
816
752
736
784
640
736
736
736
752
752
752
784
704
704
720
752
752
752
752
768
672
656
752
768
736
736
784
704
752
752
704
768
736
704
736
768
752
624
656
672
752
736
784
752
752
704
640
752
768
672
640
704
672
752
768
656
656
752
720
736
640
768
768
720
768
752
736
736
752
720
640
672
656
816
688
816
736
720
672
752
768
704
752
704
800
672
640
784
752
736
688
784
736
816
624
784
752
752
640
752
656
720
736
640
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
384
736
672
736
656
720
720
640
720
688
688
752
736
800
736
768
784
816
688
752
752
784
752
688
688
720
672
720
688
768
784
736
720
736
752
768
752
704
736
816
656
736
736
688
640
720
704
704
736
768
688
768
656
720
720
736
736
672
736
704
800
688
736
656
752
688
816
624
720
640
736
656
672
640
688
784
720
688
752
624
688
752
800
656
720
688
752
672
720
720
736
704
672
624
736
656
752
752
736
720
752
656
768
656
656
816
752
736
688
672
816
768
736
752
640
688
736
816
768
752
752
672
688
768
800
656
736
816
752
800
752
720
752
768
752
800
656
768
736
752
816
640
624
656
640
672
672
736
624
688
784
720
752
832
768
608
800
656
656
816
768
768
736
688
624
752
800
624
752
656
672
768
720
736
768
656
752
768
672
752
784
768
768
640
736
752
832
752
704
784
752
672
704
672
736
752
800
704
624
736
752
736
672
752
656
752
816
752
736
688
640
736
752
640
752
736
752
720
720
800
736
736
720
688
752
704
768
752
784
768
768
672
720
752
800
736
720
768
784
832
752
784
768
752
768
640
688
672
784
736
736
816
640
752
720
800
752
688
752
720
752
736
656
736
720
736
752
720
736
784
624
672
752
816
720
640
640
720
656
736
784
704
736
736
752
768
752
816
736
656
656
768
736
656
672
672
720
720
656
736
672
656
768
640
720
736
816
752
752
752
752
752
720
768
784
752
800
736
784
704
656
752
720
640
784
784
688
768
720
688
720
720
752
736
704
704
672
672
784
672
688
720
640
752
752
672
736
624
720
720
768
672
736
768
752
720
704
656
720
720
720
816
640
800
768
752
816
720
720
688
720
752
752
736
800
736
752
656
752
656
656
752
656
704
640
752
720
704
784
640
688
752
768
768
800
704
624
656
704
720
640
688
752
704
736
768
704
832
720
736
720
672
656
672
768
672
752
688
720
656
720
688
640
736
752
768
656
736
624
752
672
784
656
672
752
704
800
656
688
768
656
640
752
768
800
752
768
752
768
736
672
704
704
800
640
816
720
736
688
752
752
768
736
800
720
656
720
736
656
672
768
816
752
704
624
720
704
640
656
640
656
752
752
656
704
720
752
656
688
720
720
672
800
624
704
736
720
704
752
768
688
736
704
752
816
768
688
736
768
656
672
800
768
832
672
752
640
752
768
720
752
720
672
688
768
752
752
656
688
832
752
752
784
656
656
656
736
672
784
656
672
640
656
720
800
672
752
672
784
688
736
640
800
672
720
736
752
752
688
656
768
688
736
720
768
768
656
736
768
752
752
704
752
752
752
752
752
672
752
784
752
768
736
688
672
768
624
688
688
768
784
736
736
784
784
720
624
752
800
784
768
672
640
736
640
752
672
768
736
656
768
736
752
688
752
672
656
720
672
720
720
624
656
768
640
736
752
736
640
688
832
672
752
768
800
752
752
688
768
688
736
768
800
784
800
672
752
816
784
672
640
736
688
800
688
752
624
768
736
640
752
672
768
752
816
736
736
752
736
768
800
688
656
688
752
640
656
816
672
736
752
752
768
768
704
688
624
624
688
752
720
672
640
736
608
720
688
752
768
624
848
736
768
816
752
656
704
768
784
736
704
736
752
704
704
736
752
768
736
672
656
720
688
768
720
672
752
736
672
688
784
752
640
672
672
768
736
640
640
656
672
768
768
736
752
672
640
640
768
768
752
832
736
656
800
672
720
720
736
752
736
784
656
752
768
768
736
800
736
816
672
816
752
768
800
736
752
752
768
704
736
768
752
656
656
768
784
688
672
768
752
768
752
784
720
752
736
768
752
752
656
672
736
624
736
768
720
736
800
640
656
688
704
688
752
736
672
736
736
656
768
672
656
752
672
704
656
768
816
752
752
704
752
672
656
640
816
672
752
624
688
800
640
768
656
768
720
736
768
736
624
768
720
752
768
768
784
624
672
688
688
704
720
720
736
832
640
832
656
736
752
640
752
768
640
736
736
800
736
736
672
768
640
672
656
640
720
720
816
640
752
672
800
768
624
688
768
736
656
736
720
624
640
752
720
784
656
768
672
640
752
800
752
672
736
656
640
768
752
768
672
752
768
704
768
752
752
736
768
784
800
736
640
704
816
720
784
832
768
752
752
768
752
736
784
720
688
736
752
720
832
656
784
752
784
672
672
768
752
736
720
768
672
720
624
736
800
752
688
752
720
768
656
672
752
736
720
672
736
704
784
720
688
656
752
672
672
672
752
768
736
752
752
768
672
656
768
704
752
720
736
704
752
720
752
672
768
752
672
832
656
688
704
736
640
672
640
768
768
736
768
752
768
784
736
752
784
736
656
640
640
624
752
656
720
736
720
656
720
752
672
768
736
640
720
752
752
656
640
640
656
656
720
784
784
752
640
752
784
752
768
736
752
672
736
704
768
736
816
656
784
736
704
656
656
672
800
688
768
752
752
768
768
752
736
800
752
752
752
720
736
656
720
768
752
768
640
800
800
704
656
736
736
752
720
688
736
688
656
656
736
800
800
688
688
672
704
624
688
720
704
736
736
704
768
640
704
640
704
816
736
656
704
640
720
752
768
656
656
736
656
768
816
752
768
816
736
752
752
704
752
736
656
720
736
784
784
640
800
752
752
656
704
752
656
720
800
720
768
704
768
656
736
688
672
720
768
640
736
656
720
736
784
704
688
640
656
768
672
688
624
704
752
608
736
720
768
672
704
720
752
720
656
752
640
656
816
640
672
784
672
736
688
752
736
720
704
704
656
624
784
736
800
720
656
816
704
688
800
704
800
656
752
784
768
752
720
800
640
784
736
784
720
832
736
784
752
720
752
800
640
640
752
736
800
736
672
656
736
832
624
752
736
752
752
720
736
720
672
784
688
800
688
640
736
656
768
752
816
640
656
800
768
752
704
752
752
800
736
800
704
672
608
704
656
752
768
768
688
768
768
672
624
768
688
640
688
736
704
640
720
640
752
752
736
608
768
688
672
736
736
640
720
656
624
704
736
768
672
752
720
752
736
736
752
736
736
736
736
752
752
752
736
800
688
816
656
800
624
672
768
640
752
656
736
752
736
736
624
624
768
752
736
736
672
768
800
752
640
656
784
736
752
720
768
736
768
736
704
656
624
688
720
768
768
800
784
640
672
752
736
768
736
768
816
752
672
672
736
720
672
752
704
784
752
768
736
688
672
688
672
768
672
736
736
672
752
784
784
656
752
768
832
752
768
752
688
816
752
752
640
784
656
784
800
704
752
640
704
784
688
672
672
656
736
624
736
736
656
752
752
720
736
608
752
720
624
736
784
752
672
768
720
848
656
720
656
768
752
656
656
736
736
752
640
752
688
784
784
736
784
736
736
736
688
784
768
768
736
656
656
736
704
640
688
784
736
656
784
672
656
640
704
640
640
688
656
768
752
672
832
736
656
752
784
768
704
736
800
736
736
656
736
640
688
688
720
736
640
672
720
624
688
736
784
672
736
768
672
736
752
736
752
656
672
752
688
832
752
768
752
768
640
672
752
656
752
784
800
736
704
752
688
768
688
640
752
704
768
752
640
736
736
672
672
800
736
752
704
784
800
768
752
736
784
656
656
688
800
736
752
656
752
736
752
768
688
752
640
784
720
752
736
672
688
784
736
672
848
672
736
736
752
720
672
672
752
736
784
688
720
784
736
752
672
704
640
784
672
816
768
688
736
752
752
704
656
672
656
768
720
704
800
752
736
640
816
832
704
768
800
656
704
640
768
736
672
784
720
656
704
640
736
752
656
656
672
736
752
672
816
640
784
752
688
720
624
672
624
656
768
752
752
752
656
752
736
752
784
656
768
656
768
768
688
768
640
688
752
768
816
752
672
736
752
816
672
704
672
656
752
656
736
704
768
736
752
688
656
752
672
672
736
656
624
752
736
656
768
784
672
784
720
816
736
672
624
736
752
768
784
672
752
656
736
720
736
768
704
704
816
656
800
736
736
640
752
720
672
704
752
656
656
720
736
720
752
656
656
784
672
688
768
688
784
672
832
656
656
720
688
752
688
800
656
752
672
752
736
688
656
784
736
656
736
688
672
720
784
720
704
752
672
704
736
720
768
640
752
720
736
640
704
784
752
752
816
672
688
656
688
656
688
784
752
608
688
752
768
720
672
672
752
736
736
768
736
736
656
640
704
784
736
656
688
784
656
720
768
640
752
752
768
768
736
688
640
768
768
768
736
768
736
752
688
672
656
848
736
800
720
640
784
768
736
720
656
736
736
624
688
832
624
656
704
656
672
720
832
640
752
656
688
704
800
672
736
688
736
752
672
784
688
736
688
736
656
768
656
800
768
720
752
768
704
752
848
720
672
640
816
800
736
784
736
784
608
656
864
752
736
768
752
768
736
816
640
736
784
640
736
752
768
736
736
752
720
640
816
736
720
768
672
656
736
656
784
672
768
752
752
752
768
688
672
752
624
736
688
656
672
736
736
768
672
784
752
624
672
800
704
624
640
672
688
656
752
784
768
736
688
656
800
752
672
704
736
800
736
784
752
752
640
656
768
768
656
768
624
672
736
672
672
816
768
688
672
704
736
656
800
752
640
752
656
672
816
736
768
704
752
688
688
768
736
768
800
736
672
736
800
672
768
768
752
800
672
720
752
704
672
752
656
720
688
640
784
640
768
768
672
848
672
720
752
656
688
736
736
640
688
672
624
736
608
752
784
704
704
736
784
672
768
624
752
656
736
672
752
800
640
784
736
640
784
784
640
768
672
688
688
768
784
816
688
656
768
752
704
752
816
768
784
656
688
752
704
736
784
784
656
752
688
800
640
768
752
800
640
768
784
672
752
656
736
672
672
720
720
752
736
656
656
752
752
704
656
768
816
688
736
736
640
640
752
656
624
752
656
768
656
784
624
768
768
656
800
736
624
784
640
704
752
752
752
768
736
768
752
720
672
688
672
672
720
720
736
784
672
768
736
672
672
736
736
800
640
752
688
736
768
816
624
736
768
752
672
800
736
736
640
784
752
832
672
736
736
768
736
752
640
800
672
672
752
768
832
640
704
752
784
752
752
784
736
800
672
736
672
656
752
736
704
768
640
816
736
736
800
736
768
656
768
752
768
688
656
672
640
688
640
736
768
768
736
672
736
752
768
688
656
624
800
784
736
624
704
704
736
736
624
688
768
736
800
736
656
736
672
832
640
736
768
656
768
640
688
704
688
736
768
640
784
640
672
848
704
736
704
720
704
640
736
752
688
752
800
752
640
784
768
800
736
752
752
640
672
752
656
784
688
752
672
736
752
672
688
720
656
640
672
672
640
736
752
720
784
656
752
656
768
736
736
704
688
736
640
800
688
656
720
736
736
688
752
800
768
656
800
752
752
768
640
768
768
640
784
752
784
736
656
784
688
672
784
704
768
656
672
768
720
640
752
816
752
784
672
704
720
688
640
640
672
736
736
640
608
752
832
768
752
672
832
688
736
688
752
688
736
720
672
704
720
656
816
672
736
720
672
656
752
768
752
688
736
656
752
832
624
752
656
768
688
688
656
768
720
768
720
752
768
752
672
704
752
752
656
656
752
736
656
688
640
752
688
752
832
672
640
736
784
768
640
784
704
720
736
752
688
672
752
640
768
768
672
736
752
736
672
656
752
656
800
736
720
640
688
640
672
752
752
672
656
752
720
672
736
752
704
672
768
800
720
656
672
768
752
736
640
800
816
736
768
736
704
768
688
784
752
816
752
672
736
688
672
768
800
688
752
656
656
656
624
720
768
768
768
784
736
784
656
752
768
704
720
736
736
656
640
736
736
768
656
672
720
768
640
656
736
816
736
720
736
768
736
752
688
752
768
720
768
784
720
656
688
656
736
736
640
784
736
752
688
768
784
752
672
784
688
752
800
768
768
720
752
656
640
768
672
784
800
640
768
768
656
736
704
736
672
720
704
720
784
752
672
768
784
736
640
736
752
784
624
688
672
720
656
736
720
624
688
704
672
624
688
784
784
640
736
816
656
768
672
784
768
784
624
688
752
672
752
640
720
672
752
704
752
656
640
720
848
640
816
656
736
800
752
720
720
752
656
816
736
736
736
656
672
752
688
784
672
736
624
752
656
752
752
768
736
688
624
704
624
800
752
704
672
720
624
752
704
656
688
752
624
720
720
768
752
736
720
688
768
656
624
736
672
704
784
736
784
816
656
672
688
752
656
752
736
656
752
736
768
752
768
704
736
816
720
816
768
816
672
768
736
784
736
768
672
768
720
720
624
624
704
736
688
768
640
736
720
752
768
672
736
704
736
752
736
752
736
752
672
736
608
768
736
736
768
640
720
624
688
800
736
768
736
656
752
672
672
752
720
768
720
704
640
688
672
704
768
608
752
768
720
800
784
752
752
672
752
640
624
672
720
656
736
768
704
752
720
816
720
768
656
752
768
768
672
640
704
624
800
752
784
768
736
640
736
608
768
688
752
736
640
640
720
704
784
768
736
656
672
752
688
672
816
672
704
640
768
672
752
656
720
800
752
608
752
640
736
656
784
672
656
736
656
768
672
672
656
784
752
640
736
672
816
688
800
800
640
640
720
736
720
608
656
640
656
688
752
720
816
752
656
736
688
720
784
656
704
704
752
736
752
752
640
768
672
688
656
784
752
736
752
688
784
832
752
752
656
640
784
672
752
784
736
656
624
752
752
720
768
624
736
768
768
736
816
736
640
784
768
752
672
656
752
768
800
656
688
688
640
656
736
720
736
816
752
688
768
768
768
640
640
640
688
704
768
832
640
656
688
784
752
752
752
784
736
688
624
688
672
640
688
864
784
752
672
752
720
768
688
688
752
736
752
656
736
736
736
640
800
752
848
800
736
736
640
752
752
640
672
736
752
720
688
752
672
624
784
736
736
752
832
672
640
672
752
768
768
736
640
832
736
752
656
656
736
624
720
752
624
736
672
672
704
768
768
624
672
656
752
768
688
672
848
656
768
752
688
848
688
768
704
736
752
768
800
656
768
640
768
704
672
720
736
688
736
768
624
816
736
736
752
752
720
624
736
672
688
656
704
736
768
768
624
768
688
752
768
736
624
656
784
656
656
832
656
736
688
656
752
672
672
736
672
688
768
656
720
656
672
768
656
672
784
768
736
624
656
720
752
624
656
688
752
768
672
752
768
752
720
768
688
768
656
752
768
656
752
768
784
656
800
736
672
736
768
688
720
752
752
736
640
768
752
688
752
768
768
816
656
736
752
672
768
720
640
688
800
736
752
704
672
784
768
720
640
752
768
768
784
768
784
672
736
768
784
672
752
752
736
752
704
688
672
640
704
640
752
640
752
736
656
752
752
784
656
720
784
816
784
672
752
768
688
736
752
736
736
656
720
672
672
752
672
640
752
640
768
736
720
640
688
656
672
768
768
736
704
752
704
656
688
720
768
768
816
672
656
704
656
720
640
688
672
672
640
784
736
816
752
752
656
720
768
624
688
816
656
736
752
768
656
656
704
720
624
736
752
720
672
672
752
752
768
688
768
816
656
624
736
672
672
656
784
752
784
688
656
768
640
672
752
688
752
752
656
656
832
656
672
816
736
736
768
656
752
752
656
736
848
656
736
672
672
816
688
752
784
768
672
816
656
800
736
656
704
752
752
640
672
768
800
640
816
720
640
736
768
672
672
768
672
720
624
736
720
768
688
800
736
784
656
768
768
736
800
624
816
656
736
736
672
688
688
688
640
768
768
736
784
640
736
656
784
736
784
720
688
816
720
736
688
848
784
688
736
752
736
752
768
768
752
640
672
768
736
768
736
720
784
752
752
720
736
784
720
688
752
784
720
672
656
704
752
688
704
752
752
656
688
720
640
752
720
656
720
656
752
624
800
640
672
720
688
800
768
672
768
720
752
624
752
688
688
736
656
720
752
672
688
720
784
640
800
672
688
672
800
800
752
656
736
736
736
752
656
736
720
736
816
640
656
656
688
656
640
784
752
752
656
816
704
784
640
720
752
752
736
768
736
768
736
768
752
704
832
640
720
736
784
752
688
688
816
752
720
672
768
672
672
800
768
656
736
688
656
688
624
736
784
784
688
720
768
768
768
768
768
736
688
752
704
688
752
656
688
704
656
672
752
672
656
672
672
816
672
736
752
736
784
736
800
656
752
736
736
720
640
720
656
848
736
656
816
672
768
736
752
736
736
656
688
640
768
752
752
784
672
736
640
688
720
672
784
688
784
816
768
784
832
752
752
640
768
752
768
672
800
720
688
752
672
704
640
816
752
784
656
736
704
720
752
736
656
688
736
672
688
720
752
752
656
768
624
784
720
720
640
768
704
688
624
656
672
752
736
688
720
736
768
672
704
624
768
800
736
768
736
768
640
640
768
752
768
752
752
752
656
672
640
832
704
736
736
736
816
720
752
736
848
656
656
656
720
720
672
672
720
720
672
768
752
736
720
800
736
768
736
736
672
800
768
816
736
736
624
672
720
704
672
672
768
672
736
784
672
800
624
608
704
784
768
672
736
624
752
688
736
784
672
640
672
768
736
672
752
768
672
624
672
688
624
800
656
688
656
784
656
816
640
704
640
736
752
640
816
752
736
656
752
736
752
768
720
720
736
736
640
736
608
672
752
752
736
672
784
752
656
752
656
704
752
624
736
752
768
736
768
752
624
736
768
768
736
656
784
656
784
672
624
736
736
752
800
736
752
672
672
720
640
752
656
736
688
768
656
752
800
640
720
800
752
736
768
752
800
752
736
656
720
656
688
656
672
752
752
768
704
768
688
640
736
720
752
768
640
752
736
784
752
736
704
656
672
768
800
784
752
640
704
672
752
704
752
752
640
784
736
656
736
752
656
656
688
608
720
752
688
704
672
704
768
720
784
800
672
768
800
784
640
816
752
704
624
768
656
704
736
640
720
752
752
736
624
640
800
720
720
688
720
704
688
752
736
784
768
752
672
640
720
736
816
608
720
688
848
688
640
752
752
752
768
768
768
656
720
688
640
720
752
800
768
704
752
800
640
720
800
688
672
720
784
784
688
768
800
752
672
752
720
752
752
848
656
736
800
704
688
736
784
672
736
768
688
800
688
768
768
752
704
768
768
768
720
640
736
816
720
688
736
672
656
720
752
736
624
736
768
736
720
768
704
656
720
736
704
816
688
768
752
672
752
752
768
736
752
640
720
640
656
672
656
656
688
736
736
784
736
784
752
624
752
624
752
656
752
736
640
768
800
736
736
768
656
656
672
752
816
640
608
768
832
768
640
752
704
720
688
624
736
656
784
752
752
736
640
672
768
752
800
656
768
784
656
704
752
784
672
768
784
784
752
736
672
768
688
640
768
768
752
768
768
768
704
784
736
784
720
592
768
736
720
720
736
656
736
784
656
816
656
624
784
752
816
640
624
720
736
736
816
720
752
672
768
768
704
752
736
656
688
752
672
752
720
672
800
816
672
752
688
784
720
672
704
752
672
640
736
752
736
768
720
752
656
656
672
752
800
752
752
720
752
656
736
672
720
768
768
752
736
704
720
768
688
800
736
640
752
800
640
752
656
720
752
688
624
624
736
656
736
624
624
752
752
672
736
656
832
736
656
784
768
672
736
752
752
752
784
640
688
656
800
752
752
688
736
720
752
736
656
800
768
672
608
752
656
720
752
720
784
720
656
736
752
688
656
752
768
752
656
624
736
736
736
672
752
640
640
752
672
672
736
768
656
640
768
688
688
848
656
752
720
640
656
672
784
624
768
768
800
752
640
768
816
752
752
832
736
736
768
672
704
656
736
736
768
816
656
624
672
752
736
752
704
736
768
768
704
720
656
768
752
736
768
768
736
656
832
720
784
768
800
736
736
800
656
736
736
768
688
672
720
672
768
736
736
784
736
752
800
624
736
640
752
800
720
768
704
736
736
768
784
752
752
752
784
784
768
848
720
752
656
688
704
784
720
720
736
752
800
752
736
784
688
672
752
704
752
736
752
768
640
640
752
656
656
720
704
688
720
704
640
752
640
688
768
720
720
784
736
720
640
640
656
752
672
752
768
672
752
672
736
736
640
752
656
752
800
720
768
752
768
752
672
752
752
768
768
736
768
784
720
768
720
768
688
640
768
720
736
752
736
672
800
704
768
784
672
736
656
720
736
784
720
688
624
688
752
736
736
672
784
736
752
640
816
752
800
624
672
736
704
736
784
784
688
736
816
720
736
736
688
688
736
832
672
720
752
752
640
720
672
688
752
752
688
704
736
672
688
704
752
752
624
688
672
752
672
656
752
704
736
768
672
832
736
656
704
768
672
720
736
736
736
736
736
672
704
640
720
784
704
624
720
816
736
736
672
720
800
736
736
736
752
752
704
768
736
752
688
784
736
768
624
752
768
672
768
704
656
720
640
656
768
656
768
800
752
672
832
640
768
784
672
720
624
752
672
752
720
752
720
736
784
752
736
784
736
736
752
656
672
736
624
656
768
736
752
704
784
736
768
752
784
672
736
752
640
768
720
752
672
752
704
752
688
624
800
784
704
752
784
720
800
624
752
640
704
752
688
784
784
752
736
752
720
784
800
768
688
704
624
608
656
608
688
816
752
816
736
720
752
752
736
640
720
752
768
672
784
752
720
752
688
736
640
656
736
768
656
736
672
624
672
736
736
800
752
736
768
688
736
688
624
752
672
720
752
672
656
672
752
752
752
656
640
784
688
832
768
800
768
816
688
672
736
736
656
736
784
752
784
736
640
656
624
720
672
784
656
688
736
752
784
736
816
736
736
784
656
736
752
816
672
768
736
624
656
784
736
768
768
784
720
640
752
736
704
768
768
624
768
752
784
752
752
752
752
784
752
720
768
768
768
768
816
736
656
784
704
704
752
784
768
736
656
736
688
704
640
704
704
784
704
752
752
784
768
752
768
704
736
752
784
720
640
736
784
704
752
736
720
720
656
656
704
720
688
656
640
672
800
736
640
752
784
624
736
752
704
720
736
768
736
752
656
736
768
640
752
752
640
640
720
704
768
768
752
736
768
656
736
752
720
800
784
720
768
800
720
832
736
736
768
784
720
672
736
656
752
736
672
656
736
640
768
720
736
656
704
672
640
656
752
736
752
736
720
672
752
672
672
720
672
784
704
720
640
688
720
704
736
768
640
720
656
672
784
672
640
624
816
752
672
688
656
768
768
736
768
736
752
752
784
784
688
736
720
736
720
752
672
736
768
816
624
752
768
752
800
784
752
752
688
784
656
672
816
688
672
752
704
736
736
736
816
736
784
720
800
752
688
736
768
768
800
752
768
752
704
768
736
768
736
736
720
688
672
688
720
608
768
672
752
832
688
720
736
784
816
736
672
784
736
688
672
672
800
640
624
752
752
704
816
720
768
816
640
768
816
768
672
768
752
720
624
784
736
736
768
688
752
752
736
656
784
752
784
640
832
752
672
672
704
736
736
640
752
752
752
752
784
656
784
672
752
624
736
608
720
656
672
752
720
624
720
752
688
752
752
784
688
688
784
672
672
768
816
656
752
784
736
752
752
752
752
672
816
720
752
640
752
736
736
720
672
736
704
752
768
752
752
768
656
640
768
736
736
688
672
752
752
640
752
656
784
752
720
720
688
656
768
816
720
672
768
784
736
768
656
672
672
752
768
752
688
640
768
752
736
768
688
720
640
752
784
768
768
784
800
720
672
752
656
736
768
752
752
672
768
704
720
720
768
720
656
736
752
736
720
784
640
736
688
768
720
688
736
656
736
672
736
688
768
640
752
752
672
784
736
736
720
656
784
656
752
752
816
768
768
752
672
816
704
768
752
736
800
656
672
784
640
704
656
736
688
768
816
640
752
656
752
768
736
784
688
688
640
736
672
656
752
688
816
640
736
752
672
752
672
736
752
768
688
656
656
736
704
688
736
752
752
672
640
752
704
704
736
640
704
720
768
784
736
784
752
688
832
816
736
752
704
640
784
768
768
736
768
752
672
688
704
736
656
768
736
800
736
640
720
800
688
768
656
688
720
640
768
640
624
672
800
736
784
752
672
736
752
688
624
784
752
752
640
752
768
800
624
672
752
736
720
752
672
672
640
800
752
768
704
656
736
640
752
752
688
768
736
784
656
832
720
704
704
704
720
656
640
672
752
672
720
720
816
768
768
736
768
736
768
640
736
752
704
672
752
736
720
720
752
624
752
816
752
752
640
784
672
640
768
768
736
720
640
704
784
720
720
656
688
704
720
656
752
704
752
816
656
640
656
736
784
720
752
752
736
688
752
768
672
704
752
656
672
752
656
688
768
688
688
720
752
656
768
688
768
816
656
640
736
752
704
736
768
720
640
800
624
704
784
720
752
640
736
800
720
704
720
784
736
720
736
672
736
720
752
656
816
688
640
656
784
816
736
752
752
816
768
672
752
672
640
768
672
784
736
768
768
752
784
736
672
640
768
768
752
800
672
672
800
704
768
800
752
672
704
768
784
720
704
672
768
752
736
768
752
656
816
720
736
720
800
784
624
624
720
752
784
656
672
768
656
720
656
688
608
656
736
752
672
672
688
752
720
752
672
672
704
800
720
672
784
832
752
672
768
704
752
752
752
656
800
752
736
736
752
656
768
752
752
752
768
656
704
752
624
752
704
784
768
752
672
752
624
800
736
752
640
624
720
752
656
752
640
656
656
672
768
656
688
752
672
624
624
736
768
624
784
688
656
736
752
752
752
672
656
816
752
672
672
752
704
704
768
752
752
672
704
672
736
736
752
784
736
752
736
816
656
736
736
624
672
688
800
752
784
752
640
656
672
768
752
640
752
752
720
752
672
656
736
736
768
736
720
656
752
768
784
720
784
736
672
704
624
672
672
736
736
784
720
768
704
752
736
688
752
656
768
752
800
672
768
704
704
672
752
816
736
656
656
688
672
640
752
640
656
704
816
768
768
768
640
784
640
736
752
736
608
640
768
656
736
752
752
624
656
768
672
736
656
672
640
656
624
752
800
720
768
752
720
688
720
720
688
672
784
752
736
720
768
752
736
704
736
768
800
736
640
672
656
672
768
672
752
640
784
656
752
832
624
784
720
704
672
656
688
800
736
736
688
784
768
768
752
640
736
624
656
624
736
688
720
736
784
656
752
736
752
672
768
736
752
768
720
704
640
736
832
736
688
736
736
816
720
688
736
720
768
688
704
640
656
672
656
768
752
704
720
656
752
752
720
736
752
784
688
672
720
640
768
672
752
832
736
800
672
736
784
624
768
656
688
624
672
800
768
752
720
736
720
656
768
768
688
736
672
656
784
608
768
784
752
768
768
752
752
736
736
720
704
736
736
768
688
784
800
736
688
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
352
752
736
672
752
720
784
736
672
816
752
656
736
816
688
672
736
736
688
768
640
624
640
768
736
752
720
656
720
720
736
800
768
784
672
688
720
736
720
736
736
720
736
736
736
752
784
784
656
672
640
800
624
768
768
736
768
608
672
688
736
704
688
752
752
752
640
736
768
768
672
736
688
736
768
672
768
640
752
752
784
784
768
752
800
704
656
640
752
752
656
784
656
768
768
768
752
688
816
704
640
656
736
768
736
736
640
768
640
656
736
784
752
672
752
752
640
656
672
752
688
624
752
736
672
784
752
688
752
752
656
688
752
768
672
720
656
752
752
704
768
672
768
672
752
672
768
768
768
800
688
704
688
640
720
640
720
672
720
704
736
736
784
768
768
784
768
656
752
672
736
704
656
752
720
736
784
656
736
768
640
736
720
768
752
720
736
656
624
704
656
624
752
688
752
784
704
640
736
640
736
752
752
640
816
752
672
768
768
736
736
736
672
656
752
656
752
688
784
736
736
736
672
656
800
640
752
752
800
736
736
736
800
768
704
736
656
768
752
768
656
768
752
704
704
784
704
768
688
640
752
656
704
752
640
720
720
768
720
672
736
656
704
752
736
784
720
736
752
656
672
736
800
752
688
752
752
768
784
752
800
768
736
640
768
672
784
688
752
768
720
784
720
736
672
736
752
752
784
752
768
736
624
672
672
704
768
816
736
656
752
736
720
768
768
752
736
752
752
768
624
768
800
656
640
736
688
656
656
752
752
656
752
704
768
768
816
688
704
752
656
656
768
768
752
688
688
688
720
800
752
768
768
816
672
768
656
640
800
736
768
656
720
752
832
752
816
816
688
752
720
736
752
688
784
720
640
768
752
816
752
752
704
720
784
688
752
688
784
704
736
752
768
720
720
736
672
704
752
656
704
768
672
656
752
720
688
736
736
704
752
672
800
752
736
640
768
640
816
672
672
800
784
736
816
768
736
688
768
784
736
656
672
752
800
688
784
736
816
784
640
672
800
672
720
832
688
656
704
752
832
752
768
656
672
832
656
768
832
672
704
752
704
704
752
752
736
640
752
672
752
704
672
768
768
768
768
672
752
720
672
768
752
752
752
704
736
752
768
816
704
768
816
752
736
688
752
752
768
752
816
752
752
784
752
736
672
800
736
672
736
784
736
672
752
640
784
736
624
672
720
672
768
656
800
656
768
752
640
672
720
656
752
736
752
736
688
688
656
656
704
656
768
752
816
688
768
784
608
688
704
640
656
736
816
736
768
672
784
800
672
688
640
720
752
768
688
768
752
800
656
688
784
672
752
640
704
752
704
672
704
752
800
752
768
752
624
640
768
656
768
832
688
752
768
672
768
656
656
656
800
640
736
784
736
768
704
688
784
672
800
640
736
672
768
720
736
736
672
752
768
720
736
816
800
672
752
720
784
624
656
736
768
688
768
672
800
720
736
688
688
736
752
752
688
768
720
720
752
752
688
768
736
656
752
640
640
656
656
688
688
672
768
688
800
656
656
736
736
640
656
736
736
736
736
752
736
656
736
704
688
768
656
768
640
752
704
640
688
672
688
768
704
736
672
768
816
720
672
768
672
656
736
752
816
768
752
688
720
784
752
752
672
736
768
720
768
640
672
768
752
768
736
624
768
672
736
656
816
640
720
656
768
752
688
704
736
640
736
736
672
608
736
640
768
768
736
720
672
704
720
656
752
752
736
640
832
624
704
688
832
720
768
736
752
688
672
752
768
768
768
768
768
640
768
704
688
768
784
768
752
752
672
816
672
736
816
736
688
720
736
736
752
736
768
736
720
752
640
720
720
752
736
800
720
752
640
752
736
800
752
736
768
784
720
720
768
672
768
672
640
656
816
624
736
768
768
624
656
752
736
688
768
672
624
688
656
672
784
752
752
784
752
720
736
816
672
800
784
768
800
816
752
624
656
672
688
736
688
720
720
656
656
672
768
736
752
736
640
768
736
800
656
768
752
640
688
704
672
736
800
752
656
736
640
736
656
736
816
752
688
768
736
736
672
720
800
688
784
736
704
688
800
688
624
768
656
656
656
720
704
752
656
768
656
656
720
784
768
672
816
720
752
624
832
736
720
672
768
672
704
752
784
800
736
736
736
752
720
816
656
784
768
752
736
752
640
768
640
752
640
816
752
752
640
656
688
656
816
752
736
752
768
704
720
752
688
720
752
672
752
640
736
672
640
640
800
672
688
704
768
720
688
768
624
768
656
752
784
672
768
800
800
736
720
656
800
640
720
672
720
800
656
752
816
656
656
672
736
768
720
688
640
656
752
720
736
736
752
624
672
624
656
736
736
624
784
784
784
736
720
752
736
672
768
656
672
640
752
768
656
640
752
736
656
688
672
720
768
784
656
784
640
768
784
624
736
752
736
800
736
736
736
800
784
656
656
768
640
736
640
800
736
624
720
752
672
736
752
672
736
800
720
736
672
656
752
736
624
656
720
688
720
640
752
736
672
672
784
640
656
720
768
704
720
832
736
688
736
688
800
768
736
736
736
768
704
624
736
768
752
736
736
752
816
640
720
656
672
736
672
752
752
640
752
656
752
720
672
752
736
720
656
640
736
688
752
688
656
816
672
752
704
688
720
720
656
736
736
752
656
768
720
656
768
672
768
768
656
704
736
736
736
768
688
768
784
736
800
736
752
768
688
672
656
784
768
784
656
688
816
688
736
784
704
704
720
768
800
736
640
768
736
688
688
704
688
736
736
656
656
736
752
800
752
752
704
736
624
640
800
752
640
640
736
672
736
640
640
640
720
688
672
672
736
752
688
736
736
752
640
704
768
656
736
800
768
672
752
624
816
800
768
752
704
736
752
672
768
672
672
752
704
672
784
736
768
720
672
752
720
640
784
704
736
752
672
752
752
768
752
688
800
624
736
736
752
704
720
704
768
656
688
656
832
640
800
640
736
672
672
640
656
784
656
784
704
816
736
624
720
736
640
656
752
656
816
752
768
768
752
640
752
768
736
656
768
672
784
816
720
736
768
672
704
672
672
688
784
784
656
752
688
704
656
768
720
688
640
752
656
720
640
816
752
736
784
672
656
704
752
768
800
720
752
688
816
656
784
768
704
672
752
672
816
720
768
656
720
656
736
784
752
800
624
768
800
752
768
768
768
768
704
672
656
656
672
816
752
816
768
768
768
768
752
720
752
656
768
656
720
688
672
656
672
640
784
752
752
720
752
736
752
736
784
768
656
656
736
688
720
672
784
704
752
656
720
768
736
736
720
688
800
704
672
752
752
640
768
768
768
672
736
672
784
656
752
720
720
784
736
752
784
736
704
736
704
768
672
768
752
736
656
656
768
736
768
752
704
640
800
672
752
752
720
800
704
752
624
784
640
768
736
640
640
736
656
672
768
720
752
672
656
704
672
768
752
656
752
832
736
656
656
752
752
672
736
672
800
704
800
736
688
752
624
720
800
752
752
720
704
672
688
784
784
672
736
688
752
736
672
752
720
688
656
656
768
752
656
832
736
800
720
816
720
784
752
768
768
736
640
736
624
672
768
720
656
752
672
672
752
720
672
784
752
736
736
640
720
752
752
688
688
640
832
752
768
768
800
752
768
688
672
704
640
736
736
800
848
752
656
832
656
752
624
720
784
768
720
704
816
736
720
752
768
736
672
752
672
768
720
752
736
768
656
784
720
624
736
784
784
656
752
736
736
752
736
736
688
624
752
752
704
736
768
704
752
672
768
688
656
656
736
736
752
768
784
688
752
800
752
784
688
768
736
752
704
720
752
704
768
752
656
704
752
672
768
784
816
640
752
832
784
768
704
768
720
720
832
640
736
768
688
784
800
752
736
704
752
800
624
736
656
720
720
768
656
656
736
768
640
688
672
768
784
752
752
640
720
704
720
624
640
752
720
704
704
656
736
768
816
640
752
768
720
800
784
752
720
656
784
656
816
656
656
816
656
784
752
720
640
736
752
784
704
832
640
752
736
784
752
752
800
752
816
768
752
768
672
688
720
736
752
688
672
752
752
768
704
624
672
640
752
688
832
720
768
720
800
720
768
736
752
656
800
736
672
736
736
752
640
752
784
784
704
752
752
656
688
784
832
768
720
768
800
688
768
752
720
736
656
784
672
736
672
768
768
688
656
704
640
640
752
640
736
736
752
752
656
768
656
752
704
640
752
656
672
672
752
736
640
688
832
704
672
736
704
752
720
704
768
704
736
704
672
640
688
624
656
656
736
736
752
784
672
640
816
672
672
672
752
784
656
688
768
688
656
608
768
784
736
768
784
768
624
736
736
720
736
640
800
736
672
768
800
736
768
752
768
736
752
640
688
736
848
736
736
624
608
736
752
736
624
736
768
656
736
768
640
640
752
656
752
768
704
640
768
736
720
688
768
768
768
768
752
672
640
752
704
736
672
784
768
768
640
640
736
720
784
688
768
720
752
832
688
752
672
800
736
688
672
736
816
672
656
768
800
736
704
752
752
656
624
752
816
656
752
672
752
640
752
736
672
736
640
688
656
768
736
800
656
752
752
752
720
624
768
784
768
784
688
784
832
720
752
800
736
720
640
784
752
720
752
688
768
720
752
752
736
736
656
656
752
800
624
736
688
704
720
816
752
768
752
800
624
736
752
752
752
688
752
752
640
736
640
688
720
752
752
784
624
768
720
672
736
736
624
800
656
736
656
656
640
688
768
720
768
736
736
816
752
784
736
800
752
640
656
816
784
640
768
752
624
832
752
656
672
768
736
736
752
800
736
656
688
736
672
752
736
736
752
672
784
832
656
672
672
800
688
640
736
736
736
752
672
720
656
672
656
656
640
720
672
768
720
768
640
656
656
752
688
768
768
720
752
704
688
736
800
768
688
768
768
784
672
672
752
672
784
800
624
752
752
784
768
784
752
720
720
672
816
768
672
816
784
768
752
736
704
672
672
768
800
704
704
816
640
640
752
720
624
736
624
768
736
752
720
640
752
624
736
800
656
672
688
672
784
656
672
752
752
736
784
768
736
672
752
640
656
688
768
768
704
752
688
800
736
752
768
752
752
736
736
672
672
672
784
704
752
752
672
816
736
656
688
656
720
800
736
736
736
736
672
704
752
624
656
640
752
656
640
720
720
624
672
768
752
672
736
768
608
752
752
832
656
736
656
768
752
672
736
752
640
688
672
768
816
704
752
688
656
672
752
688
736
672
656
752
784
752
624
752
768
736
768
720
656
800
672
656
672
752
624
816
720
640
736
656
704
752
784
768
768
736
736
768
768
704
752
752
672
608
768
752
736
784
672
720
752
736
640
608
800
656
640
800
656
752
752
752
752
752
752
656
752
736
640
656
720
656
768
688
720
736
688
736
736
736
688
688
736
784
752
672
752
656
656
800
624
640
672
784
688
736
784
656
672
736
768
784
752
736
784
752
688
752
720
624
720
656
720
800
752
768
656
832
720
752
672
752
768
688
784
768
704
736
640
624
736
768
640
672
720
624
656
768
736
688
752
784
736
784
656
784
800
752
768
800
704
736
672
832
672
672
672
800
752
736
752
672
752
752
656
672
768
784
656
640
624
656
688
736
672
720
736
752
640
704
672
704
704
720
736
736
720
704
656
800
800
704
736
752
752
800
640
768
784
656
640
656
768
736
672
656
656
640
688
832
752
736
656
704
784
784
624
656
784
768
640
704
816
672
656
704
832
752
736
640
720
688
752
784
736
784
656
672
736
784
752
640
720
688
624
768
720
736
720
800
656
720
752
752
736
656
640
672
736
752
784
752
672
752
800
656
784
768
800
656
832
704
656
752
688
736
752
768
768
640
768
768
768
608
784
672
752
752
656
752
752
624
624
672
800
752
768
784
688
736
768
784
688
672
704
736
704
656
768
832
688
752
736
672
640
752
752
640
800
736
656
752
672
752
656
848
752
736
752
752
752
768
768
624
752
752
672
720
784
704
784
752
672
736
736
656
800
672
736
768
736
768
720
752
768
784
704
736
704
784
688
704
656
656
800
640
672
736
752
672
752
800
816
736
768
768
768
752
800
640
720
752
736
672
736
688
736
704
656
704
784
704
688
752
640
816
720
816
752
752
736
768
768
656
800
752
768
672
752
672
800
736
752
752
752
784
704
672
656
784
816
704
768
624
752
800
640
720
656
656
752
608
768
832
768
736
752
768
768
784
784
752
768
768
752
768
784
752
656
608
640
640
768
736
816
704
672
720
624
768
704
752
800
752
704
784
736
784
656
688
768
784
752
640
688
784
752
624
752
768
672
704
704
768
784
688
768
752
800
640
656
800
768
672
704
736
800
736
656
816
624
752
720
656
672
816
672
736
752
752
640
800
624
800
736
672
752
784
656
752
752
752
624
784
704
656
768
688
672
768
768
640
816
640
800
688
736
672
720
752
816
656
704
736
672
768
640
672
768
768
816
768
752
640
832
656
672
688
704
736
640
656
768
736
672
640
736
688
768
640
768
736
640
720
752
752
624
736
752
752
704
704
688
704
720
768
720
768
720
736
752
752
672
784
832
688
704
640
656
768
752
736
832
736
736
752
672
704
752
640
768
768
768
720
640
688
624
672
736
688
736
736
672
768
672
752
768
672
736
784
704
720
768
752
688
656
736
640
752
768
736
688
640
720
752
656
768
768
752
704
752
672
656
768
704
672
736
608
752
784
768
672
752
800
640
736
800
640
736
736
768
656
736
672
736
752
752
656
800
848
768
736
672
816
656
672
784
704
736
688
672
784
704
704
672
752
704
656
784
736
704
624
656
688
704
752
640
784
688
640
624
656
752
736
752
720
752
736
720
752
768
816
720
784
720
736
720
656
656
720
640
800
656
656
784
816
656
784
752
656
752
816
704
736
720
768
656
640
624
688
688
752
656
832
720
752
768
784
672
784
752
736
816
752
672
640
656
800
672
672
672
704
640
752
640
816
800
784
752
656
720
720
640
752
768
752
656
752
656
656
736
624
816
768
736
672
720
656
688
752
672
816
688
640
688
752
752
688
752
784
688
752
704
640
736
640
768
752
720
656
656
784
672
624
720
752
640
672
672
672
752
752
768
704
768
736
640
736
672
672
832
608
720
752
672
768
800
736
800
736
752
736
752
624
768
768
768
768
656
720
736
704
656
768
736
752
752
720
816
688
672
672
640
672
688
736
752
816
736
736
656
672
720
736
736
640
784
688
640
640
736
672
656
736
784
752
640
688
816
752
688
784
624
768
752
688
688
784
672
752
752
768
672
672
752
736
688
752
768
800
640
832
624
752
624
784
800
768
720
768
816
688
752
736
784
688
656
784
656
736
640
720
736
688
752
800
640
752
640
752
736
736
672
624
672
704
752
736
768
784
752
720
768
736
656
736
656
816
768
784
752
688
768
736
800
752
720
656
768
784
736
704
736
768
736
704
656
736
752
752
736
720
688
624
768
624
736
736
720
672
640
672
688
640
640
672
752
656
832
720
736
736
656
752
640
736
736
640
752
656
752
640
736
656
720
768
640
752
752
736
672
704
832
672
752
688
768
688
768
656
768
768
752
656
816
656
736
704
688
816
640
672
752
816
656
768
624
752
832
736
784
672
704
736
736
736
752
736
736
688
656
752
752
656
736
752
736
720
720
832
768
640
656
752
688
672
656
784
784
640
816
640
688
752
784
720
656
752
752
688
672
688
704
672
784
656
656
752
672
752
800
752
752
768
688
752
672
656
672
656
656
736
736
688
752
800
704
672
688
752
672
672
672
640
688
736
752
736
736
640
656
736
752
720
640
656
752
752
736
688
656
672
688
752
768
672
736
752
768
752
768
768
800
704
800
752
784
800
784
752
816
752
784
672
752
640
688
736
752
736
768
640
752
768
752
672
736
784
736
720
768
688
720
752
736
720
672
768
752
720
752
656
704
800
736
784
736
720
656
736
752
672
704
768
672
720
752
752
656
736
688
736
656
688
704
736
800
624
656
816
752
656
704
768
720
672
800
672
784
752
768
736
688
688
816
624
752
768
752
688
768
832
720
624
800
624
736
704
752
736
672
752
688
736
656
752
736
752
736
752
768
720
736
640
752
704
752
688
768
640
688
672
704
672
784
672
752
768
640
768
784
688
688
784
816
736
640
752
752
640
752
752
736
752
784
752
688
752
768
816
640
752
752
768
688
768
656
816
672
784
656
816
688
832
624
672
752
736
752
800
768
784
768
816
672
768
768
784
832
720
736
768
672
640
704
656
752
800
752
768
720
768
672
752
800
752
768
768
736
784
784
736
768
784
672
736
752
656
800
752
672
816
656
800
752
816
640
656
800
640
752
784
768
736
752
640
640
784
672
768
736
672
736
640
640
784
720
736
768
768
800
656
720
736
768
608
784
640
736
656
752
688
736
720
640
736
720
800
736
672
752
816
736
672
736
736
656
736
624
768
736
608
784
752
720
752
768
736
768
704
752
784
736
704
752
672
816
672
720
752
688
704
688
704
720
768
736
720
704
768
672
720
640
704
736
768
768
736
640
736
672
656
720
736
608
752
720
688
704
800
768
752
720
720
672
704
784
688
688
704
752
640
768
688
736
752
752
656
704
688
736
720
784
736
752
656
656
736
736
720
784
720
608
816
736
832
736
752
672
688
768
816
784
800
704
752
688
768
752
720
768
752
768
768
752
720
688
672
720
784
688
656
640
832
720
752
736
784
720
752
672
752
736
640
768
752
768
768
640
736
768
736
720
640
768
624
768
736
736
720
816
688
736
752
624
736
736
752
704
688
736
720
704
720
672
640
656
752
640
736
784
688
752
704
736
656
624
672
768
800
736
768
656
608
752
688
768
720
816
768
768
752
752
736
736
656
784
752
624
784
704
672
768
736
704
640
752
752
704
624
656
672
784
752
640
768
688
768
752
752
752
768
736
656
752
784
720
768
672
784
704
784
720
784
752
752
656
784
720
704
672
752
704
800
624
736
640
768
672
832
736
752
832
672
768
640
752
736
640
784
720
752
768
704
672
768
800
720
640
752
688
656
800
816
768
752
768
704
736
624
672
640
640
640
672
816
752
624
624
800
736
704
736
736
800
736
608
768
720
656
688
816
656
704
752
640
768
688
640
704
656
752
736
640
800
752
752
688
800
736
800
736
736
640
768
624
800
736
640
752
752
768
800
768
752
784
736
784
800
736
736
640
688
816
768
656
624
640
768
752
656
672
656
640
672
768
768
720
656
736
784
624
720
672
752
624
656
720
640
736
672
752
784
752
768
704
736
768
720
752
736
768
656
768
720
736
640
736
656
656
736
768
768
656
752
768
768
672
768
672
752
688
688
672
784
688
752
784
768
736
704
656
688
624
768
752
752
688
736
688
752
736
640
784
640
768
688
768
672
784
752
752
800
640
672
672
688
656
736
816
656
816
752
768
736
768
752
800
736
720
736
752
752
736
752
640
672
656
800
704
672
672
672
784
704
800
704
656
736
720
816
768
784
720
752
672
784
736
752
736
752
800
640
784
768
768
720
640
768
768
784
688
736
752
736
768
672
784
688
736
752
688
640
656
768
720
720
720
624
736
736
768
816
752
832
672
752
736
784
624
720
768
720
752
624
752
720
656
736
768
752
752
704
736
736
736
688
672
816
752
736
688
768
656
672
736
720
736
736
784
800
704
752
800
736
688
640
752
784
784
688
784
752
800
640
736
752
704
640
816
768
800
816
752
800
656
752
752
720
752
672
752
736
720
688
736
608
688
816
624
848
704
768
640
672
800
704
736
720
720
704
656
720
672
736
736
736
672
752
656
784
672
672
768
736
768
624
736
736
736
752
656
752
800
640
768
720
768
800
704
688
752
784
688
656
752
704
704
784
736
752
816
656
656
656
800
736
656
816
640
656
656
752
752
672
736
640
736
688
784
768
704
752
736
640
736
672
672
800
656
736
736
784
704
752
752
736
720
832
800
704
720
736
784
768
656
736
800
800
752
640
672
752
784
656
720
752
752
640
768
736
640
656
784
640
752
736
672
624
736
640
736
672
736
736
640
640
784
752
768
752
672
640
624
608
640
656
752
656
768
784
656
768
672
752
768
784
816
752
640
672
720
752
704
704
736
752
672
752
704
752
704
752
720
752
688
704
656
800
688
672
784
640
672
624
752
768
816
624
688
624
672
688
672
704
768
640
672
720
640
784
720
720
816
736
768
688
688
736
720
656
656
768
768
736
736
640
640
752
640
816
640
656
656
832
736
688
784
832
656
784
800
800
736
800
656
752
656
752
672
656
768
752
640
720
672
784
736
784
832
672
640
640
816
752
752
784
640
640
736
688
784
624
640
672
784
752
720
672
624
816
688
672
800
784
752
640
768
752
768
736
656
720
624
672
736
720
752
768
752
752
688
736
816
656
688
832
768
672
816
656
752
752
640
720
816
656
672
736
688
752
720
672
784
752
672
640
752
736
624
752
656
720
736
768
624
752
768
656
768
672
800
720
752
736
768
656
720
800
720
688
752
720
736
752
736
752
784
736
752
624
656
640
656
768
736
752
704
640
768
720
736
752
736
784
656
704
752
720
736
768
736
768
816
768
720
704
752
688
720
768
752
768
608
800
656
720
720
656
672
640
640
672
720
656
736
688
800
704
736
720
640
752
752
720
768
656
784
624
656
704
672
736
704
624
688
784
672
752
736
736
768
624
720
768
736
768
816
752
784
656
752
704
688
768
784
624
816
784
736
736
816
752
736
784
736
752
672
720
784
752
816
672
752
688
672
784
752
640
768
784
704
720
656
688
656
768
640
784
688
736
640
752
752
656
736
816
752
704
656
752
704
768
640
784
752
656
720
736
704
768
656
656
784
800
688
784
672
704
736
784
656
672
768
768
768
816
768
784
720
640
672
800
672
752
688
784
752
720
672
800
720
752
736
768
768
720
704
736
672
736
640
832
736
736
736
752
736
736
784
752
752
640
672
656
656
752
656
784
752
720
752
752
752
720
768
672
736
624
768
656
720
720
704
640
768
736
784
704
624
768
736
656
704
672
656
784
736
736
656
656
672
720
672
800
672
640
640
768
768
752
736
848
720
752
720
688
752
688
720
768
800
608
752
656
688
736
768
752
784
640
640
720
720
624
768
640
656
736
736
752
768
688
736
656
736
736
736
656
672
768
640
704
752
640
672
768
768
672
768
736
736
656
688
672
672
656
784
736
736
656
832
672
656
688
736
688
720
704
656
720
736
720
784
736
640
800
752
800
752
768
768
768
752
688
768
672
624
640
608
816
736
752
688
736
624
752
768
816
736
640
640
800
720
752
752
688
672
720
768
768
656
784
672
720
688
656
752
704
640
672
768
752
736
752
800
688
672
656
752
768
704
752
640
688
704
736
752
752
752
736
624
752
816
608
736
736
752
752
656
752
656
656
656
752
768
768
656
752
624
736
688
768
736
720
688
656
672
784
704
688
784
704
752
816
736
752
736
688
656
784
736
688
784
832
752
768
672
800
736
624
752
688
784
656
768
704
720
656
800
768
672
768
768
640
752
736
688
736
720
768
736
656
752
736
784
768
736
784
720
752
640
736
720
624
800
592
752
752
736
672
736
784
736
800
704
656
640
688
688
800
752
736
672
784
688
720
752
752
640
752
656
800
672
736
752
720
640
624
784
768
800
656
768
768
720
640
704
768
784
752
720
720
640
624
656
736
784
720
832
624
656
688
752
720
768
720
672
656
784
784
640
624
768
672
640
752
736
752
688
688
736
752
688
768
704
704
672
688
704
752
640
752
800
736
688
672
752
624
752
688
832
656
784
752
704
688
656
752
656
752
784
800
752
672
752
784
720
752
752
752
736
688
656
800
640
832
752
752
752
784
720
768
752
800
752
736
784
688
736
736
640
704
624
800
688
640
688
752
768
736
720
640
752
752
688
704
672
784
752
800
704
656
656
704
736
736
672
704
656
640
736
640
720
752
656
720
736
688
768
768
752
672
816
736
656
656
736
672
768
656
720
752
752
784
736
736
784
656
672
672
752
656
768
720
768
624
688
704
752
688
768
736
704
752
656
672
752
608
720
688
688
768
816
720
784
784
720
640
784
624
672
656
720
800
736
752
672
768
688
768
736
640
752
672
832
752
656
848
752
768
704
784
640
784
768
688
672
720
752
656
640
672
784
752
784
752
624
784
704
720
736
640
656
736
736
720
672
800
720
720
768
736
640
720
736
656
672
720
816
752
736
816
752
672
784
736
752
784
720
768
768
736
736
768
816
768
784
688
752
768
816
736
768
784
784
736
736
672
752
672
752
768
784
688
752
800
736
736
688
752
720
752
704
768
736
752
752
752
688
688
768
768
752
640
736
736
800
624
800
736
624
736
736
640
736
720
736
752
768
672
736
640
816
656
656
768
688
720
688
688
752
800
752
736
752
704
736
752
768
720
752
736
640
736
800
640
704
688
688
752
800
752
752
768
800
800
736
656
752
752
688
752
752
752
784
752
640
752
800
752
656
752
736
688
672
752
704
640
752
688
768
672
624
672
704
752
736
736
704
640
720
720
768
720
768
736
816
720
800
672
768
688
752
640
704
688
736
704
736
752
832
672
736
672
736
768
736
672
800
720
720
672
704
640
736
656
768
768
736
752
656
704
752
768
784
640
736
736
768
656
768
816
752
768
640
800
768
800
672
640
768
768
784
720
624
720
704
720
656
720
736
736
816
752
720
752
656
768
816
624
736
752
736
736
768
736
768
768
704
752
800
720
672
816
688
752
624
816
656
752
640
688
688
672
800
768
704
784
752
768
752
688
656
704
736
752
736
656
832
640
672
800
640
704
656
784
736
672
704
672
720
736
720
832
752
784
736
800
624
736
752
688
752
640
752
800
624
704
720
736
656
736
656
720
672
768
672
656
752
704
768
848
656
720
688
656
752
688
672
816
768
832
640
640
736
688
736
720
704
816
688
688
768
752
768
640
640
768
736
752
816
608
736
736
784
752
784
720
752
800
688
752
736
720
816
656
752
752
736
704
736
672
768
736
624
672
720
656
784
720
656
736
768
704
704
688
816
752
768
752
832
672
752
752
784
672
704
736
704
752
736
768
704
736
848
704
640
752
736
736
752
656
752
768
640
720
736
624
640
640
624
736
768
736
768
656
624
736
672
656
672
720
736
736
656
752
752
736
656
784
816
720
656
800
752
608
656
720
704
736
768
800
704
672
736
752
688
704
784
704
736
656
736
704
752
656
784
736
656
752
672
768
640
656
672
704
736
816
624
640
736
672
672
752
640
768
720
768
656
752
688
704
624
752
672
672
672
656
656
768
656
768
736
736
768
720
720
672
736
640
640
608
752
656
640
736
640
736
768
816
624
704
672
752
768
720
752
832
736
784
752
800
736
704
736
768
640
656
736
656
640
736
656
736
656
800
736
720
768
640
816
656
752
656
784
688
768
752
768
688
656
672
752
656
752
672
784
752
640
672
672
624
736
736
736
816
768
736
800
768
768
752
768
640
768
624
800
736
784
752
656
720
704
640
672
752
752
672
752
624
656
736
656
832
768
752
768
688
704
656
768
656
704
720
800
784
768
640
736
672
736
752
752
768
752
672
768
688
656
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 

Adafruit CircuitPython 6.0.0-rc.2 on 2020-11-12; Teensy 4.1 with IMXRT1062DVJ6A
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 

Adafruit CircuitPython 6.0.0-rc.2 on 2020-11-12; Teensy 4.1 with IMXRT1062DVJ6A
>>> 
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
=== print("PART 5: Creating empty dicts; displaying mem diffs")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
=== print("PART 6: Creating new ints; displaying mem diffs")
=== _=get_memdiff();#Initialize mem and prev_mem
=== int_A=1
=== print(get_memdiff())
=== int_B=2
=== print(get_memdiff())
=== int_C=3
=== print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
940512
940512
940512
PART 2: Assigning different ints to same vairable; Should stay the same
940512
940512
940512
940512
-940464
PART 3: Testing mem difference function; Should stay the same at 0
32
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
940432
940416
940400
940368
PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)
16
16
16
PART 5: Creating empty dicts; displaying mem diffs
16
16
16
PART 6: Creating new ints; displaying mem diffs
16
0
48
>>> 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 

Press any key to enter the REPL. Use CTRL-D to reload.
Adafruit CircuitPython 6.0.0-rc.2 on 2020-11-12; Teensy 4.1 with IMXRT1062DVJ6A
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
=== print("PART 5: Creating empty dicts; displaying mem diffs")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
=== print("PART 6: Creating new ints; displaying mem diffs")
=== _=get_memdiff();#Initialize mem and prev_mem
=== int_A=1
=== print(get_memdiff())
=== int_B=2
=== print(get_memdiff())
=== int_C=3
=== print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
940512
940512
940512
PART 2: Assigning different ints to same vairable; Should stay the same
940512
940512
940512
940512
-940464
PART 3: Testing mem difference function; Should stay the same at 0
32
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
940432
940416
940400
940368
PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)
16
16
16
PART 5: Creating empty dicts; displaying mem diffs
16
16
16
PART 6: Creating new ints; displaying mem diffs
16
0
48
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
=== print("PART 6: Creating new int variables; displaying mem diffs")
=== _=get_memdiff();#Initialize mem and prev_mem
=== int_A=1
=== print(get_memdiff())
=== int_B=2
=== print(get_memdiff())
=== int_C=3
=== print(get_memdiff())
=== int_D=1
=== print(get_memdiff())
=== int_E=2
=== print(get_memdiff())
=== int_F=3
=== print(get_memdiff())
=== int_G=1
=== print(get_memdiff())
=== int_H=2
=== print(get_memdiff())
=== int_I=3
=== print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
940288
940288
940288
PART 2: Assigning different ints to same vairable; Should stay the same
940288
940288
940288
940288
-940272
PART 3: Testing mem difference function; Should stay the same at 0
0
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
940272
940256
940240
940224
PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)
16
16
16
PART 6: Creating new int variables; displaying mem diffs
0
0
0
0
0
0
0
48
0
>>> e[K
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 

Press any key to enter the REPL. Use CTRL-D to reload.
Adafruit CircuitPython 6.0.0-rc.2 on 2020-11-12; Teensy 4.1 with IMXRT1062DVJ6A
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
=== print("PART 6: Creating new int variables; displaying mem diffs")
=== _=get_memdiff();#Initialize mem and prev_mem
=== int_A=23498
=== print(get_memdiff())
=== int_B=234928
=== print(get_memdiff())
=== int_C=233498
=== print(get_memdiff())
=== int_D=2113498
=== print(get_memdiff())
=== int_E=231398
=== print(get_memdiff())
=== int_F=2345198
=== print(get_memdiff())
=== int_G=2143498
=== print(get_memdiff())
=== int_H=12873
=== print(get_memdiff())
=== int_I=84281
=== print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
940464
940464
940464
PART 2: Assigning different ints to same vairable; Should stay the same
940464
940464
940464
940464
-940416
PART 3: Testing mem difference function; Should stay the same at 0
32
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
940384
940368
940352
940320
PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)
16
16
16
PART 6: Creating new int variables; displaying mem diffs
16
0
48
0
0
0
0
48
0
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
=== print("PART 6: Creating new int variables; displaying mem diffs")
=== _=get_memdiff();#Initialize mem and prev_mem
=== int_A=23498
=== print(get_memdiff())
=== int_B=234928
=== print(get_memdiff())
=== int_C=233498
=== print(get_memdiff())
=== int_D=2113498
=== print(get_memdiff())
=== int_E=231398
=== print(get_memdiff())
=== int_F=2345198
=== print(get_memdiff())
=== int_G=2143498
=== print(get_memdiff())
=== int_H=12873
=== print(get_memdiff())
=== int_I=84281
=== print(get_memdiff())
=== int_J=23498
=== print(get_memdiff())
=== int_K=234928
=== print(get_memdiff())
=== int_L=233498
=== print(get_memdiff())
=== int_M=2113498
=== print(get_memdiff())
=== int_N=231398
=== print(get_memdiff())
=== int_O=2345198
=== print(get_memdiff())
=== int_P=2143498
=== print(get_memdiff())
=== int_Q=12873
=== print(get_memdiff())
=== int_R=84281
=== print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
939312
939312
939312
PART 2: Assigning different ints to same vairable; Should stay the same
939312
939312
939312
939312
-939296
PART 3: Testing mem difference function; Should stay the same at 0
0
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
939296
939280
939264
939248
PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)
16
16
16
PART 6: Creating new int variables; displaying mem diffs
0
0
0
0
0
0
0
0
0
0
0
0
0
48
0
0
0
0
>>> 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 

Press any key to enter the REPL. Use CTRL-D to reload.
Adafruit CircuitPython 6.0.0-rc.2 on 2020-11-12; Teensy 4.1 with IMXRT1062DVJ6A
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
=== print("PART 6: Creating new int variables; displaying mem diffs")
=== _=get_memdiff();#Initialize mem and prev_mem
=== int_A=23498
=== print(get_memdiff())
=== int_B=234928
=== print(get_memdiff())
=== int_C=233498
=== print(get_memdiff())
=== int_D=2113498
=== print(get_memdiff())
=== int_E=231398
=== print(get_memdiff())
=== int_F=2345198
=== print(get_memdiff())
=== int_G=2143498
=== print(get_memdiff())
=== int_H=12873
=== print(get_memdiff())
=== int_I=84281
=== print(get_memdiff())
=== int_J=23498
=== print(get_memdiff())
=== int_K=234928
=== print(get_memdiff())
=== int_L=233498
=== print(get_memdiff())
=== int_M=2113498
=== print(get_memdiff())
=== int_N=231398
=== print(get_memdiff())
=== int_O=2345198
=== print(get_memdiff())
=== int_P=2143498
=== print(get_memdiff())
=== int_Q=12873
=== print(get_memdiff())
=== int_R=84281
=== print(get_memdiff())
=== 
PART 1: Doing nothing; Should be same
939616
939616
939616
PART 2: Assigning different ints to same vairable; Should stay the same
939616
939616
939616
939616
-939568
PART 3: Testing mem difference function; Should stay the same at 0
32
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
939536
939520
939504
939472
PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)
16
16
16
PART 6: Creating new int variables; displaying mem diffs
16
0
48
0
0
0
0
48
0
0
0
0
0
48
0
0
0
0
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
=== print("PART 6: Creating new int variables; displaying mem diffs")
=== _=get_memdiff();#Initialize mem and prev_mem
=== int_A=23498
=== print(get_memdiff())
=== int_B=234928
=== print(get_memdiff())
=== int_C=233498
=== print(get_memdiff())
=== int_D=2113498
=== print(get_memdiff())
=== int_E=231398
=== print(get_memdiff())
=== int_F=2345198
=== print(get_memdiff())
=== int_G=2143498
=== print(get_memdiff())
=== int_H=12873
=== print(get_memdiff())
=== int_I=84281
=== print(get_memdiff())
=== int_J=23498
=== print(get_memdiff())
=== int_K=234928
=== print(get_memdiff())
=== int_L=233498
=== print(get_memdiff())
=== int_M=2113498
=== print(get_memdiff())
=== int_N=231398
=== print(get_memdiff())
=== int_O=2345198
=== print(get_memdiff())
=== int_P=2143498
=== print(get_memdiff())
=== int_Q=12873
=== print(get_memdiff())
=== int_R=84281
=== print(get_memdiff())
=== 
=== print("PART 5: Creating dicts with four bytes as keys and None as values; diaplaying mem diffs")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== b={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== c={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== 
=== 
PART 1: Doing nothing; Should be same
938240
938240
938240
PART 2: Assigning different ints to same vairable; Should stay the same
938240
938240
938240
938240
-938224
PART 3: Testing mem difference function; Should stay the same at 0
0
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
938224
938208
938192
938176
PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)
16
16
16
PART 6: Creating new int variables; displaying mem diffs
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
PART 5: Creating dicts with four bytes as keys and None as values; diaplaying mem diffs
48
48
48
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 
=== 
>>> 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 

Press any key to enter the REPL. Use CTRL-D to reload.
Adafruit CircuitPython 6.0.0-rc.2 on 2020-11-12; Teensy 4.1 with IMXRT1062DVJ6A
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
=== print("PART 6: Creating new int variables; displaying mem diffs")
=== _=get_memdiff();#Initialize mem and prev_mem
=== int_A=23498
=== print(get_memdiff())
=== int_B=234928
=== print(get_memdiff())
=== int_C=233498
=== print(get_memdiff())
=== int_D=2113498
=== print(get_memdiff())
=== int_E=231398
=== print(get_memdiff())
=== int_F=2345198
=== print(get_memdiff())
=== int_G=2143498
=== print(get_memdiff())
=== int_H=12873
=== print(get_memdiff())
=== int_I=84281
=== print(get_memdiff())
=== int_J=23498
=== print(get_memdiff())
=== int_K=234928
=== print(get_memdiff())
=== int_L=233498
=== print(get_memdiff())
=== int_M=2113498
=== print(get_memdiff())
=== int_N=231398
=== print(get_memdiff())
=== int_O=2345198
=== print(get_memdiff())
=== int_P=2143498
=== print(get_memdiff())
=== int_Q=12873
=== print(get_memdiff())
=== int_R=84281
=== print(get_memdiff())
=== 
=== print("PART 5: Creating dicts with four bytes as keys and None as values; diaplaying mem diffs")
=== _=get_memdiff();#Initialize mem and prev_mem
=== bd_a={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== bd_b={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== bd_c={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== 
=== 
=== print("PART 5: Creating length-4 bytes and length-4 tuples")
=== _=get_memdiff();#Initialize mem and prev_mem
=== bt_a=b'abcd',(None,None,None,None)
=== print(get_memdiff())
=== bt_b=b'abcd',(None,None,None,None)
=== print(get_memdiff())
=== bt_c={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== 
=== 
PART 1: Doing nothing; Should be same
937872
937872
937872
PART 2: Assigning different ints to same vairable; Should stay the same
937872
937872
937872
937872
-937824
PART 3: Testing mem difference function; Should stay the same at 0
32
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
937792
937776
937760
937728
PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)
16
16
16
PART 6: Creating new int variables; displaying mem diffs
16
0
48
0
0
0
0
48
0
0
0
0
0
48
0
0
0
0
PART 5: Creating dicts with four bytes as keys and None as values; diaplaying mem diffs
48
112
48
PART 5: Creating length-4 bytes and length-4 tuples
48
48
48
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== [D
>>> 
>>> 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 

Press any key to enter the REPL. Use CTRL-D to reload.
Adafruit CircuitPython 6.0.0-rc.2 on 2020-11-12; Teensy 4.1 with IMXRT1062DVJ6A
>>> 
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== vimport gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
=== print("PART 6: Creating new int variables; displaying mem diffs")
=== _=get_memdiff();#Initialize mem and prev_mem
=== int_A=23498
=== print(get_memdiff())
=== int_B=234928
=== print(get_memdiff())
=== int_C=233498
=== print(get_memdiff())
=== int_D=2113498
=== print(get_memdiff())
=== int_E=231398
=== print(get_memdiff())
=== int_F=2345198
=== print(get_memdiff())
=== int_G=2143498
=== print(get_memdiff())
=== int_H=12873
=== print(get_memdiff())
=== int_I=84281
=== print(get_memdiff())
=== int_J=23498
=== print(get_memdiff())
=== int_K=234928
=== print(get_memdiff())
=== int_L=233498
=== print(get_memdiff())
=== int_M=2113498
=== print(get_memdiff())
=== int_N=231398
=== print(get_memdiff())
=== int_O=2345198
=== print(get_memdiff())
=== int_P=2143498
=== print(get_memdiff())
=== int_Q=12873
=== print(get_memdiff())
=== int_R=84281
=== print(get_memdiff())
=== 
=== print("PART 5: Creating dicts with four bytes as keys and None as values; diaplaying mem diffs")
=== _=get_memdiff();#Initialize mem and prev_mem
=== bd_a={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== bd_b={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== bd_c={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== bd_d={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== bd_e={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== bd_f={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== 
=== 
=== print("PART 5: Creating length-4 bytes and length-4 tuples")
=== _=get_memdiff();#Initialize mem and prev_mem
=== bt_a=b'abcd',(None,None,None,None)
=== print(get_memdiff())
=== bt_b=b'abcd',(None,None,None,None)
=== print(get_memdiff())
=== bt_c={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== bt_d=b'abcd',(None,None,None,None)
=== print(get_memdiff())
=== bt_e=b'abcd',(None,None,None,None)
=== print(get_memdiff())
=== bt_f={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== 
=== 
Traceback (most recent call last):
  File "<stdin>", line 1
SyntaxError: invalid syntax
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== 
=== 
=== 
=== 
>>> 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 

Press any key to enter the REPL. Use CTRL-D to reload.
Adafruit CircuitPython 6.0.0-rc.2 on 2020-11-12; Teensy 4.1 with IMXRT1062DVJ6A
>>> 
paste mode; Ctrl-C to cancel, Ctrl-D to finish
=== import gc
=== 
=== 
=== #If nothing happens, all three of these should print the same value
=== print("PART 1: Doing nothing; Should be same")
=== print(gc.mem_free())
=== print(gc.mem_free())
=== print(gc.mem_free())
=== 
=== print("PART 2: Assigning different ints to same vairable; Should stay the same")
=== a=10
=== print(gc.mem_free())
=== a=10
=== print(gc.mem_free())
=== a=11
=== print(gc.mem_free())
=== a=1999
=== print(gc.mem_free())
=== 
=== mem=prev_mem=0
=== def get_memdiff():
=== 	global prev_mem,mem
=== 	prev_mem=mem
=== 	mem=gc.mem_free()
=== 	return prev_mem-mem
=== get_memdiff()#Initialize mem and prev_mem
=== 
=== print("PART 3: Testing mem difference function; Should stay the same at 0")
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== print(get_memdiff())
=== 
=== print("PART 4: Creating empty dicts; Should decrease linearly")
=== print(gc.mem_free())
=== a={}
=== print(gc.mem_free())
=== b={}
=== print(gc.mem_free())
=== c={}
=== print(gc.mem_free())
=== 
=== print("PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)")
=== _=get_memdiff();#Initialize mem and prev_mem
=== a={}
=== print(get_memdiff())
=== b={}
=== print(get_memdiff())
=== c={}
=== print(get_memdiff())
=== 
=== print("PART 6: Creating new int variables; displaying mem diffs")
=== _=get_memdiff();#Initialize mem and prev_mem
=== int_A=23498
=== print(get_memdiff())
=== int_B=234928
=== print(get_memdiff())
=== int_C=233498
=== print(get_memdiff())
=== int_D=2113498
=== print(get_memdiff())
=== int_E=231398
=== print(get_memdiff())
=== int_F=2345198
=== print(get_memdiff())
=== int_G=2143498
=== print(get_memdiff())
=== int_H=12873
=== print(get_memdiff())
=== int_I=84281
=== print(get_memdiff())
=== int_J=23498
=== print(get_memdiff())
=== int_K=234928
=== print(get_memdiff())
=== int_L=233498
=== print(get_memdiff())
=== int_M=2113498
=== print(get_memdiff())
=== int_N=231398
=== print(get_memdiff())
=== int_O=2345198
=== print(get_memdiff())
=== int_P=2143498
=== print(get_memdiff())
=== int_Q=12873
=== print(get_memdiff())
=== int_R=84281
=== print(get_memdiff())
=== 
=== print("PART 5: Creating dicts with four bytes as keys and None as values; diaplaying mem diffs")
=== _=get_memdiff();#Initialize mem and prev_mem
=== bd_a={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== bd_b={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== bd_c={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== bd_d={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== bd_e={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== bd_f={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== 
=== 
=== print("PART 5: Creating length-4 bytes and length-4 tuples")
=== _=get_memdiff();#Initialize mem and prev_mem
=== bt_a=b'abcd',(None,None,None,None)
=== print(get_memdiff())
=== bt_b=b'abcd',(None,None,None,None)
=== print(get_memdiff())
=== bt_c={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== bt_d=b'abcd',(None,None,None,None)
=== print(get_memdiff())
=== bt_e=b'abcd',(None,None,None,None)
=== print(get_memdiff())
=== bt_f={b'a':None,b'b':None,b'c':None,b'd':None}
=== print(get_memdiff())
=== 
=== 
PART 1: Doing nothing; Should be same
936480
936480
936480
PART 2: Assigning different ints to same vairable; Should stay the same
936480
936480
936480
936480
-936432
PART 3: Testing mem difference function; Should stay the same at 0
32
0
0
0
PART 4: Creating empty dicts; Should decrease linearly
936400
936384
936368
936336
PART 5: Creating empty dicts; Displaying mem diffs (CircuitPython measured 16 bytes per empty dict)
16
16
16
PART 6: Creating new int variables; displaying mem diffs
16
0
48
0
0
0
0
48
0
0
0
0
0
48
0
0
0
0
PART 5: Creating dicts with four bytes as keys and None as values; diaplaying mem diffs
48
112
48
48
48
48
PART 5: Creating length-4 bytes and length-4 tuples
48
48
48
128
48
48
>>> import collections
>>> collections.OrderedDict
<class 'OrderedDict'>
>>> import ulab
>>> ulab.
approx          arange          array           compare
eye             fft             filter          float
get_printoptions                int16           int8
linalg          linspace        numerical       ones
poly            set_printoptions                uint16
uint8           user            vector          zeros
>>> ulab.compare.
clip            equal           maximum         minimum
not_equal
>>> ulab.compare.[K[K[K[K[K[K[K[K
approx          arange          array           compare
eye             fft             filter          float
get_printoptions                int16           int8
linalg          linspace        numerical       ones
poly            set_printoptions                uint16
uint8           user            vector          zeros
>>> ulab.ar
arange          array
>>> ulab.array.
flatten         itemsize        reshape         shape
size            sort            transpose
>>> ulab.array.sort
<function>
>>> [1][-10:]
[1]
>>> from statistics import median
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: no module named 'statistics'
>>> 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 17, in <module>
AssertionError: 

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 237, in <module>
  File "code.py", line 189, in __init__
TypeError: unsupported types for __gt__: 'function', 'int'

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 237, in <module>
  File "code.py", line 189, in __init__
TypeError: unsupported types for __gt__: 'function', 'int'

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 237, in <module>
  File "code.py", line 189, in __init__
TypeError: unsupported types for __gt__: 'function', 'int'

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 237, in <module>
  File "code.py", line 189, in __init__
TypeError: unsupported types for __gt__: 'function', 'int'

Press any key to enter the REPL. Use CTRL-D to reload.Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.

Press any key to enter the REPL. Use CTRL-D to reload.
Adafruit CircuitPython 6.0.0-rc.2 on 2020-11-12; Teensy 4.1 with IMXRT1062DVJ6A
>>> 
>>> 
>>> 
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 238, in <module>
  File "code.py", line 222, in __call__
AttributeError: 'MovingMedian' object has no attribute 'length'

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 238, in <module>
  File "code.py", line 222, in __call__
AttributeError: 'MovingMedian' object has no attribute 'length'

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
Traceback (most recent call last):
  File "code.py", line 238, in <module>
  File "code.py", line 222, in __call__
AttributeError: 'MovingMedian' object has no attribute 'length'

Press any key to enter the REPL. Use CTRL-D to reload.soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
752
736
728
720
720
704
704
704
704
704
704
704
704
704
704
704
704
704
704
704
704
704
704
704
704
704
704
704
704
704
704
704
704
704
704
704
704
720
720
720
720
720
720
720
720
720
720
720
720
720
728
736
736
736
736
736
736
736
736
736
736
752
752
784
44832
44856
44872
44896
44896
44912
44928
44928
44944
44960
50976
51000
51048
51080
51096
51112
51152
51152
51176
51200
51216
51232
51248
51248
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
55696
55672
55712
55720
55712
55712
55712
55712
55712
55696
55696
55696
55680
55680
55680
55680
55664
55664
55664
55664
55648
55648
55648
55648
55632
55632
55632
55632
55632
55632
55632
55632
55632
55632
55632
55632
55632
55632
55632
55632
55632
55632
55640
55648
55648
55648
55648
55648
55656
55664
55664
55664
55664
55664
55664
55664
55664
55664
55680
55680
55680
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
52600
52544
52528
52496
52464
52432
52408
52368
52320
52272
52256
52232
52208
52096
52048
52016
51936
51896
51864
51816
51768
51696
51624
51560
51480
51392
51344
51256
51176
51112
51000
50968
50880
50848
50848
50848
50848
50848
50864
50880
50888
50904
50920
50952
50976
51016
51064
51128
51160
51200
51240
51280
51344
51384
51432
51384
51344
51296
51272
51232
51176
51144
51112
51056
51008
50976
50960
50928
50912
50896
50880
50864
50848
50848
50832
50824
50816
50816
50816
50824
50832
50848
50848
50864
50880
50896
50912
50928
50960
50976
51000
51032
51080
51136
51168
51200
51240
51280
51312
51360
51360
51360
51360
51360
51360
51360
51360
51360
51360
51360
51360
51360
51360
51512
51752
51904
52120
52304
52504
52656
52896
53160
53344
53344
53344
53344
53344
53344
53344
53344
53344
53360
53392
53440
53456
53472
53488
53512
53520
53520
53536
53544
53552
53576
53600
53600
53600
53600
53600
53600
53600
53648
53808
54024
54224
54472
54648
54872
54984
55200
55392
55584
55824
56016
56216
56376
56496
56672
56704
56720
56720
56720
56720
56720
56720
56720
56720
56720
56720
56720
56720
56720
56720
56712
56688
56672
56544
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
55496
55504
55504
55504
55504
55504
55504
55488
55488
55488
55488
55472
55440
55440
55440
55424
55424
55424
55424
55424
55408
55408
55408
55408
55392
55392
55392
55392
55392
55376
55376
55360
55360
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
54512
54400
54456
54416
54392
54384
54336
54240
54256
54248
54184
54104
44928
45816
44928
44856
44928
44864
44936
44864
44928
44936
44944
44944
44936
44928
44928
44928
44936
44904
44880
44952
44904
44904
44936
44928
44944
44944
52896
53568
53648
53632
53616
53616
53592
53576
53584
53552
53568
53552
53536
53520
53424
53504
53432
53472
53472
53456
53440
53392
53432
53408
53376
53408
53408
53392
53360
53352
53392
53368
53392
53312
53384
53368
53312
53384
53344
53328
53416
53408
53384
53424
53440
53376
53456
53464
53424
53472
53472
53488
53480
53432
53520
53504
53496
53528
53456
53456
53552
53552
53472
53552
53568
53552
53480
53568
53568
53584
53504
53504
53568
53584
53544
53584
53600
53600
53520
53592
53600
53600
53536
53608
53576
53624
53584
53624
53616
53552
53616
53624
53616
53648
53640
53632
53648
53592
53608
53608
53608
53648
53656
53648
53600
53656
53656
53664
53664
53664
53592
53672
53656
53672
53672
53640
53640
53672
53648
53608
53608
53624
53680
53688
53680
53648
53616
53680
53680
53648
53688
53680
53680
53672
53608
53640
53664
53672
53680
53672
53664
53680
53680
53680
53688
53696
53656
53688
53664
53712
53672
53680
53728
53720
53720
53728
53656
53736
53744
53760
53712
53760
53752
53760
53760
53760
54096
54104
54136
54104
54168
54176
54200
54208
54240
54264
54272
54248
54256
54344
54320
54352
54416
54448
54456
54520
54536
54576
54528
54624
54656
54688
54704
54720
54760
54744
54800
54824
54792
54880
54896
54880
54928
54936
55000
54984
55056
55072
55088
55112
55136
55128
55104
55176
55216
55168
55216
55280
55296
55304
55312
55288
55352
55360
55344
55336
55408
55424
55440
55448
55440
55456
55392
55472
55480
55488
55488
55464
55408
55488
55440
55488
55424
55496
55504
55440
55488
55424
55520
55464
55504
55536
55496
55536
55544
55568
55552
55472
55544
55544
55480
55552
55504
55544
55504
55488
55464
55392
55408
55424
55352
55400
55392
55376
55304
55216
55240
55232
55216
55184
55088
55112
55064
55040
54992
54912
54888
54848
54808
54784
54712
54672
54624
54616
54624
54552
54472
54432
54456
54416
54328
54336
54320
54280
54240
54200
54120
54120
53992
53976
53992
53952
53920
53872
53824
53776
53776
53728
53664
53616
53504
53528
53472
53416
53384
53344
53272
53200
53200
53104
53096
53056
52992
52976
52912
52864
52832
52688
52728
52672
52608
52584
52544
52488
52432
52312
52336
52248
52240
52136
52120
52080
52040
51968
51872
51888
51848
51744
51752
51696
51664
51600
51568
51512
51480
51440
51328
51328
51248
soft reboot

Auto-reload is on. Simply save files over USB to run them or enter REPL to disable.
code.py output:
49832
49840
49808
49872
49864
49856
49872
49872
49880
49816
49848
49848
49856
49864
49912
49904
49912
49880
49880
49888
49936
49936
49856
49944
49952
49952
49928
49872
49904
49872
49968
49960
49960
49968
49968
49976
49984
49984
49976
49992
50000
49960
50008
50016
49968
50000
50016
49968
49984
49952
50032
49984
50032
50008
49968
50048
50048
50064
50024
50072
50064
49992
50064
50064
50072
50072
50000
50080
50040
50056
50096
50080
50088
50024
50096
50088
50056
50096
50080
50096
50016
50072
50096
50104
50112
50032
50040
50112
50128
50112
50128
50088
50048
50128
50128
50128
50064
50128
50096
50048
50064
50144
50064
50096
50144
50136
50104
50144
50096
50152
50144
50128
50080
50136
50144
50144
50144
50136
50112
50136
50064
50112
50064
50144
50144
50160
50072
50144
50064
50112
50160
50104
50064
50160
50128
50160
50136
50144
50144
50152
50136
50120
50144
50064
50064
50144
50112
50144
50144
50112
50104
50072
50144
50136
50144
50112
50064
50064
50152
50080
50144
50152
50144
50064
50144
50160
50112
50152
50152
50080
50152
50072
50120
50152
50144
50080
50152
50080
50152
50160
50104
50152
50168
50064
50104
50104
50144
50064
50152
50152
50144
50080
50120
50136
50152
50064
50160
50112
50080
50160
50144
50160
50152
50080
50104
50152
50080
50160
50160
50160
50152
50160
50080
50160
50120
50160
50168
50168
50160
50176
50096
50168
50136
50176
50144
50144
50176
50184
50184
50176
50176
50176
50144
50112
50192
50192
50120
50112
50216
50128
50208
50128
50200
50136
50224
50224
50240
50224
50224
50240
50224
50200
50240
50224
50240
50240
50248
50240
50216
50184
50240
50208
50256
50184
50264
50264
50264
50224
50224
50192
50272
50272
50288
50248
50288
50224
50312
50304
50240
50264
50256
50328
50256
50304
50352
50344
50368
50368
50392
50368
50392
50408
50408
50432
50432
50440
50464
50480
50408
50504
50512
50520
50544
50496
50560
50576
50616
50576
50568
50568
50640
50688
50720
50720
50728
50752
50752
50744
50752
50736
50848
50848
50800
50880
50912
50928
50896
50872
50968
50992
51016
50944
51000
50992
51024
51080
51104
51064
51152
51160
51184
51216
51232
51248
51208
51232
51336
51280
51360
51368
51328
51440
51456
51472
51496
51456
51536
51520
51584
51608
51592
51656
51672
51704
51712
51736
51760
51792
51808
51808
51896
51920
51920
51888
51920
51984
52072
52040
52088
52104
52176
52192
52256
52200
52320
52344
52304
52392
52400
52448
52408
52512
52544
52544
52608
52624
52656
52672
52688
52728
52768
52800
52832
52848
52824
52896
52912
52984
53024
53040
53056
53136
53168
53192
53216
53232
53264
53288
53296
53336
53360
53320
53416
53408
53472
53424
53536
53504
53528
53576
53616
53624
53656
53712
53752
53768
53792
53728
53816
53840
53832
53880
53896
53960
53984
54016
54008
54032
54056
53984
54080
54064
54112
54088
54120
54128
54160
54176
54160
54208
54208
54152
54232
54256
54256
54240
54280
54288
54296
54208
54304
54296
54280
54304
54312
54320
54272
54296
54336
54336
54360
54352
54344
54352
54352
54328
54360
54312
54304
54384
54312
54352
54400
54400
54328
54360
54400
54392
54400
54392
54336
54384
54400
54336
54336
54392
54368
54328
54336
54416
54408
54432
54400
54384
54368
54432
54440
54440
54432
54448
54416
54384
54448
54448
54448
54448
54384
54448
54400
54440
54440
54440
54440
54432
54456
54448
54440
54440
54392
54432
54448
54352
54408
54448
54432
54448
54416
54352
54432
54368
54352
54416
54432
54392
54408
54384
54400
54376
54408
54344
54400
54392
54368
54368
54392
54320
54392
54360
54400
54400
54392
54360
54352
54384
54400
54384
54392
54384
54392
54384
54384
54384
54304
54328
54320
54344
54368
54304
54368
54296
54328
54344
54360
54360
54304
54368
54368
54296
54328
54360
54352
54320
54336
54320
54352
54336
54288
54312
54360
54352
54312
54304
54352
54352
54344
54272
54360
54344
54336
54336
54256
54344
54272
54296
54336
54344
54336
54336
54296
54312
54320
54240
54312
54280
54320
54320
54328
54248
54320
54320
54320
54272
54256
54320
54312
54280
54320
54304
54320
54256
54312
54288
54256
54264
54304
54240
54304
54208
54304
54296
54288
54272
54256
54288
54272
54208
54288
54304
54208
54296
54280
54224
54248
54248
54288
54304
54304
54288
54288
54248
54296
54288
54248
54256
54272
54280
54248
54256
54248
54304
54256
54296
54208
54296
54216
54248
54280
54216
54296
54304
54288
54296
54304
54296
54288
54240
54224
54224
54320
54248
54216
54288
54304
54304
54304
54296
54224
54312
54304
54288
54304
54256
54304
54304
54224
54320
54312
54264
54264
54232
54312
54288
54312
54240
54240
54320
54320
54320
54320
54256
54320
54320
54320
54240
54264
54320
54320
54336
54328
54248
54248
54328
54320
54328
54328
54288
54336
54336
54320
54272
54336
54280
54328
54336
54336
54248
54336
54296
54336
54336
54328
54296
54336
54344
54256
54264
54304
54336
54264
54296
54344
54272
54344
54344
54336
54312
54336
54264
54256
54336
54352
54312
54264
54352
54352
54352
54344
54344
54304
54352
54360
54368
54360
54296
54272
54368
54360
54368
54376
54328
54368
54376
54304
54360
54384
54336
54336
54368
54336
54344
54344
54376
54360
54376
54392
54376
54376
54376
54360
54344
54384
54312
54384
54360
54400
54400
54328
54392
54384
54384
54392
54360
54400
54400
54312
54320
54328
54392
54400
54400
54328
54392
54392
54384
54400
54360
54400
54312
54408
54368
54384
54352
54384
54392
54384
54400
54360
54392
54400
54360
54408
54416
54392
54360
54360
54384
54400
54400
54400
54384
54328
54368
54328
54416
54376
54360
54400
54328
54400
54368
54360
54328
54384
54400
54392
54320
54320
54392
54392
54376
54384
54400
54344
54336
54400
54312
54360
54400
54360
54400
54328
54408
54352
54392
54360
54392
54368
54360
54400
54392
54328
54368
54400
54384
54400
54400
54400
54400
54400
54400
54368
54344
54304
54400
54392
54400
54360
54408
54400
54384
54392
54400
54320
54400
54352
54392
54360
54400
54400
54392
54400
54392
54400
54392
54328
54392
54400
54352
54392
54400
54312
54400
54312
54336
54352
54384
54392
54352
54304
54392
54344
54344
54376
54360
54320
54320
54400
54304
54360
54352
54320
54384
54400
54328
54384
54400
54360
54392
54352
54320
54376
54336
54320
54384
54400
54328
54328
54400
54400
54320
54392
54400
54392
54352
54328
54320
54384
54400
54392
54400
54384
54368
54376
54328
54384
54392
54360
54416
54384
54320
54392
54400
54328
54360
54360
54360
54400
54376
54320
54400
54320
54408
54392
54336
54320
54328
54400
54408
54400
54352
54320
54400
54400
54400
54320
54400
54312
54400
54400
54408
54360
54400
54400
54392
54416
54384
54408
54400
54368
54400
54392
54400
54408
54400
54336
54400
54400
54400
54400
54320
54400
54408
54392
54408
54360
54360
54360
54400
54368
54336
54408
54400
54328
54336
54328
54400
54416
54400
54400
54408
54400
54400
54416
54408
54384
54392
54408
54416
54360
54416
54400
54408
54416
54400
54328
54416
54400
54328
54400
54408
54408
54416
54368
54376
54376
54336
54416
54400
54344
54408
54408
54408
54336
54408
54344
54376
54376
54408
54416
54408
54408
54376
54424
54344
54416
54416
54408
54416
54432
54416
54416
54416
54416
54424
54416
54424
54392
54424
54376
54376
54416
54416
54344
54424
54424
54432
54376
54440
54352
54400
54400
54432
54408
54368
54448
54408
54368
54384
54432
54440
54440
54392
54448
54448
54448
54448
54448
54448
54416
54408
54448
54400
54368
54448
54440
54448
54440
54440
54408
54376
54448
54384
54464
54448
54456
54464
54448
54448
54448
54464
54384
54448
54464
54448
54464
54464
54464
54392
54464
54464
54384
54464
54448
54464
54464
54464
54416
54480
54472
54464
54432
54480
54400
54464
54472
54432
54480
54408
54432
54480
54400
54480
54472
54480
54480
54480
54440
54408
54480
54448
54472
54496
54440
54472
54472
54392
54480
54496
54424
54432
54480
54400
54464
54480
54408
54432
54488
54416
54440
54416
54480
54496
54480
54440
54432
54464
54480
54480
54448
54488
54480
54400
54472
54488
54408
54456
54480
54480
54496
54480
54456
54448
54488
54496
54488
54496
54456
54496
54488
54488
54456
54488
54496
54496
54480
54416
54488
54400
54496
54424
54456
54496
54448
54464
54416
54416
54416
54408
54488
54496
54504
54512
54488
54496
54480
54416
54456
54448
54488
54488
54472
54488
54456
54480
54480
54496
54496
54472
54448
54496
54488
54480
54456
54480
54488
54496
54488
54416
54480
54488
54464
54496
54416
54416
54416
54416
54488
54488
54480
54472
54480
54480
54488
54480
54416
54400
54480
54480
54416
54408
54488
54496
54408
54496
54480
54480
54480
54496
54440
54416
54464
54480
54488
54472
54496
54464
54496
54480
54472
54480
54472
54456
54400
54400
54464
54416
54496
54464
54496
54504
54480
54456
54480
54496
54488
54472
54448
54456
54408
54456
54408
54440
54472
54440
54440
54480
54480
54448
54480
54496
54424
54392
54392
54432
54424
54464
54456
54464
54440
54456
54464
54384
54440
54456
54464
54424
54384
54432
54464
54392
54432
54424
54464
54464
54424
54464
54440
54448
54424
54408
54456
54424
54392
54464
54400
54464
54464
54464
54464
54416
54464
54456
54400
54416
54408
54480
54392
54456
54384
54472
54456
54464
54456
54464
54464
54416
54480
54472
54392
54440
54464
54424
54392
54480
54456
54456
54464
54464
54440
54472
54424
54464
54464
54464
54448
54464
54392
54480
54464
54384
54464
54432
54424
54440
54464
54392
54456
54416
54472
54448
54464
54392
54464
54456
54440
54464
54464
54472
54464
54472
54464
54440
54432
54464
54416
54480
54472
54392
54472
54480
54432
54400
54440
54440
54440
54400
54472
54464
54480
54448
54424
54480
54480
54472
54424
54408
54472
54480
54480
54432
54488
54432
54488
54480
54480
54472
54464
54480
54416
54440
54400
54480
54480
54480
54456
54472
54400
54472
54496
54448
54480
54432
54472
54480
54464
54480
54488
54448
54472
54472
54456
54496
54496
54464
54488
54496
54488
54448
54488
54480
54496
54488
54408
54440
54432
54448
54488
54496
54408
54480
54464
54440
54464
54488
54440
54440
54488
54504
54432
54432
54416
54488
54480
54496
54488
54480
54400
54480
54496
54440
54448
54480
54464
54472
54480
54400
54488
54472
54440
54488
54496
54432
54472
54432
54440
54464
54464
54416
54480
54440
54496
54480
54480
54448
54472
54440
54440
54400
54472
54472
54480
54464
54472
54408
54416
54448
54480
54472
54456
54480
54464
54400
54408
54472
54480
54464
54480
54464
54464
54400
54472
54480
54480
54400
54408
54472
54464
54464
54424
54472
54400
54432
54464
54400
54408
54472
54472
54464
54480
54464
54448
54472
54464
54456
54472
54496
54472
54416
54480
54480
54480
54400
54440
54432
54488
54416
54440
54496
54480
54472
54480
54472
54488
54456
54496
54472
54480
54408
54480
54488
54464
54416
54448
54472
54456
54496
54480
54448
54472
54496
54504
54464
54448
54472
54432
54488
54464
54504
54512
54432
54432
54488
54480
54440
54440
54512
54480
54480
54512
54528
54448
54512
54440
54488
54432
54528
54448
54456
54520
54520
54440
54512
54448
54504
54456
54464
54520
54544
54480
54504
54528
54512
54464
54528
54544
54456
54456
54504
54520
54536
54496
54528
54536
54496
54520
54480
54488
54528
54520
54512
54536
54504
54544
54448
54488
54488
54456
54528
54520
54544
54488
54536
54456
54496
54544
54488
54544
54536
54504
54488
54512
54496
54464
54488
54504
54496
54464
54552
54504
54544
54512
54528
54528
54544
54480
54488
54544
54560
54496
54528
54496
54536
54544
54552
54520
54472
54512
54544
54544
54544
54456
54504
54544
54544
54488
54536
54544
54544
54496
54560
54536
54536
54496
54464
54464
54504
54544
54536
54544
54544
54536
54496
54512
54544
54504
54536
54528
54456
54528
54512
54464
54544
54544
54528
54504
54528
54480
54464
54528
54552
54496
54544
54544
54544
54488
54544
54528
54544
54552
54536
54496
54544
54504
54536
54496
54504
54504
54552
54552
54512
54504
54504
54456
54464
54528
54536
54520
54544
54544
54544
54464
54544
54544
54456
54496
54512
54520
54488
54552
54536
54544
54544
54544
54544
54536
54544
54528
54544
54536
54536
54488
54528
54536
54544
54536
54544
54528
54464
54544
54488
54496
54528
54536
54472
54536
54544
54536
54488
54496
54536
54528
54528
54528
54528
54528
54520
54512
54512
54520
54528
54480
54448
54544
54496
54528
54488
54448
54520
54520
54528
54528
54520
54528
54512
54488
54520
54480
54528
54480
54512
54528
54528
54528
54496
54528
54480
54448
54432
54448
54520
54456
54480
54512
54520
54528
54472
54512
54520
54472
54520
54528
54536
54504
54528
54512
54520
54528
54464
54528
54528
54488
54504
54440
54504
54512
54512
54528
54472
54440
54496
54528
54536
54488
54528
54520
54480
54520
54528
54464
54480
54520
54520
54520
54472
54528
54512
54520
54520
54472
54432
54448
54536
54536
54464
54448
54520
54456
54520
54520
54528
54488
54440
54456
54512
54520
54520
54520
54448
54528
54520
54472
54464
54464
54536
54520
54448
54512
54480
54488
54504
54464
54528
54528
54488
54520
54456
54432
54544
54480
54528
54480
54536
54528
54536
54528
54456
54528
54528
54488
54496
54488
54528
54528
54448
54512
54464
54456
54456
54520
54488
54520
54488
54544
54536
54464
54488
54456
54544
54496
54456
54544
54464
54464
54472
54528
54544
54464
54544
54536
54512
54512
54544
54472
54536
54536
54544
54504
54544
54504
54536
54544
54472
54464
54544
54560
54528
54520
54464
54552
54456
54536
54472
54512
54544
54504
54544
54480
54496
54496
54544
54552
54528
54464
54544
54472
54544
54528
54528
54544
54480
54472
54520
54472
54496
54528
54504
54480
54512
54544
54456
54544
54552
54520
54464
54504
54560
54552
54552
54512
54488
54528
54448
54528
54544
54544
54544
54552
54544
54504
54552
54544
54560
54496
54536
54560
54560
54544
54536
54464
54560
54552
54552
54544
54560
54512
54544
54528
54552
54472
54536
54496
54560
54480
54512
54544
54544
54536
54496
54456
54504
54512
54544
54544
54536
54536
54528
54472
54552
54512
54464
54544
54552
54472
54560
54552
54528
54544
54496
54544
54560
54472
54560
54544
54552
54496
54456
54560
54544
54536
54528
54504
54536
54544
54480
54520
54560
54560
54552
54480
54512
54544
54464
54544
54480
54520
54528
54560
54568
54520
54568
54512
54560
54480
54560
54568
54560
54512
54488
54576
54520
54560
54560
54552
54552
54560
54520
54480
54480
54552
54560
54576
54576
54560
54576
54560
54512
54528
54528
54504
54496
54576
54512
54576
54568
54480
54568
54536
54560
54560
54528
54560
54568
54576
54576
54560
54496
54576
54584
54496
54504
54520
54496
54576
54592
54544
54576
54536
54584
54584
54592
54544
54552
54552
54520
54584
54576
54520
54584
54600
54560
54592
54592
54560
54592
54528
54592
54608
54512
54584
54592
54496
54520
54592
54544
54608
54552
54552
54592
54552
54576
54592
54592
54584
54600
54552
54592
54512
54576
54568
54576
54592
54584
54568
54512
54576
54568
54544
54520
54504
54584
54536
54576
54584
54584
54576
54512
54488
54480
54576
54520
54568
54560
54488
54536
54560
54560
54568
54576
54536
54552
54560
54568
54560
54576
54584
54496
54576
54576
54568
54568
54552
54560
54592
54544
54568
54528
54488
54576
54504
54512
54576
54568
54544
54544
54560
54528
54512
54568
54576
54504
54576
54544
54576
54496
54536
54576
54552
54576
54576
54576
54528
54536
54576
54576
54488
54496
54576
54560
54584
54536
54560
54528
54480
54576
54584
54552
54568
54560
54560
54568
54536
54480
54584
54576
54568
54576
54576
54568
54576
54552
54576
54568
54576
54528
54512
54576
54536
54496
54560
54560
54576
54512
54488
54528
54488
54576
54576
54568
54536
54568
54496
54488
54528
54528
54576
54568
54496
54536
54496
54568
54576
54568
54576
54536
54568
54560
54576
54552
54576
54576
54536
54576
54560
54560
54576
54512
54568
54568
54568
54592
54592
54504
54568
54536
54496
54576
54568
54568
54568
54560
54544
54584
54576
54544
54568
54584
54480
54568
54544
54536
54512
54504
54512
54568
54536
54560
54560
54560
54536
54568
54528
54576
54592
54576
54496
54576
54568
54584
54560
54536
54576
54552
54496
54568
54560
54560
54536
54544
54504
54576
54512
54568
54584
54528
54496
54560
54544
54568
54568
54576
54544
54560
54576
54560
54512
54528
54568
54576
54544
54568
54568
54568
54528
54560
54568
54568
54536
54560
54520
54536
54536
54568
54544
54560
54560
54568
54560
54488
54488
54552
54576
54560
54520
54496
54496
54480
54552
54528
54560
54520
54464
54464
54560
54488
54568
54560
54576
54560
54480
54528
54576
54536
54560
54528
54560
54552
54480
54552
54552
54496
54544
54544
54568
54480
54560
54480
54568
54504
54576
54576
54576
54480
54480
54464
54568
54552
54464
54568
54568
54560
54552
54560
54488
54576
54560
54512
54544
54528
54560
54536
54512
54472
54560
54560
54560
54560
54560
54560
54480
54560
54488
54512
54544
54544
54560
54560
54512
54560
54496
54560
54464
54512
54472
54560
54544
54536
54552
54552
54504
54512
54472
54552
54472
54512
54544
54552
54560
54568
54560
54536
54544
54552
54568
54568
54552
54520
54520
54520
54528
54552
54528
54480
54576
54568
54568
54504
54536
54560
54560
54560
54552
54480
54568
54576
54576
54496
54496
54512
54576
54576
54536
54496
54560
54576
54592
54488
54584
54576
54560
54576
54504
54568
54576
54576
54592
54576
54576
54592
54576
54576
54584
54496
54544
54552
54552
54520
54552
54576
54512
54560
54584
54552
54544
54544
54520
54592
54576
54528
54592
54576
54544
54576
54520
54560
54584
54608
54592
54496
54592
54600
54600
54552
54512
54552
54600
54592
54600
54504
54592
54584
54512
54608
54584
54592
54552
54600
54552
54552
54592
54608
54552
54560
54520
54528
54560
54568
54608
54560
54608
54560
54608
54520
54600
54600
54592
54520
54600
54560
54592
54592
54608
54608
54568
54608
54520
54608
54600
54592
54528
54528
54544
54608
54576
54608
54520
54592
54608
54600
54600
54608
54600
54600
54608
54544
54600
54512
54520
54608
54536
54600
54600
54592
54608
54592
54592
54568
54608
54600
54512
54608
54592
54536
54608
54600
54568
54608
54600
54544
54608
54600
54568
54608
54536
54608
54608
54536
54528
54560
54608
54544
54608
54600
54536
54608
54520
54560
54600
54600
54592
54600
54520
54512
54600
54608
54528
54552
54608
54600
54608
54528
54608
54536
54568
54536
54584
54608
54600
54568
54608
54608
54600
54600
54512
54536
54568
54584
54536
54608
54600
54600
54608
54600
54528
54544
54608
54568
54616
54536
54608
54608
54600
54528
54576
54592
54592
54608
54544
54592
54536
54608
54608
54536
54576
54608
54576
54592
54608
54544
54608
54608
54608
54536
54616
54616
54608
54600
54544
54576
54600
54576
54544
54528
54600
54528
54568
54592
54600
54512
54608
54576
54528
54560
54528
54544
54600
54608
54608
54608
54600
54592
54576
54536
54608
54608
54592
54616
54600
54592
54568
54600
54592
54592
54544
54568
54544
54512
54592
54528
54608
54592
54528
54584
54592
54600
54592
54584
54520
54608
